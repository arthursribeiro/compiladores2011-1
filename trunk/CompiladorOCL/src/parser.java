
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jun 03 05:49:21 BRT 2011
//----------------------------------------------------

import java_cup.runtime.*;
import Semantica.AnalisadorSemantico;
import Semantica.Node;
import Semantica.DeclaratorNode;
import java.util.List;

/** CUP v0.10k generated parser.
  * @version Fri Jun 03 05:49:21 BRT 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\003\003\000\002\002\004\000\002\003" +
    "\003\000\002\051\006\000\002\052\004\000\002\053\004" +
    "\000\002\053\002\000\002\004\003\000\002\005\003\000" +
    "\002\054\004\000\002\054\002\000\002\006\004\000\002" +
    "\056\006\000\002\055\003\000\002\055\003\000\002\060" +
    "\004\000\002\061\004\000\002\061\002\000\002\057\003" +
    "\000\002\057\002\000\002\007\004\000\002\062\003\000" +
    "\002\011\011\000\002\064\004\000\002\064\002\000\002" +
    "\121\011\000\002\012\003\000\002\013\003\000\002\065" +
    "\006\000\002\065\002\000\002\066\006\000\002\067\004" +
    "\000\002\067\002\000\002\014\003\000\002\014\003\000" +
    "\002\015\006\000\002\016\003\000\002\017\003\000\002" +
    "\017\003\000\002\020\003\000\002\021\004\000\002\070" +
    "\004\000\002\071\004\000\002\071\002\000\002\022\004" +
    "\000\002\072\004\000\002\072\002\000\002\023\004\000" +
    "\002\073\004\000\002\074\004\000\002\074\002\000\002" +
    "\024\004\000\002\075\004\000\002\076\004\000\002\076" +
    "\002\000\002\026\003\000\002\026\003\000\002\077\004" +
    "\000\002\123\002\000\002\027\005\000\002\100\003\000" +
    "\002\100\003\000\002\101\004\000\002\102\004\000\002" +
    "\102\002\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\005\000\002\030\003\000\002\030\004" +
    "\000\002\030\003\000\002\124\002\000\002\032\006\000" +
    "\002\104\003\000\002\104\002\000\002\120\003\000\002" +
    "\120\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\122\003\000\002\122\003\000\002\035\006\000" +
    "\002\105\004\000\002\107\004\000\002\107\002\000\002" +
    "\106\004\000\002\106\002\000\002\036\004\000\002\110" +
    "\005\000\002\110\002\000\002\125\002\000\002\031\006" +
    "\000\002\111\003\000\002\111\002\000\002\113\003\000" +
    "\002\113\002\000\002\037\004\000\002\114\004\000\002" +
    "\115\004\000\002\115\002\000\002\040\003\000\002\041" +
    "\004\000\002\116\004\000\002\117\004\000\002\117\002" +
    "\000\002\042\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\046\003\000\002\046\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\050\003\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\010\002\ufff7\011\012\027\006\001\002\000" +
    "\004\002\001\001\002\000\010\002\ufff7\011\012\016\ufff7" +
    "\001\002\000\004\046\050\001\002\000\004\002\uffff\001" +
    "\002\000\006\002\ufff9\016\ufff9\001\002\000\006\030\077" +
    "\031\075\001\002\000\004\046\022\001\002\000\006\002" +
    "\ufffb\027\006\001\002\000\004\002\015\001\002\000\004" +
    "\002\000\001\002\000\006\002\ufffb\027\006\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffc\001\002\000\006" +
    "\030\uffed\031\uffed\001\002\000\004\041\024\001\002\000" +
    "\006\030\uffec\031\uffec\001\002\000\004\046\026\001\002" +
    "\000\004\065\027\001\002\000\004\065\uffe7\001\002\000" +
    "\006\046\030\066\uffe4\001\002\000\004\037\062\001\002" +
    "\000\004\066\uffe6\001\002\000\004\066\033\001\002\000" +
    "\010\030\uffe9\031\uffe9\037\034\001\002\000\014\005\040" +
    "\045\047\046\050\074\036\075\041\001\002\000\006\030" +
    "\uffeb\031\uffeb\001\002\000\012\030\uffac\031\uffac\042\uffac" +
    "\066\uffac\001\002\000\012\030\uffae\031\uffae\042\uffae\066" +
    "\uffae\001\002\000\006\030\uffdb\031\uffdb\001\002\000\012" +
    "\030\uffad\031\uffad\042\uffad\066\uffad\001\002\000\012\030" +
    "\uffaf\031\uffaf\042\uffaf\066\uffaf\001\002\000\004\065\057" +
    "\001\002\000\006\030\uffdc\031\uffdc\001\002\000\012\030" +
    "\uffe0\031\uffe0\042\uffe0\066\uffe0\001\002\000\006\030\uffea" +
    "\031\uffea\001\002\000\006\065\uff93\071\uff93\001\002\000" +
    "\100\002\uff99\007\uff99\011\uff99\014\uff99\015\uff99\016\uff99" +
    "\020\uff99\026\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034" +
    "\uff99\041\054\042\uff99\043\uff99\051\uff99\052\uff99\053\uff99" +
    "\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062" +
    "\uff99\063\uff99\064\uff99\065\uff99\066\uff99\072\uff99\001\002" +
    "\000\012\030\uffdf\031\uffdf\042\uffdf\066\uffdf\001\002\000" +
    "\100\002\uff99\007\uff99\011\uff99\014\uff99\015\uff99\016\uff99" +
    "\020\uff99\026\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034" +
    "\uff99\041\054\042\uff99\043\uff99\051\uff99\052\uff99\053\uff99" +
    "\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062" +
    "\uff99\063\uff99\064\uff99\065\uff99\066\uff99\072\uff99\001\002" +
    "\000\076\002\uff9c\007\uff9c\011\uff9c\014\uff9c\015\uff9c\016" +
    "\uff9c\020\uff9c\026\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\042\uff9c\043\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\065\uff9c\066\uff9c\072\uff9c\001\002\000" +
    "\004\046\055\001\002\000\100\002\uff9b\007\uff9b\011\uff9b" +
    "\014\uff9b\015\uff9b\016\uff9b\020\uff9b\026\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057" +
    "\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b" +
    "\066\uff9b\072\uff9b\001\002\000\076\002\uff9a\007\uff9a\011" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\020\uff9a\026\uff9a\030\uff9a" +
    "\031\uff9a\032\uff9a\033\uff9a\034\uff9a\042\uff9a\043\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066" +
    "\uff9a\072\uff9a\001\002\000\010\046\050\074\036\075\041" +
    "\001\002\000\004\066\061\001\002\000\012\030\uffde\031" +
    "\uffde\042\uffde\066\uffde\001\002\000\012\045\047\046\050" +
    "\074\036\075\041\001\002\000\006\042\066\066\uffe1\001" +
    "\002\000\006\042\066\066\uffe1\001\002\000\004\066\uffe5" +
    "\001\002\000\004\046\067\001\002\000\004\037\070\001" +
    "\002\000\012\045\047\046\050\074\036\075\041\001\002" +
    "\000\006\042\uffe3\066\uffe3\001\002\000\004\066\uffe2\001" +
    "\002\000\014\002\ufff0\011\ufff0\016\ufff0\030\077\031\075" +
    "\001\002\000\006\037\uffee\046\101\001\002\000\006\037" +
    "\ufff4\046\ufff4\001\002\000\010\002\ufff6\011\ufff6\016\ufff6" +
    "\001\002\000\006\037\ufff3\046\ufff3\001\002\000\004\037" +
    "\102\001\002\000\004\037\uffef\001\002\000\034\004\136" +
    "\006\140\017\113\025\106\035\111\036\127\045\047\046" +
    "\050\047\131\050\134\053\126\065\121\073\120\001\002" +
    "\000\072\002\uffb2\007\uffb2\011\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\020\uffb2\026\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2" +
    "\042\uffb2\043\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\066\uffb2\072\uffb2\001\002\000\070\002\uffc9\007" +
    "\uffc9\011\uffc9\014\uffc9\015\uffc9\016\uffc9\020\uffc9\026\uffc9" +
    "\030\uffc9\031\uffc9\033\uffc9\034\uffc9\042\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\064\uffc9\066\uffc9\072\uffc9\001" +
    "\002\000\072\002\uffc7\007\uffc7\011\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\020\uffc7\026\uffc7\030\uffc7\031\uffc7\033\uffc7\034" +
    "\uffc7\042\uffc7\043\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063" +
    "\uffc7\064\uffc7\066\uffc7\072\uffc7\001\002\000\030\004\uff85" +
    "\006\uff85\017\uff85\035\uff85\036\uff85\045\uff85\046\uff85\047" +
    "\uff85\050\uff85\065\uff85\073\uff85\001\002\000\032\002\uffda" +
    "\011\uffda\014\uffda\015\uffda\016\uffda\030\uffda\031\uffda\033" +
    "\uffda\042\uffda\051\uffda\066\uffda\072\uffda\001\002\000\004" +
    "\071\236\001\002\000\072\002\uffb5\007\uffb5\011\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\020\uffb5\026\uffb5\030\uffb5\031\uffb5" +
    "\033\uffb5\034\uffb5\042\uffb5\043\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\066\uffb5\072\uffb5\001\002\000" +
    "\056\002\uffd3\007\uffd3\011\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\020\uffd3\026\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\042" +
    "\uffd3\051\uffd3\052\225\057\227\060\232\061\231\062\226" +
    "\063\233\066\uffd3\072\uffd3\001\002\000\034\004\136\006" +
    "\140\017\113\025\106\035\111\036\127\045\047\046\050" +
    "\047\131\050\134\053\126\065\121\073\120\001\002\000" +
    "\070\002\uffcb\007\uffcb\011\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\020\uffcb\026\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\042" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\054\214\055\213\056\207" +
    "\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\066" +
    "\uffcb\072\uffcb\001\002\000\072\002\uffbe\007\uffbe\011\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\020\uffbe\026\uffbe\030\uffbe\031" +
    "\uffbe\033\uffbe\034\uffbe\042\uffbe\043\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061" +
    "\uffbe\062\uffbe\063\uffbe\064\uffbe\066\uffbe\072\uffbe\001\002" +
    "\000\064\002\uffcf\007\uffcf\011\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\020\uffcf\026\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf" +
    "\042\uffcf\051\uffcf\052\uffcf\053\203\056\200\057\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\064\202\066\uffcf\072\uffcf" +
    "\001\002\000\042\002\uffd6\007\171\011\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\020\167\026\174\030\uffd6\031\uffd6\033\uffd6" +
    "\034\173\042\uffd6\051\uffd6\066\uffd6\072\uffd6\001\002\000" +
    "\072\002\uffb3\007\uffb3\011\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\020\uffb3\026\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\042" +
    "\uffb3\043\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\066\uffb3\072\uffb3\001\002\000\034\004\136\006\140" +
    "\017\113\025\106\035\111\036\127\045\047\046\050\047" +
    "\131\050\134\053\126\065\121\073\120\001\002\000\070" +
    "\002\uffca\007\uffca\011\uffca\014\uffca\015\uffca\016\uffca\020" +
    "\uffca\026\uffca\030\uffca\031\uffca\033\uffca\034\uffca\042\uffca" +
    "\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057" +
    "\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\066\uffca" +
    "\072\uffca\001\002\000\014\002\uffdd\011\uffdd\016\uffdd\030" +
    "\uffdd\031\uffdd\001\002\000\030\004\136\006\140\017\113" +
    "\035\111\036\127\045\047\046\050\047\131\050\134\065" +
    "\121\073\120\001\002\000\072\002\uffba\007\uffba\011\uffba" +
    "\014\uffba\015\uffba\016\uffba\020\uffba\026\uffba\030\uffba\031" +
    "\uffba\033\uffba\034\uffba\042\uffba\043\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\063\uffba\064\uffba\066\uffba\072\uffba\001\002" +
    "\000\030\004\uff86\006\uff86\017\uff86\035\uff86\036\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\065\uff86\073\uff86\001\002" +
    "\000\072\002\uffb4\007\uffb4\011\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\020\uffb4\026\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4" +
    "\042\uffb4\043\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\064\uffb4\066\uffb4\072\uffb4\001\002\000\072\002\uffbf\007" +
    "\uffbf\011\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\026\uffbf" +
    "\030\uffbf\031\uffbf\033\uffbf\034\uffbf\042\uffbf\043\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\066\uffbf\072" +
    "\uffbf\001\002\000\072\002\uff80\007\uff80\011\uff80\014\uff80" +
    "\015\uff80\016\uff80\020\uff80\026\uff80\030\uff80\031\uff80\033" +
    "\uff80\034\uff80\042\uff80\043\uff80\051\uff80\052\uff80\053\uff80" +
    "\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80\061\uff80\062" +
    "\uff80\063\uff80\064\uff80\066\uff80\072\uff80\001\002\000\076" +
    "\002\uffa2\007\uffa2\011\uffa2\014\uffa2\015\uffa2\016\uffa2\020" +
    "\uffa2\026\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\042\uffa2\043\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2" +
    "\064\uffa2\065\uffa2\066\uffa2\072\uffa2\001\002\000\072\002" +
    "\uffc0\007\uffc0\011\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0" +
    "\026\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0\042\uffc0\043" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\066" +
    "\uffc0\072\uffc0\001\002\000\072\002\uff7f\007\uff7f\011\uff7f" +
    "\014\uff7f\015\uff7f\016\uff7f\020\uff7f\026\uff7f\030\uff7f\031" +
    "\uff7f\033\uff7f\034\uff7f\042\uff7f\043\uff7f\051\uff7f\052\uff7f" +
    "\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061" +
    "\uff7f\062\uff7f\063\uff7f\064\uff7f\066\uff7f\072\uff7f\001\002" +
    "\000\072\002\uffb1\007\uffb1\011\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\020\uffb1\026\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1" +
    "\042\uffb1\043\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1" +
    "\064\uffb1\066\uffb1\072\uffb1\001\002\000\074\002\uffbc\007" +
    "\uffbc\011\uffbc\014\uffbc\015\uffbc\016\uffbc\020\uffbc\026\uffbc" +
    "\030\uffbc\031\uffbc\032\141\033\uffbc\034\uffbc\042\uffbc\043" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\066" +
    "\uffbc\072\uffbc\001\002\000\014\002\ufff5\011\ufff5\016\ufff5" +
    "\030\ufff5\031\ufff5\001\002\000\072\002\uffb0\007\uffb0\011" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\020\uffb0\026\uffb0\030\uffb0" +
    "\031\uffb0\033\uffb0\034\uffb0\042\uffb0\043\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\064\uffb0\066\uffb0\072\uffb0\001" +
    "\002\000\074\002\uff98\007\uff98\011\uff98\014\uff98\015\uff98" +
    "\016\uff98\020\uff98\026\uff98\030\uff98\031\uff98\033\uff98\034" +
    "\uff98\042\uff98\043\uff98\051\uff98\052\uff98\053\uff98\054\uff98" +
    "\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063" +
    "\uff98\064\uff98\065\uff98\066\uff98\072\uff98\001\002\000\072" +
    "\002\uffbb\007\uffbb\011\uffbb\014\uffbb\015\uffbb\016\uffbb\020" +
    "\uffbb\026\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb\042\uffbb" +
    "\043\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\066\uffbb\072\uffbb\001\002\000\076\002\uff9f\007\uff9f\011" +
    "\uff9f\014\uff9f\015\uff9f\016\uff9f\020\uff9f\026\uff9f\030\uff9f" +
    "\031\uff9f\032\141\033\uff9f\034\uff9f\042\uff9f\043\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066" +
    "\uff9f\072\uff9f\001\002\000\074\002\uffa0\007\uffa0\011\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\020\uffa0\026\uffa0\030\uffa0\031" +
    "\uffa0\033\uffa0\034\uffa0\042\uffa0\043\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\072\uffa0" +
    "\001\002\000\074\002\uff9d\007\uff9d\011\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\020\uff9d\026\uff9d\030\uff9d\031\uff9d\033\uff9d" +
    "\034\uff9d\042\uff9d\043\uff9d\051\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d" +
    "\063\uff9d\064\uff9d\065\147\066\uff9d\072\uff9d\001\002\000" +
    "\072\002\uff9e\007\uff9e\011\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\020\uff9e\026\uff9e\030\uff9e\031\uff9e\033\uff9e\034\uff9e\042" +
    "\uff9e\043\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064" +
    "\uff9e\066\uff9e\072\uff9e\001\002\000\036\004\uffb9\006\uffb9" +
    "\017\uffb9\025\uffb9\035\uffb9\036\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\053\uffb9\065\uffb9\066\uffb9\073\uffb9\001\002" +
    "\000\072\002\uffa1\007\uffa1\011\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\020\uffa1\026\uffa1\030\uffa1\031\uffa1\033\uffa1\034\uffa1" +
    "\042\uffa1\043\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\064\uffa1\066\uffa1\072\uffa1\001\002\000\036\004\136\006" +
    "\140\017\113\025\106\035\111\036\127\045\047\046\050" +
    "\047\131\050\134\053\126\065\121\066\uffb6\073\120\001" +
    "\002\000\004\066\uffb7\001\002\000\006\042\160\066\uff94" +
    "\001\002\000\004\066\155\001\002\000\072\002\uffb8\007" +
    "\uffb8\011\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8\026\uffb8" +
    "\030\uffb8\031\uffb8\033\uffb8\034\uffb8\042\uffb8\043\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\066\uffb8\072" +
    "\uffb8\001\002\000\006\042\160\066\uff94\001\002\000\004" +
    "\066\uff97\001\002\000\034\004\136\006\140\017\113\025" +
    "\106\035\111\036\127\045\047\046\050\047\131\050\134" +
    "\053\126\065\121\073\120\001\002\000\006\042\uff96\066" +
    "\uff96\001\002\000\004\066\uff95\001\002\000\070\002\uffc8" +
    "\007\uffc8\011\uffc8\014\uffc8\015\uffc8\016\uffc8\020\uffc8\026" +
    "\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\042\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\066\uffc8\072\uffc8" +
    "\001\002\000\004\066\165\001\002\000\072\002\uffbd\007" +
    "\uffbd\011\uffbd\014\uffbd\015\uffbd\016\uffbd\020\uffbd\026\uffbd" +
    "\030\uffbd\031\uffbd\033\uffbd\034\uffbd\042\uffbd\043\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\066\uffbd\072" +
    "\uffbd\001\002\000\034\004\136\006\140\017\113\025\106" +
    "\035\111\036\127\045\047\046\050\047\131\050\134\053" +
    "\126\065\121\073\120\001\002\000\034\004\uff81\006\uff81" +
    "\017\uff81\025\uff81\035\uff81\036\uff81\045\uff81\046\uff81\047" +
    "\uff81\050\uff81\053\uff81\065\uff81\073\uff81\001\002\000\032" +
    "\002\uffd9\011\uffd9\014\uffd9\015\uffd9\016\uffd9\030\uffd9\031" +
    "\uffd9\033\uffd9\042\uffd9\051\uffd9\066\uffd9\072\uffd9\001\002" +
    "\000\034\004\uff84\006\uff84\017\uff84\025\uff84\035\uff84\036" +
    "\uff84\045\uff84\046\uff84\047\uff84\050\uff84\053\uff84\065\uff84" +
    "\073\uff84\001\002\000\042\002\uffd6\007\171\011\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\020\167\026\174\030\uffd6\031\uffd6" +
    "\033\uffd6\034\173\042\uffd6\051\uffd6\066\uffd6\072\uffd6\001" +
    "\002\000\034\004\uff82\006\uff82\017\uff82\025\uff82\035\uff82" +
    "\036\uff82\045\uff82\046\uff82\047\uff82\050\uff82\053\uff82\065" +
    "\uff82\073\uff82\001\002\000\034\004\uff83\006\uff83\017\uff83" +
    "\025\uff83\035\uff83\036\uff83\045\uff83\046\uff83\047\uff83\050" +
    "\uff83\053\uff83\065\uff83\073\uff83\001\002\000\032\002\uffd7" +
    "\011\uffd7\014\uffd7\015\uffd7\016\uffd7\030\uffd7\031\uffd7\033" +
    "\uffd7\042\uffd7\051\uffd7\066\uffd7\072\uffd7\001\002\000\042" +
    "\002\uffd8\007\uffd8\011\uffd8\014\uffd8\015\uffd8\016\uffd8\020" +
    "\uffd8\026\uffd8\030\uffd8\031\uffd8\033\uffd8\034\uffd8\042\uffd8" +
    "\051\uffd8\066\uffd8\072\uffd8\001\002\000\056\002\uffd2\007" +
    "\uffd2\011\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2\026\uffd2" +
    "\030\uffd2\031\uffd2\033\uffd2\034\uffd2\042\uffd2\051\uffd2\052" +
    "\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\066\uffd2" +
    "\072\uffd2\001\002\000\034\004\uff8a\006\uff8a\017\uff8a\025" +
    "\uff8a\035\uff8a\036\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a" +
    "\053\uff8a\065\uff8a\073\uff8a\001\002\000\064\002\uffcf\007" +
    "\uffcf\011\uffcf\014\uffcf\015\uffcf\016\uffcf\020\uffcf\026\uffcf" +
    "\030\uffcf\031\uffcf\033\uffcf\034\uffcf\042\uffcf\051\uffcf\052" +
    "\uffcf\053\203\056\200\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\202\066\uffcf\072\uffcf\001\002\000\034\004" +
    "\uff8c\006\uff8c\017\uff8c\025\uff8c\035\uff8c\036\uff8c\045\uff8c" +
    "\046\uff8c\047\uff8c\050\uff8c\053\uff8c\065\uff8c\073\uff8c\001" +
    "\002\000\034\004\uff8b\006\uff8b\017\uff8b\025\uff8b\035\uff8b" +
    "\036\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\053\uff8b\065" +
    "\uff8b\073\uff8b\001\002\000\034\004\136\006\140\017\113" +
    "\025\106\035\111\036\127\045\047\046\050\047\131\050" +
    "\134\053\126\065\121\073\120\001\002\000\064\002\uffd1" +
    "\007\uffd1\011\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\026" +
    "\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\042\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\066\uffd1\072\uffd1\001\002\000\056" +
    "\002\uffd0\007\uffd0\011\uffd0\014\uffd0\015\uffd0\016\uffd0\020" +
    "\uffd0\026\uffd0\030\uffd0\031\uffd0\033\uffd0\034\uffd0\042\uffd0" +
    "\051\uffd0\052\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\066\uffd0\072\uffd0\001\002\000\034\004\uff87\006\uff87" +
    "\017\uff87\025\uff87\035\uff87\036\uff87\045\uff87\046\uff87\047" +
    "\uff87\050\uff87\053\uff87\065\uff87\073\uff87\001\002\000\064" +
    "\002\uffce\007\uffce\011\uffce\014\uffce\015\uffce\016\uffce\020" +
    "\uffce\026\uffce\030\uffce\031\uffce\033\uffce\034\uffce\042\uffce" +
    "\051\uffce\052\uffce\053\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\064\uffce\066\uffce\072\uffce\001\002" +
    "\000\070\002\uffcb\007\uffcb\011\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\020\uffcb\026\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb" +
    "\042\uffcb\051\uffcb\052\uffcb\053\uffcb\054\214\055\213\056" +
    "\207\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\066\uffcb\072\uffcb\001\002\000\034\004\136\006\140\017" +
    "\113\025\106\035\111\036\127\045\047\046\050\047\131" +
    "\050\134\053\126\065\121\073\120\001\002\000\034\004" +
    "\uff88\006\uff88\017\uff88\025\uff88\035\uff88\036\uff88\045\uff88" +
    "\046\uff88\047\uff88\050\uff88\053\uff88\065\uff88\073\uff88\001" +
    "\002\000\034\004\uff89\006\uff89\017\uff89\025\uff89\035\uff89" +
    "\036\uff89\045\uff89\046\uff89\047\uff89\050\uff89\053\uff89\065" +
    "\uff89\073\uff89\001\002\000\070\002\uffcd\007\uffcd\011\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\020\uffcd\026\uffcd\030\uffcd\031" +
    "\uffcd\033\uffcd\034\uffcd\042\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\064\uffcd\066\uffcd\072\uffcd\001\002\000\064" +
    "\002\uffcc\007\uffcc\011\uffcc\014\uffcc\015\uffcc\016\uffcc\020" +
    "\uffcc\026\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc\042\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\056\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\062\uffcc\063\uffcc\064\uffcc\066\uffcc\072\uffcc\001\002" +
    "\000\004\033\220\001\002\000\034\004\136\006\140\017" +
    "\113\025\106\035\111\036\127\045\047\046\050\047\131" +
    "\050\134\053\126\065\121\073\120\001\002\000\004\014" +
    "\222\001\002\000\034\004\136\006\140\017\113\025\106" +
    "\035\111\036\127\045\047\046\050\047\131\050\134\053" +
    "\126\065\121\073\120\001\002\000\004\015\224\001\002" +
    "\000\072\002\uffe8\007\uffe8\011\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\020\uffe8\026\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8" +
    "\042\uffe8\043\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8" +
    "\064\uffe8\066\uffe8\072\uffe8\001\002\000\034\004\uff92\006" +
    "\uff92\017\uff92\025\uff92\035\uff92\036\uff92\045\uff92\046\uff92" +
    "\047\uff92\050\uff92\053\uff92\065\uff92\073\uff92\001\002\000" +
    "\034\004\uff8e\006\uff8e\017\uff8e\025\uff8e\035\uff8e\036\uff8e" +
    "\045\uff8e\046\uff8e\047\uff8e\050\uff8e\053\uff8e\065\uff8e\073" +
    "\uff8e\001\002\000\034\004\uff90\006\uff90\017\uff90\025\uff90" +
    "\035\uff90\036\uff90\045\uff90\046\uff90\047\uff90\050\uff90\053" +
    "\uff90\065\uff90\073\uff90\001\002\000\042\002\uffd5\007\uffd5" +
    "\011\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\026\uffd5\030" +
    "\uffd5\031\uffd5\033\uffd5\034\uffd5\042\uffd5\051\uffd5\066\uffd5" +
    "\072\uffd5\001\002\000\034\004\uff8d\006\uff8d\017\uff8d\025" +
    "\uff8d\035\uff8d\036\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d" +
    "\053\uff8d\065\uff8d\073\uff8d\001\002\000\034\004\uff91\006" +
    "\uff91\017\uff91\025\uff91\035\uff91\036\uff91\045\uff91\046\uff91" +
    "\047\uff91\050\uff91\053\uff91\065\uff91\073\uff91\001\002\000" +
    "\034\004\uff8f\006\uff8f\017\uff8f\025\uff8f\035\uff8f\036\uff8f" +
    "\045\uff8f\046\uff8f\047\uff8f\050\uff8f\053\uff8f\065\uff8f\073" +
    "\uff8f\001\002\000\034\004\136\006\140\017\113\025\106" +
    "\035\111\036\127\045\047\046\050\047\131\050\134\053" +
    "\126\065\121\073\120\001\002\000\042\002\uffd4\007\uffd4" +
    "\011\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\026\uffd4\030" +
    "\uffd4\031\uffd4\033\uffd4\034\uffd4\042\uffd4\051\uffd4\066\uffd4" +
    "\072\uffd4\001\002\000\036\004\136\006\140\017\113\025" +
    "\106\035\111\036\127\045\047\046\050\047\131\050\134" +
    "\053\126\065\121\072\uffa6\073\120\001\002\000\010\042" +
    "\uffa3\051\251\072\uffa3\001\002\000\004\072\247\001\002" +
    "\000\006\042\243\072\uffa8\001\002\000\004\072\uffa7\001" +
    "\002\000\034\004\136\006\140\017\113\025\106\035\111" +
    "\036\127\045\047\046\050\047\131\050\134\053\126\065" +
    "\121\073\120\001\002\000\006\042\243\072\uffa8\001\002" +
    "\000\004\072\uffa9\001\002\000\006\042\uffaa\072\uffaa\001" +
    "\002\000\072\002\uffab\007\uffab\011\uffab\014\uffab\015\uffab" +
    "\016\uffab\020\uffab\026\uffab\030\uffab\031\uffab\033\uffab\034" +
    "\uffab\042\uffab\043\uffab\051\uffab\052\uffab\053\uffab\054\uffab" +
    "\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063" +
    "\uffab\064\uffab\066\uffab\072\uffab\001\002\000\006\042\uffa5" +
    "\072\uffa5\001\002\000\004\051\252\001\002\000\034\004" +
    "\136\006\140\017\113\025\106\035\111\036\127\045\047" +
    "\046\050\047\131\050\134\053\126\065\121\073\120\001" +
    "\002\000\006\042\uffa4\072\uffa4\001\002\000\072\002\uffc1" +
    "\007\uffc1\011\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\026" +
    "\uffc1\030\uffc1\031\uffc1\033\uffc1\034\uffc1\042\uffc1\043\257" +
    "\051\255\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\066\uffc1" +
    "\072\uffc1\001\002\000\004\046\uffc5\001\002\000\072\002" +
    "\uffc1\007\uffc1\011\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1" +
    "\026\uffc1\030\uffc1\031\uffc1\033\uffc1\034\uffc1\042\uffc1\043" +
    "\257\051\255\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\066" +
    "\uffc1\072\uffc1\001\002\000\004\046\uffc4\001\002\000\004" +
    "\046\050\001\002\000\070\002\uffc6\007\uffc6\011\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\020\uffc6\026\uffc6\030\uffc6\031\uffc6" +
    "\033\uffc6\034\uffc6\042\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\066\uffc6\072\uffc6\001\002\000\072\002" +
    "\uffc3\007\uffc3\011\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3" +
    "\026\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3\042\uffc3\043" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\066" +
    "\uffc3\072\uffc3\001\002\000\070\002\uffc2\007\uffc2\011\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\020\uffc2\026\uffc2\030\uffc2\031" +
    "\uffc2\033\uffc2\034\uffc2\042\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\064\uffc2\066\uffc2\072\uffc2\001\002\000\014" +
    "\002\ufff0\011\ufff0\016\ufff0\030\077\031\075\001\002\000" +
    "\010\002\ufff2\011\ufff2\016\ufff2\001\002\000\010\002\ufff1" +
    "\011\ufff1\016\ufff1\001\002\000\006\011\012\016\ufff7\001" +
    "\002\000\006\011\ufffa\016\ufffa\001\002\000\004\016\272" +
    "\001\002\000\006\002\ufffe\027\ufffe\001\002\000\006\002" +
    "\ufff8\016\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\020\003\013\005\006\006\004\007\010\051" +
    "\012\052\003\054\007\001\001\000\002\001\001\000\010" +
    "\006\004\007\010\054\272\001\001\000\006\004\266\037" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\055\073\056\072\060\075\001\001\000\006\011\022\062" +
    "\020\001\001\000\006\051\015\053\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\015\053\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\031" +
    "\065\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\034\001\001\000\020\014\043" +
    "\015\050\017\045\034\044\037\041\042\042\122\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\114\051\115\052\001" +
    "\001\000\002\001\001\000\006\114\051\115\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\034\057\037\041\122\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\062\015" +
    "\050\034\044\037\041\042\042\122\036\001\001\000\006" +
    "\066\063\067\064\001\001\000\006\066\063\067\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\070\015\050\034\044\037\041\042\042\122" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\055\073\056\263\061\264\001\001\000\004\057\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\016\136\020" +
    "\122\021\106\022\116\023\111\024\115\026\113\027\103" +
    "\030\104\031\114\033\127\035\132\037\131\042\107\046" +
    "\123\050\102\077\121\120\134\121\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\233\072\227\001\001\000\046\020" +
    "\216\021\106\022\116\023\111\024\115\026\113\027\103" +
    "\030\104\031\114\033\127\035\132\037\131\042\107\046" +
    "\123\050\102\077\121\120\134\121\124\001\001\000\010" +
    "\045\211\075\210\076\207\001\001\000\002\001\001\000" +
    "\010\044\203\073\200\074\176\001\001\000\010\047\165" +
    "\070\171\071\167\001\001\000\002\001\001\000\046\020" +
    "\163\021\106\022\116\023\111\024\115\026\113\027\103" +
    "\030\104\031\114\033\127\035\132\037\131\042\107\046" +
    "\123\050\102\077\121\120\134\121\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\027\162\030\104\031" +
    "\114\033\127\035\132\037\131\042\107\050\102\120\134" +
    "\121\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\125\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\143\111\144\001\001\000\002\001\001\000\006" +
    "\032\145\113\147\001\001\000\002\001\001\000\004\124" +
    "\150\001\001\000\002\001\001\000\052\020\152\021\106" +
    "\022\116\023\111\024\115\026\113\027\103\030\104\031" +
    "\114\033\127\035\132\037\131\041\151\042\107\046\123" +
    "\050\102\077\121\104\153\120\134\121\124\001\001\000" +
    "\002\001\001\000\006\116\155\117\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\116\155\117\161\001" +
    "\001\000\002\001\001\000\046\020\160\021\106\022\116" +
    "\023\111\024\115\026\113\027\103\030\104\031\114\033" +
    "\127\035\132\037\131\042\107\046\123\050\102\077\121" +
    "\120\134\121\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\022\175\023\111\024\115\026\113\027\103\030" +
    "\104\031\114\033\127\035\132\037\131\042\107\046\123" +
    "\050\102\077\121\120\134\121\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\047\165" +
    "\070\171\071\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\203\073\200\074\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\024\204" +
    "\026\113\027\103\030\104\031\114\033\127\035\132\037" +
    "\131\042\107\046\123\050\102\077\121\120\134\121\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\045\211\075\210\076\215" +
    "\001\001\000\034\026\214\027\103\030\104\031\114\033" +
    "\127\035\132\037\131\042\107\046\123\050\102\077\121" +
    "\120\134\121\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\020\220\021\106\022\116\023\111\024\115\026" +
    "\113\027\103\030\104\031\114\033\127\035\132\037\131" +
    "\042\107\046\123\050\102\077\121\120\134\121\124\001" +
    "\001\000\002\001\001\000\046\020\222\021\106\022\116" +
    "\023\111\024\115\026\113\027\103\030\104\031\114\033" +
    "\127\035\132\037\131\042\107\046\123\050\102\077\121" +
    "\120\134\121\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\023\234\024\115\026\113\027\103" +
    "\030\104\031\114\033\127\035\132\037\131\042\107\046" +
    "\123\050\102\077\121\120\134\121\124\001\001\000\002" +
    "\001\001\000\052\020\236\021\106\022\116\023\111\024" +
    "\115\026\113\027\103\030\104\031\114\033\127\035\132" +
    "\036\240\037\131\042\107\046\123\050\102\077\121\106" +
    "\237\120\134\121\124\001\001\000\004\110\247\001\001" +
    "\000\002\001\001\000\006\105\243\107\241\001\001\000" +
    "\002\001\001\000\050\020\236\021\106\022\116\023\111" +
    "\024\115\026\113\027\103\030\104\031\114\033\127\035" +
    "\132\036\245\037\131\042\107\046\123\050\102\077\121" +
    "\120\134\121\124\001\001\000\006\105\243\107\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\020\252\021" +
    "\106\022\116\023\111\024\115\026\113\027\103\030\104" +
    "\031\114\033\127\035\132\037\131\042\107\046\123\050" +
    "\102\077\121\120\134\121\124\001\001\000\002\001\001" +
    "\000\010\100\257\101\255\102\260\001\001\000\002\001" +
    "\001\000\010\100\257\101\255\102\262\001\001\000\002" +
    "\001\001\000\006\031\261\037\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\055\073" +
    "\056\263\061\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\270\006\004\007\010\054\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 	
				public AnalisadorSemantico semantico = new AnalisadorSemantico();
				
				public void report_error(String message, Object info){
					Symbol sym = (Symbol) info;
					throw new Error("Syntax ERROR in '"+sym.value+"' at line: "+(sym.left+1));
			  	}
		 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // number ::= FLOAT_LITERAL 
            {
              Object RESULT = null;
		int numbFloatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numbFloatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object numbFloat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(numbFloat, "Float", (String)numbFloat); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // number ::= INTEGER_LITERAL 
            {
              Object RESULT = null;
		int numbIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numbIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object numbInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(numbInt, "Integer", numbInt.toString()); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // logicalOperator ::= IMPLIES 
            {
              Object RESULT = null;
		 RESULT = "implies"; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*logicalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // logicalOperator ::= XOR 
            {
              Object RESULT = null;
		 RESULT = "xor"; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*logicalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // logicalOperator ::= OR 
            {
              Object RESULT = null;
		 RESULT = "or"; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*logicalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // logicalOperator ::= AND 
            {
              Object RESULT = null;
		 RESULT = "and"; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*logicalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // unaryOperator ::= NOT 
            {
              Object RESULT = null;
		 RESULT = "not"; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*unaryOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // unaryOperator ::= MINUS 
            {
              Object RESULT = null;
		 RESULT = "-"; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*unaryOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // multiplyOperator ::= MOD 
            {
              Object RESULT = null;
		 RESULT = "%"; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*multiplyOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // multiplyOperator ::= DIVIDE 
            {
              Object RESULT = null;
		 RESULT = "/"; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*multiplyOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // multiplyOperator ::= MULTIPLY 
            {
              Object RESULT = null;
		 RESULT = "*"; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*multiplyOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // addOperator ::= MOD 
            {
              Object RESULT = null;
		 RESULT = "%"; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*addOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // addOperator ::= MINUS 
            {
              Object RESULT = null;
		 RESULT = "-"; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*addOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // addOperator ::= PLUS 
            {
              Object RESULT = null;
		 RESULT = "+"; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*addOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // relationalOperator ::= NOTEQ 
            {
              Object RESULT = null;
		 RESULT = "<>"; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // relationalOperator ::= LESSEQTHAN 
            {
              Object RESULT = null;
		 RESULT = "<="; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // relationalOperator ::= GREATEREQTHAN 
            {
              Object RESULT = null;
		 RESULT = ">="; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // relationalOperator ::= LESSTHAN 
            {
              Object RESULT = null;
		 RESULT = "<"; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // relationalOperator ::= GREATERTHAN 
            {
              Object RESULT = null;
		 RESULT = ">"; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // relationalOperator ::= EQ 
            {
              Object RESULT = null;
		 RESULT = "="; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // collectionKind ::= COLLECTION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // actualParameterListAuxLoop ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(77/*actualParameterListAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // actualParameterListAuxLoop ::= actualParameterListAux actualParameterListAuxLoop 
            {
              Object RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object aloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado = new Node();
																							if(aloop == null) {
																								resultado.addElement((Node) a1);
																								resultado.setCode(((Node) a1).getCode());
																							}
																							else{
																								resultado.addElement((Node)a1);
																								resultado.addAllElements(((Node) aloop).getElements());
																								resultado.setCode(((Node) a1).getCode()+((Node) aloop).getCode());
																							}
																							RESULT = resultado; 
              CUP$parser$result = new java_cup.runtime.Symbol(77/*actualParameterListAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // actualParameterListAux ::= VIRGULA expression 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node n = (Node)e1; n.setCode(", " + ((Node)e1).getCode()); RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(76/*actualParameterListAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // actualParameterList ::= expression actualParameterListAuxLoop 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object aloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado = new Node();
																		if(e1 == null && aloop == null){
																			resultado = null;
																		}else if(aloop == null){
																			resultado.addElement((Node)e1);
																			resultado.setCode(((Node)e1).getCode());
																		}else{
																			resultado.addElement((Node)e1);
																			resultado.addAllElements(((Node) aloop).getElements());
																			resultado.setCode(((Node)e1).getCode()+((Node) aloop).getCode());
																		}
																		RESULT = resultado; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*actualParameterList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // timeExpression ::= ATPRE 
            {
              Object RESULT = null;
		int atPreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atPreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atPre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.semantico.checkStereotype("@pre",atPreleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*timeExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // pathNameAuxLoop ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(75/*pathNameAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // pathNameAuxLoop ::= pathNameAux pathNameAuxLoop 
            {
              Object RESULT = null;
		int pauxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pauxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object paux = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ploopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ploopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ploop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado;
															  resultado = new Node();
																if(ploop == null){
																	resultado.addElement((Node)paux);
																}else{
																	resultado.addElement((Node)paux);
																	resultado.addAllElements(((Node) ploop).getElements());
																}RESULT = resultado; 
              CUP$parser$result = new java_cup.runtime.Symbol(75/*pathNameAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // pathNameAux ::= DDOUBLEPOINT IDENTIFIER 
            {
              Object RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(id1.toString());
              CUP$parser$result = new java_cup.runtime.Symbol(74/*pathNameAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // pathName ::= IDENTIFIER pathNameAuxLoop 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ploopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ploopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ploop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado = new Node();
													Node identifier = new Node(id.toString());
													if(ploop == null){
														resultado.addElement(identifier);
														resultado.setCode(id.toString());
													}else{
														resultado.addElement(identifier);
														resultado.addAllElements(((Node) ploop).getElements());
														List<Node> l = ((Node) ploop).getElements();
														resultado.setCode((String)l.get(l.size() - 1).getValue());
													}
													RESULT = resultado;   
              CUP$parser$result = new java_cup.runtime.Symbol(29/*pathName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // propertyCallAux3 ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(73/*propertyCallAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // propertyCallAux3 ::= propertyCallParameters 
            {
              Object RESULT = null;
		int prop1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int prop1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object prop1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = prop1; 
              CUP$parser$result = new java_cup.runtime.Symbol(73/*propertyCallAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // propertyCallAux ::= 
            {
              Object RESULT = null;
		 RESULT = new Node(); 
              CUP$parser$result = new java_cup.runtime.Symbol(71/*propertyCallAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // propertyCallAux ::= timeExpression 
            {
              Object RESULT = null;
		 Node n = new Node(); n.setArrobapre(true); RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(71/*propertyCallAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // propertyCall ::= pathName NT$2 propertyCallAux propertyCallAux3 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pauxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pauxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object paux = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int prop3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int prop3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object prop3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado = new Node();
																						if(prop3 == null){
																							resultado.setRole(Semantica.Node.VARIABLE);
																							resultado.addAllCaminho(((Node)pt).getElements());
																							resultado.setCode(((Node)pt).getCode());
																							resultado.setArrobapre(((Node)paux).isArrobapre());
																						}else{
																							resultado.setRole(Semantica.Node.FUNCTION);
																							resultado.setValue(((Node)pt).getElements().get(((Node)pt).getElements().size()-1).getValue());
																							//System.out.println("Value :" + resultado.getValue());
																							resultado.addAllElements(((Node) prop3).getElements());
																							parser.semantico.setContextAuxBool(false);
																							resultado.setCode(((Node)pt).getCode()+((Node)prop3).getCode());
																							resultado.setArrobapre(((Node)paux).isArrobapre());
																						}
																						
																						RESULT = resultado;
              CUP$parser$result = new java_cup.runtime.Symbol(23/*propertyCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$2 ::= 
            {
              Object RESULT = null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 parser.semantico.checkCallName((Node)pt); 
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // collectionItemAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(70/*collectionItemAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // collectionItemAux ::= POINT POINT expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(70/*collectionItemAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // collectionItem ::= expression collectionItemAux 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*collectionItem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literalCollectionAux2 ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(68/*literalCollectionAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literalCollectionAux2 ::= collectionItem literalCollectionAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(68/*literalCollectionAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literalCollectionAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(69/*literalCollectionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literalCollectionAuxLoop ::= literalCollectionAux literalCollectionAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(69/*literalCollectionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literalCollectionAux ::= VIRGULA collectionItem 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(67/*literalCollectionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literalCollection ::= collectionKind LEFTBRACKET literalCollectionAux2 RIGHTBRACKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*literalCollection*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // oclType ::= OCL_PRIMITIVE 
            {
              Object RESULT = null;
		int basic1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int basic1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object basic1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(basic1, ((String) basic1)); 
              CUP$parser$result = new java_cup.runtime.Symbol(80/*oclType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // oclType ::= OCL_SUPER_TYPE 
            {
              Object RESULT = null;
		int super1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int super1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object super1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(super1, ((String) super1) ); 
              CUP$parser$result = new java_cup.runtime.Symbol(80/*oclType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simpleTypeSpecifier ::= oclType 
            {
              Object RESULT = null;
		int oclTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oclTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object oclT = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = oclT; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*simpleTypeSpecifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simpleTypeSpecifier ::= pathName 
            {
              Object RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object path = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = path; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*simpleTypeSpecifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= RESULT 
            {
              Object RESULT = null;
		int litResultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litResultright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object litResult = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	parser.semantico.checkStereotype("result",litResultleft); 
					RESULT = new Node("result",parser.semantico.getContextReturn());
				
              CUP$parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= booleanLiteral 
            {
              Object RESULT = null;
		int litBoolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litBoolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object litBool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = litBool; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= number 
            {
              Object RESULT = null;
		int litNumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litNumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object litNum = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = litNum; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= STRING_LITERAL 
            {
              Object RESULT = null;
		int litStringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litStringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object litString = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(litString,"String", "'"+ (String) litString  + "'"); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // booleanLiteral ::= FALSE 
            {
              Object RESULT = null;
		int boolFalseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int boolFalseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object boolFalse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(boolFalse,"Boolean", "False"); 
              CUP$parser$result = new java_cup.runtime.Symbol(78/*booleanLiteral*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // booleanLiteral ::= TRUE 
            {
              Object RESULT = null;
		int boolTrueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int boolTrueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object boolTrue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(boolTrue,"Boolean", "True"); 
              CUP$parser$result = new java_cup.runtime.Symbol(78/*booleanLiteral*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // propertyCallParametersAux2 ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(66/*propertyCallParametersAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // propertyCallParametersAux2 ::= actualParameterList 
            {
              Object RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (Node)a1;
              CUP$parser$result = new java_cup.runtime.Symbol(66/*propertyCallParametersAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // propertyCallParameters ::= LEFTPARENTHESIS NT$1 propertyCallParametersAux2 RIGHTPARENTHESIS 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prop2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prop2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prop2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
																								 if(prop2!= null){
																									 //System.out.println("blaca baga :" + ((Node)prop2).listToString());
																									Node n = (Node)prop2;
																									n.setCode("(" + n.getCode() + ")"); 
																								  	RESULT = n;
																								 }else{
																								    Node n = new Node();
																								    n.setCode("()");
																								 	RESULT = n;
																								 }
																								 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*propertyCallParameters*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$1 ::= 
            {
              Object RESULT = null;
 parser.semantico.addParentesis(); 
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // primaryExpression ::= ifExpression 
            {
              Object RESULT = null;
		int ifStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ifStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ifStmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 //System.out.println("tipo na primary " + ((Node)ifStmt).getType()); 
												RESULT = (Node)ifStmt; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // primaryExpression ::= SELF timeExpression 
            {
              Object RESULT = null;
		 Node aux = new Node("self",parser.semantico.getContextClass(),""); aux.setArrobapre(true); RESULT = aux; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // primaryExpression ::= SELF 
            {
              Object RESULT = null;
		 Node aux = new Node("self",parser.semantico.getContextClass(),"self"); aux.setSelfable(true); RESULT = aux; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // primaryExpression ::= LEFTPARENTHESIS expression RIGHTPARENTHESIS 
            {
              Object RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							((Node)exp).setCode(" ( " + ((Node)exp).getCode()+ " ) ");
							RESULT = exp;
						
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // primaryExpression ::= propertyCall 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p1; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primaryExpression ::= literal 
            {
              Object RESULT = null;
		int lit1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lit1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object lit1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
							RESULT = lit1; 
						
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // primaryExpression ::= literalCollection 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // postfixExpressionAux2Loop ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*postfixExpressionAux2Loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // postfixExpressionAux2Loop ::= postfixExpressionAux2 postfixExpressionAux2Loop 
            {
              Object RESULT = null;
		int paux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object paux2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ploopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ploopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ploop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado = new Node();
																							 Node aux = (Node)paux2;
																							  resultado.setCode(aux.getCode());
																							  resultado.setArrobapre(aux.isArrobapre());
																							 if( aux.getRole() == Semantica.Node.FUNCTION || aux.getRole() == Semantica.Node.FUNCTION_COLLECTION){
																							 	//System.out.println("MACONHA Result: " + ((Node) aux).listToString() );
																							 	resultado.addCaminho(aux);
																							 }else{
																							 	resultado.addAllCaminho(((Node)paux2).getList_caminho());
																							 }
																						 	 if(ploop != null){
																						 	 	resultado.setCode(resultado.getCode() + "." + ((Node)ploop).getCode());
																						 	 	resultado.setArrobapre(((Node)ploop).isArrobapre());
																						 	 	resultado.addAllCaminho(((Node)ploop).getList_caminho());
																						 }RESULT  = resultado;
              CUP$parser$result = new java_cup.runtime.Symbol(64/*postfixExpressionAux2Loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // postfixExpressionAux2 ::= postfixExpressionAux propertyCall 
            {
              Object RESULT = null;
		int pauxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pauxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object paux = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 //System.out.println("ROle : " +((Node)pc).getRole() + " Value :"+((Node)pc).getValue()); 
																	  parser.semantico.setContextAux(pc,pcleft);
																	  if(((String) paux).equalsIgnoreCase("arrow")){
																	  	parser.semantico.checkCollection( ((Node)pc), pcleft );
																	  	((Node)pc).setRole(Semantica.Node.FUNCTION_COLLECTION);
																	  	RESULT = ((Node)pc);
																	  }else{
																	  	RESULT = (Node)pc;
																	  } 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*postfixExpressionAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // postfixExpressionAux ::= ARROW 
            {
              Object RESULT = null;
		 //parser.semantico.setContextAuxBool(true); 
																	RESULT = "arrow"; 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*postfixExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // postfixExpressionAux ::= POINT 
            {
              Object RESULT = null;
		 RESULT = "point"; 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*postfixExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // postfixExpression ::= primaryExpression NT$0 postfixExpressionAux2Loop 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int primexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int primexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object primexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int postfexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postfexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object postfexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						Node resultado;
						Node aux = new Node();
						Node prime = (Node)primexp;
						aux.setArrobapre(((Node)primexp).isArrobapre());
						boolean postfexp_check = false;
						if( ((Node)primexp).getList_caminho().size() < 1 ){
							aux.addCaminho(((Node)primexp));
						}else{
							aux.addAllCaminho(((Node)primexp).getList_caminho());
						}
						
						if (postfexp != null){
							//System.out.println(((Node)postfexp).getCode());
							aux.addAllCaminho(((Node)postfexp).getList_caminho());
							aux.setArrobapre(((Node)postfexp).isArrobapre());
							postfexp_check = true;
							
						}
						if( !aux.isArrobapre() || (aux.isArrobapre() && !prime.isSelfable())){
							aux.setCode(((Node)primexp).getCode());
							aux.setSelfable(((Node)primexp).isSelfable());
						}
						if(postfexp_check){
							if(aux.getCode() != null){
								aux.setCode(aux.getCode()+"."+((Node)postfexp).getCode());
							}else{
								aux.setCode("."+((Node)postfexp).getCode());
							}
						}
						if(aux.isArrobapre()){
							String code_aux = aux.getCode();
							aux.setCode("context"+code_aux);
						}else{
							
							if(!aux.isSelfable()){
								String code_aux = aux.getCode();
								if(parser.semantico.contextAuxBool && !(aux.getCode().indexOf("exists(")>0 || aux.getCode().indexOf("forAll(")>0 || aux.getCode().indexOf("select(")>0) ){
									aux.setCode("x."+code_aux);
								}else{
									
									
									aux.setCode("self."+code_aux);
								}
								
							}
						}
//						System.out.println(aux.getCode());
						aux.setCode(aux.getCode().replace(".size()", ".__len__()"));
						if(aux.getCode().indexOf(".includes(")>0){
							
						}
						if(!(parser.semantico.contextAuxBool && !(aux.getCode().indexOf("exists(")>0 || aux.getCode().indexOf("forAll(")>0 || aux.getCode().indexOf("select(")>0) )){
							if(aux.getCode().indexOf("forAll(")>0){
								int forI = aux.getCode().indexOf("forAll(");
								String pathBefore = aux.getCode().substring(0,forI-1);
								int paramI = aux.getCode().indexOf("(", forI);
								String param = aux.getCode().substring(paramI);
								String code = "([ x for x in "+pathBefore+" if("+param+")] == "+pathBefore+")";
								aux.setCode(code);
							}else if(aux.getCode().indexOf("select(")>0){
								String codeAux = aux.getCode();
								while(codeAux.indexOf("select(")>0){
									int forI = codeAux.indexOf("select(");
									String pathBefore = codeAux.substring(0,forI-1);
									int paramI = codeAux.indexOf("(", forI);
									String end = codeAux.substring(paramI);
									int parentesis = 0;
									int endParam = -1;
									String fim = "";
									for (int i = 0; i < end.length(); i++) {
										if((end.charAt(i)+"").equalsIgnoreCase("("))
											parentesis++;
										if((end.charAt(i)+"").equalsIgnoreCase(")"))
											parentesis--;
										if(parentesis == 0){
											endParam = i+1;
											
											break;
										}
										fim+=end.charAt(i);
									}
									
									end = end.substring(endParam);
									
									codeAux = "([ x for x in "+pathBefore+" if("+fim+")])"+end;
								}
								aux.setCode(codeAux);
							}else if(aux.getCode().indexOf("exists(")>0){
								String codeAux = aux.getCode();
								while(codeAux.indexOf("exists(")>0){
									int forI = codeAux.indexOf("exists(");
									String pathBefore = codeAux.substring(0,forI-1);
									int paramI = codeAux.indexOf("(", forI);
									String end = codeAux.substring(paramI);
									int parentesis = 0;
									int endParam = -1;
									String fim = "";
									for (int i = 0; i < end.length(); i++) {
										if((end.charAt(i)+"").equalsIgnoreCase("("))
											parentesis++;
										if((end.charAt(i)+"").equalsIgnoreCase(")"))
											parentesis--;
										if(parentesis == 0){
											endParam = i+1;
											
											break;
										}
										fim+=end.charAt(i);
									}
									
									end = end.substring(endParam);
									
									codeAux = "([ x for x in "+pathBefore+" if("+fim+")].__len__() > 0)"+end;
								}
								aux.setCode(codeAux);
							}
						}
						if( postfexp != null || ((Node)primexp).getRole() == Node.VARIABLE ){
							//System.out.println("List : " + ((Node)aux).listToString() + "\n" + "Caminho = " + ((Node)aux).printAllParamethrs() );
							resultado = parser.semantico.checkAllPathFunction(aux.getList_caminho(),primexpleft,null,null);
							resultado.setCode(aux.getCode());
							RESULT = resultado;
						}else{
							RESULT = primexp;
						}
					
              CUP$parser$result = new java_cup.runtime.Symbol(21/*postfixExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$0 ::= 
            {
              Object RESULT = null;
		int primexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int primexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object primexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 parser.semantico.setContextAux(primexp,primexpleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(81/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unaryExpressionAux ::= unaryOperator postfixExpression 
            {
              Object RESULT = null;
		int unopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int unopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object unop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int postfexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postfexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object postfexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = postfexp;
						
              CUP$parser$result = new java_cup.runtime.Symbol(61/*unaryExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unaryExpression ::= postfixExpression 
            {
              Object RESULT = null;
		int postfexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postfexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object postfexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = postfexp;
						
              CUP$parser$result = new java_cup.runtime.Symbol(20/*unaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unaryExpression ::= unaryExpressionAux 
            {
              Object RESULT = null;
		int unexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object unexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = unexp;
						
              CUP$parser$result = new java_cup.runtime.Symbol(20/*unaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // multiplicativeExpressionAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(60/*multiplicativeExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // multiplicativeExpressionAuxLoop ::= multiplicativeExpressionAux multiplicativeExpressionAuxLoop 
            {
              Object RESULT = null;
		int addexpaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addexparight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addexpa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object addexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
										RESULT  = parser.semantico.checkMultiplicativeExpressionAuxLoop(addexpaloop, addexpa, addexpaloopleft, addexpaleft);
									
              CUP$parser$result = new java_cup.runtime.Symbol(60/*multiplicativeExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // multiplicativeExpressionAux ::= multiplyOperator unaryExpression 
            {
              Object RESULT = null;
		int multopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object multop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int unexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object unexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
									RESULT  = parser.semantico.checkMultiplicativeExpressionAux(multop, unexp, unexpleft);
								
              CUP$parser$result = new java_cup.runtime.Symbol(59/*multiplicativeExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // multiplicativeExpression ::= unaryExpression multiplicativeExpressionAuxLoop 
            {
              Object RESULT = null;
		int unexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int unexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object unexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int multexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object multexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkMultiplicativeExpression(multexpaloop, unexp, multexpaloopleft, unexpleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(18/*multiplicativeExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additiveExpressionAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(58/*additiveExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // additiveExpressionAuxLoop ::= additiveExpressionAux additiveExpressionAuxLoop 
            {
              Object RESULT = null;
		int addexpaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addexparight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addexpa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object addexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkAdditiveExpressionAuxLoop(addexpa, addexpaloop, addexpaloopleft, addexpaleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(58/*additiveExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // additiveExpressionAux ::= addOperator multiplicativeExpression 
            {
              Object RESULT = null;
		int addopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multexp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int multexp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object multexp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = parser.semantico.checkAdditiveExpressionAux(addop, multexp2, multexp2left);
						
              CUP$parser$result = new java_cup.runtime.Symbol(57/*additiveExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // additiveExpression ::= multiplicativeExpression additiveExpressionAuxLoop 
            {
              Object RESULT = null;
		int multexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object multexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object addexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = parser.semantico.checkAdditiveExpression(addexpaloop, multexp, addexpaloopleft, multexpleft);
						
              CUP$parser$result = new java_cup.runtime.Symbol(17/*additiveExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relationalExpressionAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(56/*relationalExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relationalExpressionAux ::= relationalOperator additiveExpression 
            {
              Object RESULT = null;
		int relopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object relop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addexp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addexp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object addexp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkRelationalExpressionAux(addexp2, relop, addexp2left);
							
              CUP$parser$result = new java_cup.runtime.Symbol(56/*relationalExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relationalExpression ::= additiveExpression relationalExpressionAux 
            {
              Object RESULT = null;
		int addexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int relexpaux3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int relexpaux3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object relexpaux3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = parser.semantico.checkRelationalExpression(relexpaux3, addexp,addexpleft);
						
              CUP$parser$result = new java_cup.runtime.Symbol(16/*relationalExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // logicalExpressionAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(55/*logicalExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // logicalExpressionAuxLoop ::= logicalExpressionAux logicalExpressionAuxLoop 
            {
              Object RESULT = null;
		int logexpaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logexparight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object logexpa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int logexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int logexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object logexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkLogicalExpressionAuxLoop(logexpa, logexpaloop, logexpaloopleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(55/*logicalExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logicalExpressionAux ::= logicalOperator relationalExpression 
            {
              Object RESULT = null;
		int logopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object logop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int relexp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int relexp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object relexp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = parser.semantico.checkLogicalExpressionAux(relexp2, logop, relexp2left);
						
              CUP$parser$result = new java_cup.runtime.Symbol(54/*logicalExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logicalExpression ::= relationalExpression logicalExpressionAuxLoop 
            {
              Object RESULT = null;
		int relexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object relexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int logexploopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int logexploopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object logexploop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
							RESULT = parser.semantico.checkLogicalExpression(relexp, logexploop, relexpleft, logexploopleft); 
						
              CUP$parser$result = new java_cup.runtime.Symbol(15/*logicalExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= logicalExpression 
            {
              Object RESULT = null;
		int logexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int logexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object logexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				//System.out.println( ((Node)logexp).getValue() );
				//if( ! ((Node)logexp).getType().equals("Boolean") )
				//	throw new Exception("Semantic ERROR: Must have a <Boolean> inside <"+parser.semantico.getStereotype().toUpperCase()+"> and got <"+((Node)logexp).getType()+"> at line: "+logexpleft);
				RESULT = logexp; 
			
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // returnType ::= VOID 
            {
              Object RESULT = null;
		int void1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int void1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object void1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				RESULT = new Node("void","void"); 
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*returnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // returnType ::= typeSpecifier 
            {
              Object RESULT = null;
		int typeSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int typeSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object typeSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				RESULT = typeSpec; 
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*returnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // oclExpression ::= expression 
            {
              Object RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
					if( ! ((Node)exp).getType().equals("Boolean") )
						throw new Exception("Semantic ERROR: Must have a <Boolean> inside <"+parser.semantico.getStereotype().toUpperCase()+"> and got <"+((Node)exp).getType()+"> at line: "+expleft);
					RESULT = exp; 
				
              CUP$parser$result = new java_cup.runtime.Symbol(12/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // collectionType ::= collectionKind LEFTPARENTHESIS simpleTypeSpecifier RIGHTPARENTHESIS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*collectionType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // typeSpecifier ::= collectionType 
            {
              Object RESULT = null;
		int colTpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int colTpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object colTp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*typeSpecifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // typeSpecifier ::= simpleTypeSpecifier 
            {
              Object RESULT = null;
		int simpTpSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int simpTpSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object simpTpSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
					RESULT = simpTpSpec; 
				
              CUP$parser$result = new java_cup.runtime.Symbol(10/*typeSpecifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // formalParameterListAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(53/*formalParameterListAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // formalParameterListAuxLoop ::= formalParameterListAux formalParameterListAuxLoop 
            {
              Object RESULT = null;
		int formParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object formParam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int formLoopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int formLoopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object formLoop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkFormalParameterListAuxLoop(formParam, formLoop);
							
              CUP$parser$result = new java_cup.runtime.Symbol(53/*formalParameterListAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // formalParameterListAux ::= VIRGULA IDENTIFIER DOUBLEPOINT typeSpecifier 
            {
              Object RESULT = null;
		int idParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idParam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int formTypeSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int formTypeSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object formTypeSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkFormalParameterListAux(idParam, formTypeSpec,formTypeSpecleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(52/*formalParameterListAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formalParameterListAux2 ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*formalParameterListAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formalParameterListAux2 ::= IDENTIFIER DOUBLEPOINT typeSpecifier formalParameterListAuxLoop 
            {
              Object RESULT = null;
		int idParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idParam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int formTypeSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formTypeSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object formTypeSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int formLoopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int formLoopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object formLoop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkFormalParameterListAux2(idParam, formTypeSpec, formLoop,formTypeSpecleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(51/*formalParameterListAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formalParameterList ::= formalParameterListAux2 
            {
              Object RESULT = null;
		int formLoopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int formLoopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object formLoop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = formLoop;
						
              CUP$parser$result = new java_cup.runtime.Symbol(9/*formalParameterList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operationName ::= IDENTIFIER 
            {
              Object RESULT = null;
		int idOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object idOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ((String) idOp); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ifExpression ::= IF expression THEN expression ELSE expression ENDIF 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(((Node) e1).getType().equalsIgnoreCase("Boolean")){
                                       if(((Node) e2).getType().equalsIgnoreCase(((Node)e3).getType())) {
                                                   RESULT = new Node("if", ((Node) e2).getType(), "(" + ((Node)e2).getCode() + ") if (" + ((Node)e1).getCode() + ") else (" + ((Node)e3).getCode() + ")" );
                                               } else {
                                                   throw new Exception("Semantic Error: If expression is returning different type values.");
                                               }
                                       } else {
                                               throw new Exception("Semantic Error: No Boolean Expression on if parameter");
                                       } 
              CUP$parser$result = new java_cup.runtime.Symbol(79/*ifExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operationContextAux ::= 
            {
              Object RESULT = null;
		 
				RESULT = new Node("void","void"); 
			
              CUP$parser$result = new java_cup.runtime.Symbol(50/*operationContextAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operationContextAux ::= DOUBLEPOINT returnType 
            {
              Object RESULT = null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ret; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*operationContextAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operationContext ::= IDENTIFIER DDOUBLEPOINT operationName LEFTPARENTHESIS formalParameterList RIGHTPARENTHESIS operationContextAux 
            {
              Object RESULT = null;
		int idContleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idContright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object idCont = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int opNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object opName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object retorno = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						parser.semantico.setContextClass( ((String) idCont), idContleft );
						parser.semantico.setContextFunction( ((String) opName), ((Node) params) ,((Node) retorno), opNameleft ); 
					
              CUP$parser$result = new java_cup.runtime.Symbol(7/*operationContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contextDeclarationAux ::= operationContext 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(48/*contextDeclarationAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contextDeclaration ::= CONTEXT contextDeclarationAux 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*contextDeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constraintAux3 ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(45/*constraintAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constraintAux3 ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(45/*constraintAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constraintAux2Loop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*constraintAux2Loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constraintAux2Loop ::= constraintAux2 constraintAux2Loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*constraintAux2Loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constraintAux2LoopWithOne ::= constraintAux2 constraintAux2Loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*constraintAux2LoopWithOne*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constraintAux ::= POST 
            {
              Object RESULT = null;
		 parser.semantico.setStereotype("post"); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*constraintAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constraintAux ::= PRE 
            {
              Object RESULT = null;
		 parser.semantico.setStereotype("pre"); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*constraintAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constraintAux2 ::= constraintAux constraintAux3 DOUBLEPOINT oclExpression 
            {
              Object RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 //System.out.println(((Node)exp).getCode());
																				 parser.semantico.loadCondictions(((Node)exp).getCode()); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*constraintAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constraint ::= contextDeclaration constraintAux2LoopWithOne 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*constraint*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // oclExpressionsAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*oclExpressionsAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // oclExpressionsAux ::= constraint oclExpressionsAux 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*oclExpressionsAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // oclExpressions ::= oclExpressionsAux 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*oclExpressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // packageName ::= pathName 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*packageName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // oclFileAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*oclFileAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // oclFileAuxLoop ::= oclFileAux oclFileAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*oclFileAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // oclFileAuxLoopWithOne ::= oclFileAux oclFileAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*oclFileAuxLoopWithOne*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // oclFileAux ::= PACKAGE packageName oclExpressions ENDPACKAGE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*oclFileAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // oclFile ::= oclExpressions 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*oclFile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= oclFile EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // oclFile ::= oclFileAuxLoopWithOne 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*oclFile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

