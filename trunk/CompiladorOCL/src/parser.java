
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri May 06 09:27:38 BRT 2011
//----------------------------------------------------

import java_cup.runtime.*;
import Semantica.AnalisadorSemantico;
import Semantica.Node;
import Semantica.DeclaratorNode;

/** CUP v0.10k generated parser.
  * @version Fri May 06 09:27:38 BRT 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\003\003\000\002\002\004\000\002\003" +
    "\003\000\002\052\006\000\002\053\004\000\002\054\004" +
    "\000\002\054\002\000\002\004\003\000\002\005\003\000" +
    "\002\055\004\000\002\055\002\000\002\006\004\000\002" +
    "\057\006\000\002\056\003\000\002\056\003\000\002\061" +
    "\004\000\002\062\004\000\002\062\002\000\002\060\003" +
    "\000\002\060\002\000\002\007\004\000\002\063\003\000" +
    "\002\011\012\000\002\065\004\000\002\065\002\000\002" +
    "\125\011\000\002\012\003\000\002\013\003\000\002\066" +
    "\006\000\002\066\002\000\002\067\006\000\002\070\004" +
    "\000\002\070\002\000\002\014\003\000\002\014\003\000" +
    "\002\015\006\000\002\016\003\000\002\017\003\000\002" +
    "\017\003\000\002\020\003\000\002\021\004\000\002\071" +
    "\004\000\002\072\004\000\002\072\002\000\002\022\004" +
    "\000\002\073\004\000\002\073\002\000\002\023\004\000" +
    "\002\074\004\000\002\075\004\000\002\075\002\000\002" +
    "\024\004\000\002\076\004\000\002\077\004\000\002\077" +
    "\002\000\002\026\003\000\002\026\003\000\002\100\004" +
    "\000\002\027\004\000\002\101\003\000\002\101\003\000" +
    "\002\102\004\000\002\103\004\000\002\103\002\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\005\000\002\030\003\000\002\030\004\000\002\030\003" +
    "\000\002\032\006\000\002\032\005\000\002\104\003\000" +
    "\002\105\003\000\002\105\002\000\002\124\003\000\002" +
    "\124\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\126\003\000\002\126\003\000\002\035\006\000" +
    "\002\106\004\000\002\110\004\000\002\110\002\000\002" +
    "\107\004\000\002\107\002\000\002\036\004\000\002\111" +
    "\005\000\002\111\002\000\002\031\006\000\002\112\003" +
    "\000\002\112\002\000\002\113\003\000\002\113\002\000" +
    "\002\114\003\000\002\114\002\000\002\025\005\000\002" +
    "\037\006\000\002\115\004\000\002\116\004\000\002\116" +
    "\002\000\002\117\004\000\002\117\002\000\002\040\004" +
    "\000\002\120\004\000\002\121\004\000\002\121\002\000" +
    "\002\041\003\000\002\042\004\000\002\122\004\000\002" +
    "\123\004\000\002\123\002\000\002\043\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\047\003\000\002\047" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\051\003\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\010\002\ufff7\011\012\027\006\001\002\000" +
    "\004\002\001\001\002\000\010\002\ufff7\011\012\016\ufff7" +
    "\001\002\000\004\046\047\001\002\000\004\002\uffff\001" +
    "\002\000\006\002\ufff9\016\ufff9\001\002\000\006\030\076" +
    "\031\074\001\002\000\004\046\022\001\002\000\006\002" +
    "\ufffb\027\006\001\002\000\004\002\015\001\002\000\004" +
    "\002\000\001\002\000\006\002\ufffb\027\006\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffc\001\002\000\006" +
    "\030\uffed\031\uffed\001\002\000\004\041\024\001\002\000" +
    "\006\030\uffec\031\uffec\001\002\000\004\046\026\001\002" +
    "\000\004\065\027\001\002\000\004\065\uffe7\001\002\000" +
    "\006\046\030\066\uffe4\001\002\000\004\037\061\001\002" +
    "\000\004\066\uffe6\001\002\000\004\066\033\001\002\000" +
    "\004\037\034\001\002\000\014\005\037\045\046\046\047" +
    "\074\035\075\040\001\002\000\014\030\uffac\031\uffac\042" +
    "\uffac\044\uffac\066\uffac\001\002\000\014\030\uffae\031\uffae" +
    "\042\uffae\044\uffae\066\uffae\001\002\000\006\030\uffdb\031" +
    "\uffdb\001\002\000\014\030\uffad\031\uffad\042\uffad\044\uffad" +
    "\066\uffad\001\002\000\014\030\uffaf\031\uffaf\042\uffaf\044" +
    "\uffaf\066\uffaf\001\002\000\004\065\056\001\002\000\006" +
    "\030\uffdc\031\uffdc\001\002\000\012\030\uffe0\031\uffe0\042" +
    "\uffe0\066\uffe0\001\002\000\006\030\uffeb\031\uffeb\001\002" +
    "\000\006\065\uff8b\071\uff8b\001\002\000\106\002\uff91\007" +
    "\uff91\011\uff91\014\uff91\015\uff91\016\uff91\020\uff91\026\uff91" +
    "\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\041\053\042" +
    "\uff91\043\uff91\044\uff91\051\uff91\052\uff91\053\uff91\054\uff91" +
    "\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063" +
    "\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\072\uff91" +
    "\001\002\000\012\030\uffdf\031\uffdf\042\uffdf\066\uffdf\001" +
    "\002\000\106\002\uff91\007\uff91\011\uff91\014\uff91\015\uff91" +
    "\016\uff91\020\uff91\026\uff91\030\uff91\031\uff91\032\uff91\033" +
    "\uff91\034\uff91\041\053\042\uff91\043\uff91\044\uff91\051\uff91" +
    "\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91\060" +
    "\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91" +
    "\067\uff91\070\uff91\072\uff91\001\002\000\104\002\uff94\007" +
    "\uff94\011\uff94\014\uff94\015\uff94\016\uff94\020\uff94\026\uff94" +
    "\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\042\uff94\043" +
    "\uff94\044\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064" +
    "\uff94\065\uff94\066\uff94\067\uff94\070\uff94\072\uff94\001\002" +
    "\000\004\046\054\001\002\000\106\002\uff93\007\uff93\011" +
    "\uff93\014\uff93\015\uff93\016\uff93\020\uff93\026\uff93\030\uff93" +
    "\031\uff93\032\uff93\033\uff93\034\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93" +
    "\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064" +
    "\uff93\065\uff93\066\uff93\067\uff93\070\uff93\072\uff93\001\002" +
    "\000\104\002\uff92\007\uff92\011\uff92\014\uff92\015\uff92\016" +
    "\uff92\020\uff92\026\uff92\030\uff92\031\uff92\032\uff92\033\uff92" +
    "\034\uff92\042\uff92\043\uff92\044\uff92\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92" +
    "\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070" +
    "\uff92\072\uff92\001\002\000\010\046\047\074\035\075\040" +
    "\001\002\000\004\066\060\001\002\000\012\030\uffde\031" +
    "\uffde\042\uffde\066\uffde\001\002\000\012\045\046\046\047" +
    "\074\035\075\040\001\002\000\006\042\065\066\uffe1\001" +
    "\002\000\006\042\065\066\uffe1\001\002\000\004\066\uffe5" +
    "\001\002\000\004\046\066\001\002\000\004\037\067\001" +
    "\002\000\012\045\046\046\047\074\035\075\040\001\002" +
    "\000\006\042\uffe3\066\uffe3\001\002\000\004\066\uffe2\001" +
    "\002\000\014\002\ufff0\011\ufff0\016\ufff0\030\076\031\074" +
    "\001\002\000\006\037\uffee\046\100\001\002\000\006\037" +
    "\ufff4\046\ufff4\001\002\000\010\002\ufff6\011\ufff6\016\ufff6" +
    "\001\002\000\006\037\ufff3\046\ufff3\001\002\000\004\037" +
    "\101\001\002\000\004\037\uffef\001\002\000\034\004\135" +
    "\006\137\017\112\025\105\035\110\036\126\045\046\046" +
    "\047\047\130\050\133\053\125\065\120\073\117\001\002" +
    "\000\074\002\uffb2\007\uffb2\011\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\020\uffb2\026\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2" +
    "\042\uffb2\043\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\066\uffb2\070\uffb2\072\uffb2\001\002\000\072\002" +
    "\uffc9\007\uffc9\011\uffc9\014\uffc9\015\uffc9\016\uffc9\020\uffc9" +
    "\026\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\042\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\066\uffc9\070" +
    "\uffc9\072\uffc9\001\002\000\074\002\uffc2\007\uffc2\011\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\020\uffc2\026\uffc2\030\uffc2\031" +
    "\uffc2\033\uffc2\034\uffc2\042\uffc2\043\276\051\274\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\066\uffc2\070\uffc2\072\uffc2" +
    "\001\002\000\030\004\uff7d\006\uff7d\017\uff7d\035\uff7d\036" +
    "\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\065\uff7d\073\uff7d" +
    "\001\002\000\034\002\uffda\011\uffda\014\uffda\015\uffda\016" +
    "\uffda\030\uffda\031\uffda\033\uffda\042\uffda\051\uffda\066\uffda" +
    "\070\uffda\072\uffda\001\002\000\004\071\256\001\002\000" +
    "\074\002\uffb5\007\uffb5\011\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\020\uffb5\026\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5\042" +
    "\uffb5\043\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\066\uffb5\070\uffb5\072\uffb5\001\002\000\060\002\uffd3" +
    "\007\uffd3\011\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\026" +
    "\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\042\uffd3\051\uffd3" +
    "\052\245\057\247\060\252\061\250\062\246\063\253\066" +
    "\uffd3\070\uffd3\072\uffd3\001\002\000\034\004\135\006\137" +
    "\017\112\025\105\035\110\036\126\045\046\046\047\047" +
    "\130\050\133\053\125\065\120\073\117\001\002\000\072" +
    "\002\uffcb\007\uffcb\011\uffcb\014\uffcb\015\uffcb\016\uffcb\020" +
    "\uffcb\026\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\042\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\054\234\055\233\056\227\057" +
    "\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\066\uffcb" +
    "\070\uffcb\072\uffcb\001\002\000\074\002\uffbf\007\uffbf\011" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\026\uffbf\030\uffbf" +
    "\031\uffbf\033\uffbf\034\uffbf\042\uffbf\043\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\066\uffbf\070\uffbf\072" +
    "\uffbf\001\002\000\066\002\uffcf\007\uffcf\011\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\020\uffcf\026\uffcf\030\uffcf\031\uffcf\033" +
    "\uffcf\034\uffcf\042\uffcf\051\uffcf\052\uffcf\053\223\056\220" +
    "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\222\066" +
    "\uffcf\070\uffcf\072\uffcf\001\002\000\044\002\uffd6\007\211" +
    "\011\uffd6\014\uffd6\015\uffd6\016\uffd6\020\207\026\214\030" +
    "\uffd6\031\uffd6\033\uffd6\034\213\042\uffd6\051\uffd6\066\uffd6" +
    "\070\uffd6\072\uffd6\001\002\000\074\002\uffb3\007\uffb3\011" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\020\uffb3\026\uffb3\030\uffb3" +
    "\031\uffb3\033\uffb3\034\uffb3\042\uffb3\043\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\062\uffb3\063\uffb3\064\uffb3\066\uffb3\070\uffb3\072" +
    "\uffb3\001\002\000\034\004\135\006\137\017\112\025\105" +
    "\035\110\036\126\045\046\046\047\047\130\050\133\053" +
    "\125\065\120\073\117\001\002\000\072\002\uffca\007\uffca" +
    "\011\uffca\014\uffca\015\uffca\016\uffca\020\uffca\026\uffca\030" +
    "\uffca\031\uffca\033\uffca\034\uffca\042\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061" +
    "\uffca\062\uffca\063\uffca\064\uffca\066\uffca\070\uffca\072\uffca" +
    "\001\002\000\014\002\uffdd\011\uffdd\016\uffdd\030\uffdd\031" +
    "\uffdd\001\002\000\030\004\135\006\137\017\112\035\110" +
    "\036\126\045\046\046\047\047\130\050\133\065\120\073" +
    "\117\001\002\000\074\002\uffbb\007\uffbb\011\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\020\uffbb\026\uffbb\030\uffbb\031\uffbb\033" +
    "\uffbb\034\uffbb\042\uffbb\043\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\066\uffbb\070\uffbb\072\uffbb\001\002" +
    "\000\030\004\uff7e\006\uff7e\017\uff7e\035\uff7e\036\uff7e\045" +
    "\uff7e\046\uff7e\047\uff7e\050\uff7e\065\uff7e\073\uff7e\001\002" +
    "\000\074\002\uffb4\007\uffb4\011\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\020\uffb4\026\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4" +
    "\042\uffb4\043\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\064\uffb4\066\uffb4\070\uffb4\072\uffb4\001\002\000\074\002" +
    "\uffc0\007\uffc0\011\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0" +
    "\026\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0\042\uffc0\043" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\066" +
    "\uffc0\070\uffc0\072\uffc0\001\002\000\074\002\uff78\007\uff78" +
    "\011\uff78\014\uff78\015\uff78\016\uff78\020\uff78\026\uff78\030" +
    "\uff78\031\uff78\033\uff78\034\uff78\042\uff78\043\uff78\051\uff78" +
    "\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78\060" +
    "\uff78\061\uff78\062\uff78\063\uff78\064\uff78\066\uff78\070\uff78" +
    "\072\uff78\001\002\000\102\002\uffa0\007\uffa0\011\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\020\uffa0\026\uffa0\030\uffa0\031\uffa0" +
    "\032\140\033\uffa0\034\uffa0\042\uffa0\043\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067" +
    "\uffa0\070\uffa0\072\uffa0\001\002\000\074\002\uffc1\007\uffc1" +
    "\011\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\026\uffc1\030" +
    "\uffc1\031\uffc1\033\uffc1\034\uffc1\042\uffc1\043\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\066\uffc1\070\uffc1" +
    "\072\uffc1\001\002\000\074\002\uff77\007\uff77\011\uff77\014" +
    "\uff77\015\uff77\016\uff77\020\uff77\026\uff77\030\uff77\031\uff77" +
    "\033\uff77\034\uff77\042\uff77\043\uff77\051\uff77\052\uff77\053" +
    "\uff77\054\uff77\055\uff77\056\uff77\057\uff77\060\uff77\061\uff77" +
    "\062\uff77\063\uff77\064\uff77\066\uff77\070\uff77\072\uff77\001" +
    "\002\000\074\002\uffb1\007\uffb1\011\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\020\uffb1\026\uffb1\030\uffb1\031\uffb1\033\uffb1\034" +
    "\uffb1\042\uffb1\043\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\064\uffb1\066\uffb1\070\uffb1\072\uffb1\001\002\000\076" +
    "\002\uffbd\007\uffbd\011\uffbd\014\uffbd\015\uffbd\016\uffbd\020" +
    "\uffbd\026\uffbd\030\uffbd\031\uffbd\032\140\033\uffbd\034\uffbd" +
    "\042\uffbd\043\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\066\uffbd\070\uffbd\072\uffbd\001\002\000\014\002" +
    "\ufff5\011\ufff5\016\ufff5\030\ufff5\031\ufff5\001\002\000\074" +
    "\002\uffb0\007\uffb0\011\uffb0\014\uffb0\015\uffb0\016\uffb0\020" +
    "\uffb0\026\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\042\uffb0" +
    "\043\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056" +
    "\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\066\uffb0\070\uffb0\072\uffb0\001\002\000\100\002\uff90\007" +
    "\uff90\011\uff90\014\uff90\015\uff90\016\uff90\020\uff90\026\uff90" +
    "\030\uff90\031\uff90\033\uff90\034\uff90\042\uff90\043\uff90\051" +
    "\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90" +
    "\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066" +
    "\uff90\067\uff90\070\uff90\072\uff90\001\002\000\074\002\uffbc" +
    "\007\uffbc\011\uffbc\014\uffbc\015\uffbc\016\uffbc\020\uffbc\026" +
    "\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\042\uffbc\043\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\066\uffbc" +
    "\070\uffbc\072\uffbc\001\002\000\100\002\uffa1\007\uffa1\011" +
    "\uffa1\014\uffa1\015\uffa1\016\uffa1\020\uffa1\026\uffa1\030\uffa1" +
    "\031\uffa1\033\uffa1\034\uffa1\042\uffa1\043\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067" +
    "\uffa1\070\uffa1\072\uffa1\001\002\000\100\002\uff9e\007\uff9e" +
    "\011\uff9e\014\uff9e\015\uff9e\016\uff9e\020\uff9e\026\uff9e\030" +
    "\uff9e\031\uff9e\033\uff9e\034\uff9e\042\uff9e\043\uff9e\051\uff9e" +
    "\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060" +
    "\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e" +
    "\067\145\070\uff9e\072\uff9e\001\002\000\076\002\uff9f\007" +
    "\uff9f\011\uff9f\014\uff9f\015\uff9f\016\uff9f\020\uff9f\026\uff9f" +
    "\030\uff9f\031\uff9f\033\uff9f\034\uff9f\042\uff9f\043\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066" +
    "\uff9f\070\uff9f\072\uff9f\001\002\000\034\004\135\006\137" +
    "\017\112\025\105\035\110\036\126\045\046\046\047\047" +
    "\130\050\133\053\125\065\120\073\117\001\002\000\076" +
    "\002\uff9c\007\uff9c\011\uff9c\014\uff9c\015\uff9c\016\uff9c\020" +
    "\uff9c\026\uff9c\030\uff9c\031\uff9c\033\uff9c\034\uff9c\042\uff9c" +
    "\043\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c" +
    "\065\150\066\uff9c\070\uff9c\072\uff9c\001\002\000\074\002" +
    "\uff9d\007\uff9d\011\uff9d\014\uff9d\015\uff9d\016\uff9d\020\uff9d" +
    "\026\uff9d\030\uff9d\031\uff9d\033\uff9d\034\uff9d\042\uff9d\043" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\066" +
    "\uff9d\070\uff9d\072\uff9d\001\002\000\036\004\135\006\137" +
    "\017\112\025\105\035\110\036\126\045\046\046\154\047" +
    "\130\050\133\053\125\065\120\066\uffb6\073\117\001\002" +
    "\000\074\002\uffa2\007\uffa2\011\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\020\uffa2\026\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2" +
    "\042\uffa2\043\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2" +
    "\064\uffa2\066\uffa2\070\uffa2\072\uffa2\001\002\000\004\066" +
    "\uffb7\001\002\000\036\004\135\006\137\017\112\025\105" +
    "\035\110\036\126\045\046\046\047\047\130\050\133\053" +
    "\125\065\120\066\uffb6\073\117\001\002\000\064\007\uff91" +
    "\020\uff91\026\uff91\032\uff91\034\uff91\037\uff97\041\053\042" +
    "\170\043\uff91\044\uff97\051\uff91\052\uff91\053\uff91\054\uff91" +
    "\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063" +
    "\uff91\064\uff91\065\uff91\066\uff91\067\uff91\001\002\000\010" +
    "\042\163\066\uff8c\070\uff8c\001\002\000\036\004\uffb8\006" +
    "\uffb8\017\uffb8\025\uffb8\035\uffb8\036\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\053\uffb8\065\uffb8\066\uffb8\073\uffb8\001" +
    "\002\000\004\066\160\001\002\000\074\002\uffb9\007\uffb9" +
    "\011\uffb9\014\uffb9\015\uffb9\016\uffb9\020\uffb9\026\uffb9\030" +
    "\uffb9\031\uffb9\033\uffb9\034\uffb9\042\uffb9\043\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\066\uffb9\070\uffb9" +
    "\072\uffb9\001\002\000\010\042\163\066\uff8c\070\uff8c\001" +
    "\002\000\006\066\uff8f\070\uff8f\001\002\000\034\004\135" +
    "\006\137\017\112\025\105\035\110\036\126\045\046\046" +
    "\047\047\130\050\133\053\125\065\120\073\117\001\002" +
    "\000\010\042\uff8e\066\uff8e\070\uff8e\001\002\000\006\066" +
    "\uff8d\070\uff8d\001\002\000\006\037\174\044\uff95\001\002" +
    "\000\010\037\uff97\042\170\044\uff97\001\002\000\004\046" +
    "\171\001\002\000\010\037\uff99\042\uff99\044\uff99\001\002" +
    "\000\006\037\uff98\044\uff98\001\002\000\004\044\176\001" +
    "\002\000\010\046\047\074\035\075\040\001\002\000\004" +
    "\044\uff96\001\002\000\036\004\uff9a\006\uff9a\017\uff9a\025" +
    "\uff9a\035\uff9a\036\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a" +
    "\053\uff9a\065\uff9a\066\uff9a\073\uff9a\001\002\000\004\066" +
    "\200\001\002\000\074\002\uffba\007\uffba\011\uffba\014\uffba" +
    "\015\uffba\016\uffba\020\uffba\026\uffba\030\uffba\031\uffba\033" +
    "\uffba\034\uffba\042\uffba\043\uffba\051\uffba\052\uffba\053\uffba" +
    "\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062" +
    "\uffba\063\uffba\064\uffba\066\uffba\070\uffba\072\uffba\001\002" +
    "\000\004\070\202\001\002\000\076\002\uff9b\007\uff9b\011" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\020\uff9b\026\uff9b\030\uff9b" +
    "\031\uff9b\033\uff9b\034\uff9b\042\uff9b\043\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\070" +
    "\uff9b\072\uff9b\001\002\000\072\002\uffc8\007\uffc8\011\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\020\uffc8\026\uffc8\030\uffc8\031" +
    "\uffc8\033\uffc8\034\uffc8\042\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062" +
    "\uffc8\063\uffc8\064\uffc8\066\uffc8\070\uffc8\072\uffc8\001\002" +
    "\000\004\066\205\001\002\000\074\002\uffbe\007\uffbe\011" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\020\uffbe\026\uffbe\030\uffbe" +
    "\031\uffbe\033\uffbe\034\uffbe\042\uffbe\043\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\064\uffbe\066\uffbe\070\uffbe\072" +
    "\uffbe\001\002\000\034\004\135\006\137\017\112\025\105" +
    "\035\110\036\126\045\046\046\047\047\130\050\133\053" +
    "\125\065\120\073\117\001\002\000\034\004\uff79\006\uff79" +
    "\017\uff79\025\uff79\035\uff79\036\uff79\045\uff79\046\uff79\047" +
    "\uff79\050\uff79\053\uff79\065\uff79\073\uff79\001\002\000\034" +
    "\002\uffd9\011\uffd9\014\uffd9\015\uffd9\016\uffd9\030\uffd9\031" +
    "\uffd9\033\uffd9\042\uffd9\051\uffd9\066\uffd9\070\uffd9\072\uffd9" +
    "\001\002\000\034\004\uff7c\006\uff7c\017\uff7c\025\uff7c\035" +
    "\uff7c\036\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\053\uff7c" +
    "\065\uff7c\073\uff7c\001\002\000\044\002\uffd6\007\211\011" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\020\207\026\214\030\uffd6" +
    "\031\uffd6\033\uffd6\034\213\042\uffd6\051\uffd6\066\uffd6\070" +
    "\uffd6\072\uffd6\001\002\000\034\004\uff7a\006\uff7a\017\uff7a" +
    "\025\uff7a\035\uff7a\036\uff7a\045\uff7a\046\uff7a\047\uff7a\050" +
    "\uff7a\053\uff7a\065\uff7a\073\uff7a\001\002\000\034\004\uff7b" +
    "\006\uff7b\017\uff7b\025\uff7b\035\uff7b\036\uff7b\045\uff7b\046" +
    "\uff7b\047\uff7b\050\uff7b\053\uff7b\065\uff7b\073\uff7b\001\002" +
    "\000\034\002\uffd7\011\uffd7\014\uffd7\015\uffd7\016\uffd7\030" +
    "\uffd7\031\uffd7\033\uffd7\042\uffd7\051\uffd7\066\uffd7\070\uffd7" +
    "\072\uffd7\001\002\000\044\002\uffd8\007\uffd8\011\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\020\uffd8\026\uffd8\030\uffd8\031\uffd8" +
    "\033\uffd8\034\uffd8\042\uffd8\051\uffd8\066\uffd8\070\uffd8\072" +
    "\uffd8\001\002\000\060\002\uffd2\007\uffd2\011\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\020\uffd2\026\uffd2\030\uffd2\031\uffd2\033" +
    "\uffd2\034\uffd2\042\uffd2\051\uffd2\052\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\066\uffd2\070\uffd2\072\uffd2\001" +
    "\002\000\034\004\uff82\006\uff82\017\uff82\025\uff82\035\uff82" +
    "\036\uff82\045\uff82\046\uff82\047\uff82\050\uff82\053\uff82\065" +
    "\uff82\073\uff82\001\002\000\066\002\uffcf\007\uffcf\011\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\020\uffcf\026\uffcf\030\uffcf\031" +
    "\uffcf\033\uffcf\034\uffcf\042\uffcf\051\uffcf\052\uffcf\053\223" +
    "\056\220\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064" +
    "\222\066\uffcf\070\uffcf\072\uffcf\001\002\000\034\004\uff84" +
    "\006\uff84\017\uff84\025\uff84\035\uff84\036\uff84\045\uff84\046" +
    "\uff84\047\uff84\050\uff84\053\uff84\065\uff84\073\uff84\001\002" +
    "\000\034\004\uff83\006\uff83\017\uff83\025\uff83\035\uff83\036" +
    "\uff83\045\uff83\046\uff83\047\uff83\050\uff83\053\uff83\065\uff83" +
    "\073\uff83\001\002\000\034\004\135\006\137\017\112\025" +
    "\105\035\110\036\126\045\046\046\047\047\130\050\133" +
    "\053\125\065\120\073\117\001\002\000\066\002\uffd1\007" +
    "\uffd1\011\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\026\uffd1" +
    "\030\uffd1\031\uffd1\033\uffd1\034\uffd1\042\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\064\uffd1\066\uffd1\070\uffd1\072\uffd1\001\002\000" +
    "\060\002\uffd0\007\uffd0\011\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\020\uffd0\026\uffd0\030\uffd0\031\uffd0\033\uffd0\034\uffd0\042" +
    "\uffd0\051\uffd0\052\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\066\uffd0\070\uffd0\072\uffd0\001\002\000\034\004" +
    "\uff7f\006\uff7f\017\uff7f\025\uff7f\035\uff7f\036\uff7f\045\uff7f" +
    "\046\uff7f\047\uff7f\050\uff7f\053\uff7f\065\uff7f\073\uff7f\001" +
    "\002\000\066\002\uffce\007\uffce\011\uffce\014\uffce\015\uffce" +
    "\016\uffce\020\uffce\026\uffce\030\uffce\031\uffce\033\uffce\034" +
    "\uffce\042\uffce\051\uffce\052\uffce\053\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\066\uffce\070" +
    "\uffce\072\uffce\001\002\000\072\002\uffcb\007\uffcb\011\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\020\uffcb\026\uffcb\030\uffcb\031" +
    "\uffcb\033\uffcb\034\uffcb\042\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\054\234\055\233\056\227\057\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\066\uffcb\070\uffcb\072\uffcb\001\002" +
    "\000\034\004\135\006\137\017\112\025\105\035\110\036" +
    "\126\045\046\046\047\047\130\050\133\053\125\065\120" +
    "\073\117\001\002\000\034\004\uff80\006\uff80\017\uff80\025" +
    "\uff80\035\uff80\036\uff80\045\uff80\046\uff80\047\uff80\050\uff80" +
    "\053\uff80\065\uff80\073\uff80\001\002\000\034\004\uff81\006" +
    "\uff81\017\uff81\025\uff81\035\uff81\036\uff81\045\uff81\046\uff81" +
    "\047\uff81\050\uff81\053\uff81\065\uff81\073\uff81\001\002\000" +
    "\072\002\uffcd\007\uffcd\011\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\020\uffcd\026\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd\042" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\066" +
    "\uffcd\070\uffcd\072\uffcd\001\002\000\066\002\uffcc\007\uffcc" +
    "\011\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\026\uffcc\030" +
    "\uffcc\031\uffcc\033\uffcc\034\uffcc\042\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\066\uffcc\070\uffcc\072\uffcc\001\002\000\004" +
    "\033\240\001\002\000\034\004\135\006\137\017\112\025" +
    "\105\035\110\036\126\045\046\046\047\047\130\050\133" +
    "\053\125\065\120\073\117\001\002\000\004\014\242\001" +
    "\002\000\034\004\135\006\137\017\112\025\105\035\110" +
    "\036\126\045\046\046\047\047\130\050\133\053\125\065" +
    "\120\073\117\001\002\000\004\015\244\001\002\000\074" +
    "\002\uffe8\007\uffe8\011\uffe8\014\uffe8\015\uffe8\016\uffe8\020" +
    "\uffe8\026\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8\042\uffe8" +
    "\043\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\066\uffe8\070\uffe8\072\uffe8\001\002\000\034\004\uff8a\006" +
    "\uff8a\017\uff8a\025\uff8a\035\uff8a\036\uff8a\045\uff8a\046\uff8a" +
    "\047\uff8a\050\uff8a\053\uff8a\065\uff8a\073\uff8a\001\002\000" +
    "\034\004\uff86\006\uff86\017\uff86\025\uff86\035\uff86\036\uff86" +
    "\045\uff86\046\uff86\047\uff86\050\uff86\053\uff86\065\uff86\073" +
    "\uff86\001\002\000\034\004\uff88\006\uff88\017\uff88\025\uff88" +
    "\035\uff88\036\uff88\045\uff88\046\uff88\047\uff88\050\uff88\053" +
    "\uff88\065\uff88\073\uff88\001\002\000\034\004\uff85\006\uff85" +
    "\017\uff85\025\uff85\035\uff85\036\uff85\045\uff85\046\uff85\047" +
    "\uff85\050\uff85\053\uff85\065\uff85\073\uff85\001\002\000\044" +
    "\002\uffd5\007\uffd5\011\uffd5\014\uffd5\015\uffd5\016\uffd5\020" +
    "\uffd5\026\uffd5\030\uffd5\031\uffd5\033\uffd5\034\uffd5\042\uffd5" +
    "\051\uffd5\066\uffd5\070\uffd5\072\uffd5\001\002\000\034\004" +
    "\uff89\006\uff89\017\uff89\025\uff89\035\uff89\036\uff89\045\uff89" +
    "\046\uff89\047\uff89\050\uff89\053\uff89\065\uff89\073\uff89\001" +
    "\002\000\034\004\uff87\006\uff87\017\uff87\025\uff87\035\uff87" +
    "\036\uff87\045\uff87\046\uff87\047\uff87\050\uff87\053\uff87\065" +
    "\uff87\073\uff87\001\002\000\034\004\135\006\137\017\112" +
    "\025\105\035\110\036\126\045\046\046\047\047\130\050" +
    "\133\053\125\065\120\073\117\001\002\000\044\002\uffd4" +
    "\007\uffd4\011\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\026" +
    "\uffd4\030\uffd4\031\uffd4\033\uffd4\034\uffd4\042\uffd4\051\uffd4" +
    "\066\uffd4\070\uffd4\072\uffd4\001\002\000\036\004\135\006" +
    "\137\017\112\025\105\035\110\036\126\045\046\046\047" +
    "\047\130\050\133\053\125\065\120\072\uffa6\073\117\001" +
    "\002\000\010\042\uffa3\051\271\072\uffa3\001\002\000\004" +
    "\072\267\001\002\000\006\042\263\072\uffa8\001\002\000" +
    "\004\072\uffa7\001\002\000\034\004\135\006\137\017\112" +
    "\025\105\035\110\036\126\045\046\046\047\047\130\050" +
    "\133\053\125\065\120\073\117\001\002\000\006\042\263" +
    "\072\uffa8\001\002\000\004\072\uffa9\001\002\000\006\042" +
    "\uffaa\072\uffaa\001\002\000\074\002\uffab\007\uffab\011\uffab" +
    "\014\uffab\015\uffab\016\uffab\020\uffab\026\uffab\030\uffab\031" +
    "\uffab\033\uffab\034\uffab\042\uffab\043\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\066\uffab\070\uffab\072\uffab" +
    "\001\002\000\006\042\uffa5\072\uffa5\001\002\000\004\051" +
    "\272\001\002\000\034\004\135\006\137\017\112\025\105" +
    "\035\110\036\126\045\046\046\047\047\130\050\133\053" +
    "\125\065\120\073\117\001\002\000\006\042\uffa4\072\uffa4" +
    "\001\002\000\004\046\uffc6\001\002\000\074\002\uffc2\007" +
    "\uffc2\011\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\026\uffc2" +
    "\030\uffc2\031\uffc2\033\uffc2\034\uffc2\042\uffc2\043\276\051" +
    "\274\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\066\uffc2\070" +
    "\uffc2\072\uffc2\001\002\000\004\046\uffc5\001\002\000\004" +
    "\046\047\001\002\000\072\002\uffc7\007\uffc7\011\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\020\uffc7\026\uffc7\030\uffc7\031\uffc7" +
    "\033\uffc7\034\uffc7\042\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\066\uffc7\070\uffc7\072\uffc7\001\002\000" +
    "\074\002\uffc4\007\uffc4\011\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\020\uffc4\026\uffc4\030\uffc4\031\uffc4\033\uffc4\034\uffc4\042" +
    "\uffc4\043\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\066\uffc4\070\uffc4\072\uffc4\001\002\000\072\002\uffc3" +
    "\007\uffc3\011\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3\026" +
    "\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3\042\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\066\uffc3\070\uffc3" +
    "\072\uffc3\001\002\000\014\002\ufff0\011\ufff0\016\ufff0\030" +
    "\076\031\074\001\002\000\010\002\ufff2\011\ufff2\016\ufff2" +
    "\001\002\000\010\002\ufff1\011\ufff1\016\ufff1\001\002\000" +
    "\006\011\012\016\ufff7\001\002\000\006\011\ufffa\016\ufffa" +
    "\001\002\000\004\016\311\001\002\000\006\002\ufffe\027" +
    "\ufffe\001\002\000\006\002\ufff8\016\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\020\003\013\005\006\006\004\007\010\052" +
    "\012\053\003\055\007\001\001\000\002\001\001\000\010" +
    "\006\004\007\010\055\311\001\001\000\006\004\305\040" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\056\072\057\071\061\074\001\001\000\006\011\022\063" +
    "\020\001\001\000\006\052\015\054\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\052\015\054\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\031" +
    "\066\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\042\015\047" +
    "\017\044\034\043\040\040\043\041\126\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\120\050\121\051\001\001\000\002\001\001\000" +
    "\006\120\050\121\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\056\040\040\126\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\061\015\047\034\043\040\040\043" +
    "\041\126\035\001\001\000\006\067\062\070\063\001\001" +
    "\000\006\067\062\070\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\067\015\047" +
    "\034\043\040\040\043\041\126\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\056\072\057\302\062\303" +
    "\001\001\000\004\060\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\016\135\020\121\021\105\022\115\023" +
    "\110\024\114\026\112\027\102\030\103\031\113\033\126" +
    "\035\131\040\130\043\106\047\122\051\101\100\120\124" +
    "\133\125\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\101\276\102\274\103\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\253\073\250\001\001\000\046\020\236\021" +
    "\105\022\115\023\110\024\114\026\112\027\102\030\103" +
    "\031\113\033\126\035\131\040\130\043\106\047\122\051" +
    "\101\100\120\124\133\125\123\001\001\000\010\046\231" +
    "\076\230\077\227\001\001\000\002\001\001\000\010\045" +
    "\223\074\220\075\216\001\001\000\010\050\205\071\211" +
    "\072\207\001\001\000\002\001\001\000\046\020\203\021" +
    "\105\022\115\023\110\024\114\026\112\027\102\030\103" +
    "\031\113\033\126\035\131\040\130\043\106\047\122\051" +
    "\101\100\120\124\133\125\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\027\202\030\103\031\113\033" +
    "\126\035\131\040\130\043\106\051\101\124\133\125\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\141" +
    "\112\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\143\113\145\001\001\000\002" +
    "\001\001\000\050\020\154\021\105\022\115\023\110\024" +
    "\114\026\112\027\102\030\103\031\113\033\126\035\131" +
    "\040\130\042\200\043\106\047\122\051\101\100\120\124" +
    "\133\125\123\001\001\000\006\032\146\114\150\001\001" +
    "\000\002\001\001\000\056\020\154\021\105\022\115\023" +
    "\110\024\114\026\112\027\102\030\103\031\113\033\126" +
    "\035\131\037\155\040\130\042\151\043\106\047\122\051" +
    "\101\100\120\104\152\105\156\124\133\125\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\020\154\021" +
    "\105\022\115\023\110\024\114\026\112\027\102\030\103" +
    "\031\113\033\126\035\131\040\130\042\151\043\106\047" +
    "\122\051\101\100\120\105\176\124\133\125\123\001\001" +
    "\000\012\115\166\116\165\120\050\121\051\001\001\000" +
    "\006\122\160\123\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\122\160\123\164\001" +
    "\001\000\002\001\001\000\046\020\163\021\105\022\115" +
    "\023\110\024\114\026\112\027\102\030\103\031\113\033" +
    "\126\035\131\040\130\043\106\047\122\051\101\100\120" +
    "\124\133\125\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\117\172\001\001\000\006\115\166\116\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\034\174\040\040\126\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\022\215\023\110\024\114\026\112\027\102\030\103" +
    "\031\113\033\126\035\131\040\130\043\106\047\122\051" +
    "\101\100\120\124\133\125\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\205\071" +
    "\211\072\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\045\223\074\220\075\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\024\224\026" +
    "\112\027\102\030\103\031\113\033\126\035\131\040\130" +
    "\043\106\047\122\051\101\100\120\124\133\125\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\231\076\230\077\235\001" +
    "\001\000\034\026\234\027\102\030\103\031\113\033\126" +
    "\035\131\040\130\043\106\047\122\051\101\100\120\124" +
    "\133\125\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\020\240\021\105\022\115\023\110\024\114\026\112" +
    "\027\102\030\103\031\113\033\126\035\131\040\130\043" +
    "\106\047\122\051\101\100\120\124\133\125\123\001\001" +
    "\000\002\001\001\000\046\020\242\021\105\022\115\023" +
    "\110\024\114\026\112\027\102\030\103\031\113\033\126" +
    "\035\131\040\130\043\106\047\122\051\101\100\120\124" +
    "\133\125\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\023\254\024\114\026\112\027\102\030" +
    "\103\031\113\033\126\035\131\040\130\043\106\047\122" +
    "\051\101\100\120\124\133\125\123\001\001\000\002\001" +
    "\001\000\052\020\256\021\105\022\115\023\110\024\114" +
    "\026\112\027\102\030\103\031\113\033\126\035\131\036" +
    "\260\040\130\043\106\047\122\051\101\100\120\107\257" +
    "\124\133\125\123\001\001\000\004\111\267\001\001\000" +
    "\002\001\001\000\006\106\263\110\261\001\001\000\002" +
    "\001\001\000\050\020\256\021\105\022\115\023\110\024" +
    "\114\026\112\027\102\030\103\031\113\033\126\035\131" +
    "\036\265\040\130\043\106\047\122\051\101\100\120\124" +
    "\133\125\123\001\001\000\006\106\263\110\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\020\272\021\105" +
    "\022\115\023\110\024\114\026\112\027\102\030\103\031" +
    "\113\033\126\035\131\040\130\043\106\047\122\051\101" +
    "\100\120\124\133\125\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\101\276\102\274\103\301\001\001" +
    "\000\002\001\001\000\006\031\300\040\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\056\072\057\302\062\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\307\006\004\007\010\055\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 	
				public AnalisadorSemantico semantico = new AnalisadorSemantico();
				
				public void report_error(String message, Object info){
					Symbol sym = (Symbol) info;
					throw new Error("Syntax ERROR in '"+sym.value+"' at line: "+(sym.left+1));
			  	}
		 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // number ::= FLOAT_LITERAL 
            {
              Object RESULT = null;
		int numbFloatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numbFloatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object numbFloat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(numbFloat, "Float"); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // number ::= INTEGER_LITERAL 
            {
              Object RESULT = null;
		int numbIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numbIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object numbInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(numbInt, "Integer"); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // logicalOperator ::= IMPLIES 
            {
              Object RESULT = null;
		 RESULT = "implies"; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*logicalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // logicalOperator ::= XOR 
            {
              Object RESULT = null;
		 RESULT = "xor"; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*logicalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // logicalOperator ::= OR 
            {
              Object RESULT = null;
		 RESULT = "or"; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*logicalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // logicalOperator ::= AND 
            {
              Object RESULT = null;
		 RESULT = "and"; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*logicalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // unaryOperator ::= NOT 
            {
              Object RESULT = null;
		 RESULT = "not"; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*unaryOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unaryOperator ::= MINUS 
            {
              Object RESULT = null;
		 RESULT = "-"; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*unaryOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // multiplyOperator ::= MOD 
            {
              Object RESULT = null;
		 RESULT = "%"; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*multiplyOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // multiplyOperator ::= DIVIDE 
            {
              Object RESULT = null;
		 RESULT = "/"; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*multiplyOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // multiplyOperator ::= MULTIPLY 
            {
              Object RESULT = null;
		 RESULT = "*"; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*multiplyOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // addOperator ::= MOD 
            {
              Object RESULT = null;
		 RESULT = "%"; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*addOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // addOperator ::= MINUS 
            {
              Object RESULT = null;
		 RESULT = "-"; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*addOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // addOperator ::= PLUS 
            {
              Object RESULT = null;
		 RESULT = "+"; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*addOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // relationalOperator ::= NOTEQ 
            {
              Object RESULT = null;
		 RESULT = "<>"; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // relationalOperator ::= LESSEQTHAN 
            {
              Object RESULT = null;
		 RESULT = "<="; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // relationalOperator ::= GREATEREQTHAN 
            {
              Object RESULT = null;
		 RESULT = ">="; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // relationalOperator ::= LESSTHAN 
            {
              Object RESULT = null;
		 RESULT = "<"; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // relationalOperator ::= GREATERTHAN 
            {
              Object RESULT = null;
		 RESULT = ">"; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // relationalOperator ::= EQ 
            {
              Object RESULT = null;
		 RESULT = "="; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // collectionKind ::= COLLECTION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // actualParameterListAuxLoop ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(81/*actualParameterListAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // actualParameterListAuxLoop ::= actualParameterListAux actualParameterListAuxLoop 
            {
              Object RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object aloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado = new Node();
																							if(aloop == null) {
																								resultado.addElement((Node) a1);
																							}
																							else{
																								resultado.addElement((Node)a1);
																								resultado.addAllElements(((Node) aloop).getElements());}
																							RESULT = resultado; 
              CUP$parser$result = new java_cup.runtime.Symbol(81/*actualParameterListAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // actualParameterListAux ::= VIRGULA expression 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (Node)e1;
              CUP$parser$result = new java_cup.runtime.Symbol(80/*actualParameterListAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // actualParameterList ::= expression actualParameterListAuxLoop 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object aloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado = new Node();
																		if(e1 == null && aloop == null){
																			resultado = null;
																		}else if(aloop == null){
																			resultado.addElement((Node)e1);
																		}else{
																			resultado.addElement((Node)e1);
																			resultado.addAllElements(((Node) aloop).getElements());}
																		RESULT = resultado; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*actualParameterList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // timeExpression ::= ATPRE 
            {
              Object RESULT = null;
		int atPreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atPreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atPre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.semantico.checkStereotype("@pre",atPreleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*timeExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // pathNameAuxLoop ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(79/*pathNameAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // pathNameAuxLoop ::= pathNameAux pathNameAuxLoop 
            {
              Object RESULT = null;
		int pauxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pauxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object paux = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ploopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ploopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ploop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado;
															  resultado = new Node();
																if(ploop == null){
																	resultado.addElement((Node)paux);
																}else{
																	resultado.addElement((Node)paux);
																	resultado.addAllElements(((Node) ploop).getElements());
																}RESULT = resultado; 
              CUP$parser$result = new java_cup.runtime.Symbol(79/*pathNameAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // pathNameAux ::= DDOUBLEPOINT IDENTIFIER 
            {
              Object RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(id1.toString());
              CUP$parser$result = new java_cup.runtime.Symbol(78/*pathNameAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // pathName ::= IDENTIFIER pathNameAuxLoop 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ploopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ploopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ploop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado = new Node();
													Node identifier = new Node(id.toString());
													if(ploop == null){
														resultado.addElement(identifier);
														
													}else{
														resultado.addElement(identifier);
														resultado.addAllElements(((Node) ploop).getElements());
													}
													RESULT = resultado;   
              CUP$parser$result = new java_cup.runtime.Symbol(30/*pathName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaratorAux2 ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(77/*declaratorAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaratorAux2 ::= DOUBLEPOINT simpleTypeSpecifier 
            {
              Object RESULT = null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object sts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(null, sts.toString()); 
              CUP$parser$result = new java_cup.runtime.Symbol(77/*declaratorAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaratorAuxLoop ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(76/*declaratorAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // declaratorAuxLoop ::= declaratorAux declaratorAuxLoop 
            {
              Object RESULT = null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object dal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node n = new Node();
                                                                if(dal == null) {
                                                                    n.addElement((Node)da);
                                                                } else {
                                                                    n.addElement((Node)da);
                                                                    n.addAllElements(((Node)dal).getElements());
                                                                } 
                                                                RESULT = n;
              CUP$parser$result = new java_cup.runtime.Symbol(76/*declaratorAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // declaratorAux ::= VIRGULA IDENTIFIER 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(id.toString(), null); 
              CUP$parser$result = new java_cup.runtime.Symbol(75/*declaratorAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declarator ::= IDENTIFIER declaratorAuxLoop declaratorAux2 PIPELINE 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int da2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int da2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object da2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(da2 == null) {
                                                                                     DeclaratorNode decl = new DeclaratorNode(DeclaratorNode.NON_TYPE_DECLARATOR);
                                                                                     decl.addNode(new Node(id.toString(), null));
                                                                                     RESULT = decl;
                                                                                 } else {
                                                                                     DeclaratorNode decl = new DeclaratorNode(DeclaratorNode.TYPED_DECLARATOR);
                                                                                     decl.setTipoConteudo(((Node)da2).getType());
                                                                                     decl.addNode(new Node(id.toString(), null));
                                                                                     decl.addNodes(((Node)da2).getElements());
                                                                                     RESULT = decl;  
                                                                                 } 
                                                                              
              CUP$parser$result = new java_cup.runtime.Symbol(29/*declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // qualifiers ::= LEFTBRACK actualParameterList RIGHTBRACK 
            {
              Object RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (Node)a1; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*qualifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // propertyCallAux3 ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(74/*propertyCallAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // propertyCallAux3 ::= propertyCallParameters 
            {
              Object RESULT = null;
		int prop1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int prop1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object prop1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = prop1; 
              CUP$parser$result = new java_cup.runtime.Symbol(74/*propertyCallAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // propertyCallAux2 ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(73/*propertyCallAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // propertyCallAux2 ::= qualifiers 
            {
              Object RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object q1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = q1; 
              CUP$parser$result = new java_cup.runtime.Symbol(73/*propertyCallAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // propertyCallAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*propertyCallAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // propertyCallAux ::= timeExpression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*propertyCallAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // propertyCall ::= pathName propertyCallAux propertyCallAux2 propertyCallAux3 
            {
              Object RESULT = null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prop3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int prop3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object prop3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado = new Node();
																						if(prop3 == null){
																							resultado.setRole(Semantica.Node.VARIABLE);
																							resultado.addAllCaminho(((Node)pt).getElements());
																						}else{
																							resultado.setRole(Semantica.Node.FUNCTION);
																							resultado.setValue(((Node)pt).getElements().get(((Node)pt).getElements().size()-1).getValue());
																							//System.out.println("Value :" + resultado.getValue());
																							resultado.addAllElements(((Node) prop3).getElements());
																						}RESULT = resultado;
              CUP$parser$result = new java_cup.runtime.Symbol(23/*propertyCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // collectionItemAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(71/*collectionItemAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // collectionItemAux ::= POINT POINT expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(71/*collectionItemAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // collectionItem ::= expression collectionItemAux 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*collectionItem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literalCollectionAux2 ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(69/*literalCollectionAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literalCollectionAux2 ::= collectionItem literalCollectionAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(69/*literalCollectionAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literalCollectionAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(70/*literalCollectionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literalCollectionAuxLoop ::= literalCollectionAux literalCollectionAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(70/*literalCollectionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literalCollectionAux ::= VIRGULA collectionItem 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(68/*literalCollectionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literalCollection ::= collectionKind LEFTBRACKET literalCollectionAux2 RIGHTBRACKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*literalCollection*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // oclType ::= OCL_PRIMITIVE 
            {
              Object RESULT = null;
		int basic1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int basic1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object basic1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(basic1, ((String) basic1)); 
              CUP$parser$result = new java_cup.runtime.Symbol(84/*oclType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // oclType ::= OCL_SUPER_TYPE 
            {
              Object RESULT = null;
		int super1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int super1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object super1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(super1, ((String) super1) ); 
              CUP$parser$result = new java_cup.runtime.Symbol(84/*oclType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simpleTypeSpecifier ::= oclType 
            {
              Object RESULT = null;
		int oclTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oclTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object oclT = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = oclT; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*simpleTypeSpecifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simpleTypeSpecifier ::= pathName 
            {
              Object RESULT = null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object path = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = path; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*simpleTypeSpecifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= RESULT 
            {
              Object RESULT = null;
		int litResultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litResultright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object litResult = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	parser.semantico.checkStereotype("result",litResultleft); 
					RESULT = new Node("result",parser.semantico.getContextReturn());
				
              CUP$parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= booleanLiteral 
            {
              Object RESULT = null;
		int litBoolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litBoolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object litBool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = litBool; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= number 
            {
              Object RESULT = null;
		int litNumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litNumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object litNum = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = litNum; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= STRING_LITERAL 
            {
              Object RESULT = null;
		int litStringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litStringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object litString = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(litString,"String"); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // booleanLiteral ::= FALSE 
            {
              Object RESULT = null;
		int boolFalseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int boolFalseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object boolFalse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(boolFalse,"Boolean"); 
              CUP$parser$result = new java_cup.runtime.Symbol(82/*booleanLiteral*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // booleanLiteral ::= TRUE 
            {
              Object RESULT = null;
		int boolTrueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int boolTrueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object boolTrue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(boolTrue,"Boolean"); 
              CUP$parser$result = new java_cup.runtime.Symbol(82/*booleanLiteral*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // propertyCallParametersAux2 ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*propertyCallParametersAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // propertyCallParametersAux2 ::= actualParameterList 
            {
              Object RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (Node)a1;
              CUP$parser$result = new java_cup.runtime.Symbol(67/*propertyCallParametersAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // propertyCallParametersAux ::= declarator 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(66/*propertyCallParametersAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // propertyCallParameters ::= LEFTPARENTHESIS propertyCallParametersAux2 RIGHTPARENTHESIS 
            {
              Object RESULT = null;
		int prop2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prop2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prop2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
																								 if(prop2!= null){
																									 //System.out.println("blaca baga :" + ((Node)prop2).listToString());
																									 
																								  	RESULT = (Node)prop2;
																								 }else{
																								 	RESULT = new Node();
																								 }
																								 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*propertyCallParameters*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // propertyCallParameters ::= LEFTPARENTHESIS propertyCallParametersAux propertyCallParametersAux2 RIGHTPARENTHESIS 
            {
              Object RESULT = null;
		int pcpaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pcparight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pcpa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prop1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prop1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prop1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(pcpa != null && prop1 == null) {
                                                                                                                                    throw new Exception("Expected expression after declarator." + pcpaleft);
                                                                                                                                } 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*propertyCallParameters*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // primaryExpression ::= ifExpression 
            {
              Object RESULT = null;
		int ifStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ifStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ifStmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 //System.out.println("tipo na primary " + ((Node)ifStmt).getType()); 
												RESULT = (Node)ifStmt; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // primaryExpression ::= SELF timeExpression 
            {
              Object RESULT = null;
		 RESULT = new Node("self",parser.semantico.getContextClass()); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // primaryExpression ::= SELF 
            {
              Object RESULT = null;
		 RESULT = new Node("self",parser.semantico.getContextClass()); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // primaryExpression ::= LEFTPARENTHESIS expression RIGHTPARENTHESIS 
            {
              Object RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							RESULT = exp;
						
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primaryExpression ::= propertyCall 
            {
              Object RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p1; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // primaryExpression ::= literal 
            {
              Object RESULT = null;
		int lit1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lit1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object lit1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
							RESULT = lit1; 
						
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // primaryExpression ::= literalCollection 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // postfixExpressionAux2Loop ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(65/*postfixExpressionAux2Loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // postfixExpressionAux2Loop ::= postfixExpressionAux2 postfixExpressionAux2Loop 
            {
              Object RESULT = null;
		int paux2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paux2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object paux2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ploopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ploopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ploop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado = new Node();
																							 Node aux = (Node)paux2;
																							 if( aux.getRole() == Semantica.Node.FUNCTION || aux.getRole() == Semantica.Node.FUNCTION_COLLECTION){
																							 	//System.out.println("MACONHA Result: " + ((Node) aux).listToString() );
																							 	resultado.addCaminho(aux);
																							 }else{
																							 	resultado.addAllCaminho(((Node)paux2).getList_caminho());
																							 }
																						 	 if(ploop != null){
																						 	 	resultado.addAllCaminho(((Node)ploop).getList_caminho());
																						 }RESULT  = resultado;
              CUP$parser$result = new java_cup.runtime.Symbol(65/*postfixExpressionAux2Loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // postfixExpressionAux2 ::= postfixExpressionAux propertyCall 
            {
              Object RESULT = null;
		int pauxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pauxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object paux = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 //System.out.println("ROle : " +((Node)pc).getRole() + " Value :"+((Node)pc).getValue()); 
																	  if(((String) paux).equalsIgnoreCase("arrow")){
																	  	parser.semantico.checkCollection( ((String) ((Node)pc).getValue() ), pcleft );
																	  	((Node)pc).setRole(Semantica.Node.FUNCTION_COLLECTION);
																	  	RESULT = ((Node)pc);
																	  }else{
																	  	RESULT = (Node)pc;
																	  } 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*postfixExpressionAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // postfixExpressionAux ::= ARROW 
            {
              Object RESULT = null;
		 RESULT = "arrow"; 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*postfixExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // postfixExpressionAux ::= POINT 
            {
              Object RESULT = null;
		 RESULT = "point"; 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*postfixExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // postfixExpression ::= primaryExpression postfixExpressionAux2Loop 
            {
              Object RESULT = null;
		int primexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int primexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object primexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int postfexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postfexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object postfexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						Node resultado;
						//System.out.println("LOL");
						Node aux = new Node();
						if( ((Node)primexp).getList_caminho().size() < 1 ){
							aux.addCaminho(((Node)primexp));
						}else{
							aux.addAllCaminho(((Node)primexp).getList_caminho());
						}
						if (postfexp != null){
							aux.addAllCaminho(((Node)postfexp).getList_caminho());
						}
						if( postfexp != null || ((Node)primexp).getRole() == Node.VARIABLE ){
						    //System.out.println("Esse bixim aqui: "+ ((Node)aux).getList_caminho().get(((Node)aux).getList_caminho().size()-1)+ " caminho : " + ((Node)aux).caminhoToString());
							//System.out.println("Teste Parametros: " + ((Node)aux).printAllParamethrs() );
							resultado = parser.semantico.checkAllPathFunction(aux.getList_caminho(),primexpleft,null,null);
							RESULT = resultado;
						}else{
							RESULT = primexp;
						}
					
              CUP$parser$result = new java_cup.runtime.Symbol(21/*postfixExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unaryExpressionAux ::= unaryOperator postfixExpression 
            {
              Object RESULT = null;
		int unopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int unopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object unop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int postfexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postfexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object postfexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = postfexp;
						
              CUP$parser$result = new java_cup.runtime.Symbol(62/*unaryExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unaryExpression ::= postfixExpression 
            {
              Object RESULT = null;
		int postfexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postfexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object postfexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = postfexp;
						
              CUP$parser$result = new java_cup.runtime.Symbol(20/*unaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unaryExpression ::= unaryExpressionAux 
            {
              Object RESULT = null;
		int unexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object unexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = unexp;
						
              CUP$parser$result = new java_cup.runtime.Symbol(20/*unaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // multiplicativeExpressionAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*multiplicativeExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // multiplicativeExpressionAuxLoop ::= multiplicativeExpressionAux multiplicativeExpressionAuxLoop 
            {
              Object RESULT = null;
		int addexpaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addexparight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addexpa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object addexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
										RESULT  = parser.semantico.checkMultiplicativeExpressionAuxLoop(addexpaloop, addexpa, addexpaloopleft, addexpaleft);
									
              CUP$parser$result = new java_cup.runtime.Symbol(61/*multiplicativeExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // multiplicativeExpressionAux ::= multiplyOperator unaryExpression 
            {
              Object RESULT = null;
		int multopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object multop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int unexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object unexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
									RESULT  = parser.semantico.checkMultiplicativeExpressionAux(multop, unexp, unexpleft);
								
              CUP$parser$result = new java_cup.runtime.Symbol(60/*multiplicativeExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // multiplicativeExpression ::= unaryExpression multiplicativeExpressionAuxLoop 
            {
              Object RESULT = null;
		int unexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int unexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object unexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int multexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object multexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkMultiplicativeExpression(multexpaloop, unexp, multexpaloopleft, unexpleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(18/*multiplicativeExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additiveExpressionAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(59/*additiveExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // additiveExpressionAuxLoop ::= additiveExpressionAux additiveExpressionAuxLoop 
            {
              Object RESULT = null;
		int addexpaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addexparight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addexpa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object addexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkAdditiveExpressionAuxLoop(addexpa, addexpaloop, addexpaloopleft, addexpaleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(59/*additiveExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // additiveExpressionAux ::= addOperator multiplicativeExpression 
            {
              Object RESULT = null;
		int addopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multexp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int multexp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object multexp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = parser.semantico.checkAdditiveExpressionAux(addop, multexp2, multexp2left);
						
              CUP$parser$result = new java_cup.runtime.Symbol(58/*additiveExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // additiveExpression ::= multiplicativeExpression additiveExpressionAuxLoop 
            {
              Object RESULT = null;
		int multexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object multexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object addexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = parser.semantico.checkAdditiveExpression(addexpaloop, multexp, addexpaloopleft, multexpleft);
						
              CUP$parser$result = new java_cup.runtime.Symbol(17/*additiveExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relationalExpressionAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(57/*relationalExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relationalExpressionAux ::= relationalOperator additiveExpression 
            {
              Object RESULT = null;
		int relopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object relop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addexp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addexp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object addexp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkRelationalExpressionAux(addexp2, relop, addexp2left);
							
              CUP$parser$result = new java_cup.runtime.Symbol(57/*relationalExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relationalExpression ::= additiveExpression relationalExpressionAux 
            {
              Object RESULT = null;
		int addexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int relexpaux3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int relexpaux3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object relexpaux3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = parser.semantico.checkRelationalExpression(relexpaux3, addexp,addexpleft);
						
              CUP$parser$result = new java_cup.runtime.Symbol(16/*relationalExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // logicalExpressionAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(56/*logicalExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // logicalExpressionAuxLoop ::= logicalExpressionAux logicalExpressionAuxLoop 
            {
              Object RESULT = null;
		int logexpaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logexparight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object logexpa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int logexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int logexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object logexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkLogicalExpressionAuxLoop(logexpa, logexpaloop, logexpaloopleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(56/*logicalExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logicalExpressionAux ::= logicalOperator relationalExpression 
            {
              Object RESULT = null;
		int logopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object logop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int relexp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int relexp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object relexp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = parser.semantico.checkLogicalExpressionAux(relexp2, logop, relexp2left);
						
              CUP$parser$result = new java_cup.runtime.Symbol(55/*logicalExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logicalExpression ::= relationalExpression logicalExpressionAuxLoop 
            {
              Object RESULT = null;
		int relexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object relexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int logexploopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int logexploopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object logexploop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
							RESULT = parser.semantico.checkLogicalExpression(relexp, logexploop, relexpleft, logexploopleft); 
						
              CUP$parser$result = new java_cup.runtime.Symbol(15/*logicalExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= logicalExpression 
            {
              Object RESULT = null;
		int logexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int logexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object logexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				//System.out.println( ((Node)logexp).getValue() );
				//if( ! ((Node)logexp).getType().equals("Boolean") )
				//	throw new Exception("Semantic ERROR: Must have a <Boolean> inside <"+parser.semantico.getStereotype().toUpperCase()+"> and got <"+((Node)logexp).getType()+"> at line: "+logexpleft);
				RESULT = logexp; 
			
              CUP$parser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // returnType ::= VOID 
            {
              Object RESULT = null;
		int void1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int void1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object void1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				RESULT = new Node("void","void"); 
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*returnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // returnType ::= typeSpecifier 
            {
              Object RESULT = null;
		int typeSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int typeSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object typeSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				RESULT = typeSpec; 
			
              CUP$parser$result = new java_cup.runtime.Symbol(13/*returnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // oclExpression ::= expression 
            {
              Object RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
					if( ! ((Node)exp).getType().equals("Boolean") )
						throw new Exception("Semantic ERROR: Must have a <Boolean> inside <"+parser.semantico.getStereotype().toUpperCase()+"> and got <"+((Node)exp).getType()+"> at line: "+expleft);
					RESULT = exp; 
				
              CUP$parser$result = new java_cup.runtime.Symbol(12/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // collectionType ::= collectionKind LEFTPARENTHESIS simpleTypeSpecifier RIGHTPARENTHESIS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*collectionType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // typeSpecifier ::= collectionType 
            {
              Object RESULT = null;
		int colTpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int colTpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object colTp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*typeSpecifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // typeSpecifier ::= simpleTypeSpecifier 
            {
              Object RESULT = null;
		int simpTpSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int simpTpSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object simpTpSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
					RESULT = simpTpSpec; 
				
              CUP$parser$result = new java_cup.runtime.Symbol(10/*typeSpecifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // formalParameterListAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(54/*formalParameterListAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // formalParameterListAuxLoop ::= formalParameterListAux formalParameterListAuxLoop 
            {
              Object RESULT = null;
		int formParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object formParam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int formLoopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int formLoopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object formLoop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkFormalParameterListAuxLoop(formParam, formLoop);
							
              CUP$parser$result = new java_cup.runtime.Symbol(54/*formalParameterListAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // formalParameterListAux ::= VIRGULA IDENTIFIER DOUBLEPOINT typeSpecifier 
            {
              Object RESULT = null;
		int idParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idParam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int formTypeSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int formTypeSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object formTypeSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkFormalParameterListAux(idParam, formTypeSpec,formTypeSpecleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(53/*formalParameterListAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formalParameterListAux2 ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(52/*formalParameterListAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formalParameterListAux2 ::= IDENTIFIER DOUBLEPOINT typeSpecifier formalParameterListAuxLoop 
            {
              Object RESULT = null;
		int idParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idParam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int formTypeSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formTypeSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object formTypeSpec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int formLoopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int formLoopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object formLoop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkFormalParameterListAux2(idParam, formTypeSpec, formLoop,formTypeSpecleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(52/*formalParameterListAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formalParameterList ::= formalParameterListAux2 
            {
              Object RESULT = null;
		int formLoopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int formLoopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object formLoop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = formLoop;
						
              CUP$parser$result = new java_cup.runtime.Symbol(9/*formalParameterList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operationName ::= IDENTIFIER 
            {
              Object RESULT = null;
		int idOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object idOp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ((String) idOp); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ifExpression ::= IF expression THEN expression ELSE expression ENDIF 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  if(((Node) e1).getType().equalsIgnoreCase("Boolean")){
                                       if(((Node) e2).getType().equalsIgnoreCase(((Node)e3).getType())) {
                                                   RESULT = new Node("if", ((Node) e2).getType());
                                               } else {
                                                   throw new Exception("Semantic Error: If expression is returning different type values.");
                                               }
                                       } else {
                                               throw new Exception("Semantic Error: No Boolean Expression on if parameter");
                                       } 
              CUP$parser$result = new java_cup.runtime.Symbol(83/*ifExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operationContextAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*operationContextAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operationContextAux ::= DOUBLEPOINT returnType 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*operationContextAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operationContext ::= IDENTIFIER DDOUBLEPOINT operationName LEFTPARENTHESIS formalParameterList RIGHTPARENTHESIS DOUBLEPOINT returnType 
            {
              Object RESULT = null;
		int idContleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idContright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object idCont = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int opNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object opName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object retorno = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						parser.semantico.setContextClass( ((String) idCont), idContleft );
						parser.semantico.setContextFunction( ((String) opName), ((Node) params) ,((Node) retorno), opNameleft ); 
					
              CUP$parser$result = new java_cup.runtime.Symbol(7/*operationContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contextDeclarationAux ::= operationContext 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(49/*contextDeclarationAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contextDeclaration ::= CONTEXT contextDeclarationAux 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*contextDeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constraintAux3 ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*constraintAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constraintAux3 ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*constraintAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constraintAux2Loop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(48/*constraintAux2Loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constraintAux2Loop ::= constraintAux2 constraintAux2Loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(48/*constraintAux2Loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constraintAux2LoopWithOne ::= constraintAux2 constraintAux2Loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*constraintAux2LoopWithOne*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constraintAux ::= POST 
            {
              Object RESULT = null;
		 parser.semantico.setStereotype("post"); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*constraintAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constraintAux ::= PRE 
            {
              Object RESULT = null;
		 parser.semantico.setStereotype("pre"); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*constraintAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constraintAux2 ::= constraintAux constraintAux3 DOUBLEPOINT oclExpression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(45/*constraintAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constraint ::= contextDeclaration constraintAux2LoopWithOne 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*constraint*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // oclExpressionsAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*oclExpressionsAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // oclExpressionsAux ::= constraint oclExpressionsAux 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*oclExpressionsAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // oclExpressions ::= oclExpressionsAux 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*oclExpressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // packageName ::= pathName 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*packageName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // oclFileAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*oclFileAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // oclFileAuxLoop ::= oclFileAux oclFileAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*oclFileAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // oclFileAuxLoopWithOne ::= oclFileAux oclFileAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*oclFileAuxLoopWithOne*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // oclFileAux ::= PACKAGE packageName oclExpressions ENDPACKAGE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*oclFileAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // oclFile ::= oclExpressions 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*oclFile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= oclFile EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // oclFile ::= oclFileAuxLoopWithOne 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*oclFile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

