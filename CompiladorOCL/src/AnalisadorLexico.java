/* The following code was generated by JFlex 1.4.3 on 5/5/11 8:39 PM */

/* JFlex para constru��o do analisador l�xico de parte de OCL */
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/5/11 8:39 PM from the specification file
 * <tt>exemplo.flex</tt>
 */
class AnalisadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\2\1\0\1\3\1\1\16\5\4\0\1\3\3\0"+
    "\1\4\2\0\1\61\1\66\1\67\1\63\1\12\1\44\1\13\1\7"+
    "\1\64\1\6\11\6\1\42\1\43\1\65\1\62\1\45\1\0\1\40"+
    "\1\60\1\50\1\52\1\4\1\11\1\54\2\4\1\53\5\4\1\56"+
    "\2\4\1\55\1\47\1\57\6\4\1\70\1\74\1\71\1\0\1\4"+
    "\1\0\1\26\1\30\1\32\1\22\1\10\1\16\1\36\1\41\1\21"+
    "\1\4\1\35\1\15\1\37\1\27\1\20\1\34\1\51\1\23\1\14"+
    "\1\25\1\24\1\17\1\4\1\33\1\31\1\4\1\72\1\46\1\73"+
    "\1\0\41\5\2\0\4\4\4\0\1\4\2\0\1\5\7\0\1\4"+
    "\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u013f\4\31\0\162\4"+
    "\4\0\14\4\16\0\5\4\11\0\1\4\21\0\130\5\5\0\23\5"+
    "\12\0\1\4\13\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4"+
    "\1\0\54\4\1\0\46\4\1\0\5\4\4\0\202\4\1\0\4\5"+
    "\3\0\105\4\1\0\46\4\2\0\2\4\6\0\20\4\41\0\46\4"+
    "\2\0\1\4\7\0\47\4\11\0\21\5\1\0\27\5\1\0\3\5"+
    "\1\0\1\5\1\0\2\5\1\0\1\5\13\0\33\4\5\0\3\4"+
    "\15\0\4\5\14\0\6\5\13\0\32\4\5\0\13\4\16\5\7\0"+
    "\12\5\4\0\2\4\1\5\143\4\1\0\1\4\10\5\1\0\6\5"+
    "\2\4\2\5\1\0\4\5\2\4\12\5\3\4\2\0\1\4\17\0"+
    "\1\5\1\4\1\5\36\4\33\5\2\0\3\4\60\0\46\4\13\5"+
    "\1\4\u014f\0\3\5\66\4\2\0\1\5\1\4\20\5\2\0\1\4"+
    "\4\5\3\0\12\4\2\5\2\0\12\5\21\0\3\5\1\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4"+
    "\2\0\1\5\1\4\7\5\2\0\2\5\2\0\3\5\11\0\1\5"+
    "\4\0\2\4\1\0\3\4\2\5\2\0\12\5\4\4\15\0\3\5"+
    "\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4"+
    "\1\0\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5"+
    "\2\0\3\5\13\0\4\4\1\0\1\4\7\0\14\5\3\4\14\0"+
    "\3\5\1\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\5\4\2\0\1\5\1\4\10\5\1\0\3\5\1\0"+
    "\3\5\2\0\1\4\17\0\2\4\2\5\2\0\12\5\1\0\1\4"+
    "\17\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4"+
    "\1\0\2\4\1\0\5\4\2\0\1\5\1\4\6\5\3\0\2\5"+
    "\2\0\3\5\10\0\2\5\4\0\2\4\1\0\3\4\4\0\12\5"+
    "\1\0\1\4\20\0\1\5\1\4\1\0\6\4\3\0\3\4\1\0"+
    "\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0"+
    "\3\4\3\0\10\4\1\0\3\4\4\0\5\5\3\0\3\5\1\0"+
    "\4\5\11\0\1\5\17\0\11\5\11\0\1\4\7\0\3\5\1\0"+
    "\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\4\0"+
    "\7\5\1\0\3\5\1\0\4\5\7\0\2\5\11\0\2\4\4\0"+
    "\12\5\22\0\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0"+
    "\12\4\1\0\5\4\2\0\1\5\1\4\7\5\1\0\3\5\1\0"+
    "\4\5\7\0\2\5\7\0\1\4\1\0\2\4\4\0\12\5\22\0"+
    "\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\20\4\4\0"+
    "\6\5\2\0\3\5\1\0\4\5\11\0\1\5\10\0\2\4\4\0"+
    "\12\5\22\0\2\5\1\0\22\4\3\0\30\4\1\0\11\4\1\0"+
    "\1\4\2\0\7\4\3\0\1\5\4\0\6\5\1\0\1\5\1\0"+
    "\10\5\22\0\2\5\15\0\60\4\1\5\2\4\7\5\4\0\10\4"+
    "\10\5\1\0\12\5\47\0\2\4\1\0\1\4\2\0\2\4\1\0"+
    "\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\5\2\4\6\5"+
    "\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1\0\6\5\2\0"+
    "\12\5\2\0\2\4\42\0\1\4\27\0\2\5\6\0\12\5\13\0"+
    "\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\4\1\0\42\4"+
    "\6\0\24\5\1\0\2\5\4\4\4\0\10\5\1\0\44\5\11\0"+
    "\1\5\71\0\42\4\1\0\5\4\1\0\2\4\1\0\7\5\3\0"+
    "\4\5\6\0\12\5\6\0\6\4\4\5\106\0\46\4\12\0\51\4"+
    "\7\0\132\4\5\0\104\4\5\0\122\4\6\0\7\4\1\0\77\4"+
    "\1\0\1\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4"+
    "\2\0\47\4\1\0\1\4\1\0\4\4\2\0\37\4\1\0\1\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\7\4"+
    "\1\0\7\4\1\0\27\4\1\0\37\4\1\0\1\4\1\0\4\4"+
    "\2\0\7\4\1\0\47\4\1\0\23\4\16\0\11\5\56\0\125\4"+
    "\14\0\u026c\4\2\0\10\4\12\0\32\4\5\0\113\4\3\0\3\4"+
    "\17\0\15\4\1\0\4\4\3\5\13\0\22\4\3\5\13\0\22\4"+
    "\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0\64\4\40\5"+
    "\3\0\1\4\3\0\2\4\1\5\2\0\12\5\41\0\3\5\2\0"+
    "\12\5\6\0\130\4\10\0\51\4\1\5\126\0\35\4\3\0\14\5"+
    "\4\0\14\5\12\0\12\5\36\4\2\0\5\4\u038b\0\154\4\224\0"+
    "\234\4\4\0\132\4\6\0\26\4\2\0\6\4\2\0\46\4\2\0"+
    "\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0"+
    "\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0"+
    "\7\4\17\0\4\5\32\0\5\5\20\0\2\4\23\0\1\4\13\0"+
    "\4\5\6\0\6\5\1\0\1\4\15\0\1\4\40\0\22\4\36\0"+
    "\15\5\4\0\1\5\3\0\6\5\27\0\1\4\4\0\1\4\2\0"+
    "\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\4\4\1\0\3\4\1\0\7\4\3\0\3\4\5\0"+
    "\5\4\26\0\44\4\u0e81\0\3\4\31\0\11\4\6\5\1\0\5\4"+
    "\2\0\5\4\4\0\126\4\2\0\2\5\2\0\3\4\1\0\137\4"+
    "\5\0\50\4\4\0\136\4\21\0\30\4\70\0\20\4\u0200\0\u19b6\4"+
    "\112\0\u51a6\4\132\0\u048d\4\u0773\0\u2ba4\4\u215c\0\u012e\4\2\0\73\4"+
    "\225\0\7\4\14\0\5\4\5\0\1\4\1\5\12\4\1\0\15\4"+
    "\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4"+
    "\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4\3\0\20\5"+
    "\20\0\4\5\17\0\2\4\30\0\3\4\31\0\1\4\6\0\5\4"+
    "\1\0\207\4\2\0\1\5\4\0\1\4\13\0\12\5\7\0\32\4"+
    "\4\0\1\4\1\0\32\4\12\0\132\4\3\0\6\4\2\0\6\4"+
    "\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4\22\0\3\5"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\3\1\6"+
    "\1\7\20\3\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\7\3\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\2\0"+
    "\2\3\1\33\1\34\4\3\1\35\1\36\1\37\16\3"+
    "\1\0\1\40\1\41\10\3\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\2\50\1\0\2\3\1\33\1\3\1\51"+
    "\2\3\1\52\2\3\1\53\4\3\1\54\1\55\2\3"+
    "\1\56\1\3\1\57\1\3\1\60\1\0\1\61\7\3"+
    "\1\62\2\3\1\63\1\3\1\64\1\65\3\3\1\66"+
    "\1\67\2\3\1\70\1\3\1\71\5\3\1\72\2\3"+
    "\1\73\1\3\1\74\16\3\1\75\1\76\10\3\1\77"+
    "\1\3\1\100\1\3\1\101\1\102\10\3\1\103\1\3"+
    "\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\172\0\364\0\u0131\0\172"+
    "\0\u016e\0\172\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc"+
    "\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\172\0\172\0\u0632"+
    "\0\172\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd"+
    "\0\172\0\172\0\172\0\172\0\u081a\0\172\0\172\0\172"+
    "\0\172\0\172\0\172\0\u0857\0\172\0\u0894\0\u08d1\0\u090e"+
    "\0\u094b\0\u0988\0\u09c5\0\172\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\364\0\364\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27"+
    "\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f"+
    "\0\u0e4c\0\u0e89\0\172\0\172\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d"+
    "\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\172\0\172\0\172\0\172"+
    "\0\172\0\172\0\u10ae\0\u10eb\0\u10eb\0\u1128\0\u1165\0\172"+
    "\0\u11a2\0\364\0\u11df\0\u121c\0\364\0\u1259\0\u1296\0\364"+
    "\0\u12d3\0\u1310\0\u134d\0\u138a\0\364\0\364\0\u13c7\0\u1404"+
    "\0\364\0\u1441\0\364\0\u147e\0\364\0\u14bb\0\364\0\u14f8"+
    "\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\364\0\u16a3"+
    "\0\u16e0\0\364\0\u171d\0\364\0\364\0\u175a\0\u1797\0\u17d4"+
    "\0\364\0\364\0\u1811\0\u184e\0\364\0\u188b\0\172\0\u18c8"+
    "\0\u1905\0\u1942\0\u197f\0\u19bc\0\364\0\u19f9\0\u1a36\0\364"+
    "\0\u1a73\0\364\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9"+
    "\0\364\0\364\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37"+
    "\0\u1f74\0\u1fb1\0\364\0\u1fee\0\364\0\u202b\0\364\0\364"+
    "\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213"+
    "\0\364\0\u2250\0\364";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\6\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\6\1\24\1\25\1\26\1\27"+
    "\1\6\1\30\1\31\1\32\2\6\1\33\1\34\1\6"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\6"+
    "\1\44\1\45\1\46\1\47\1\50\2\6\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\3\1\64\2\3\56\64\1\65\12\64\1\66"+
    "\77\0\1\5\76\0\3\6\1\0\2\6\2\0\24\6"+
    "\1\0\1\6\5\0\12\6\22\0\1\7\1\67\2\70"+
    "\67\0\3\6\1\0\2\6\2\0\1\6\1\71\11\6"+
    "\1\72\10\6\1\0\1\6\5\0\12\6\27\0\1\73"+
    "\31\0\1\74\33\0\3\6\1\0\1\75\1\6\2\0"+
    "\24\6\1\0\1\6\5\0\12\6\20\0\3\6\1\0"+
    "\1\76\1\6\2\0\24\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\12\6\1\77\11\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\100\17\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\7\6\1\101\14\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\2\6\1\102\10\6\1\103\7\6\1\104\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\1\105\1\6"+
    "\2\0\24\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\1\106\1\6\2\0\24\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\2\6\2\0\7\6\1\107"+
    "\14\6\1\0\1\110\5\0\12\6\20\0\3\6\1\0"+
    "\2\6\2\0\13\6\1\111\10\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\2\6\2\0\4\6\1\112"+
    "\17\6\1\0\1\6\5\0\12\6\20\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\113\17\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\2\6\2\0\4\6\1\114"+
    "\17\6\1\0\1\6\5\0\12\6\20\0\3\6\1\0"+
    "\2\6\2\0\4\6\1\115\17\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\2\6\2\0\4\6\1\116"+
    "\2\6\1\117\2\6\1\120\11\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\2\6\2\0\4\6\1\121"+
    "\17\6\1\0\1\6\5\0\12\6\50\0\1\122\102\0"+
    "\1\123\114\0\1\124\16\0\3\6\1\0\1\125\1\6"+
    "\2\0\24\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\126\5\6\1\127\11\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\4\6\1\130\17\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\13\6\1\131\10\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\1\6\1\132\22\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\1\133\1\6\2\0\24\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\2\6\2\0"+
    "\16\6\1\134\5\6\1\0\1\6\5\0\12\6\61\0"+
    "\1\135\14\0\1\136\12\0\1\64\2\0\56\64\1\0"+
    "\12\64\24\0\1\137\1\0\1\140\1\0\1\141\31\0"+
    "\1\142\21\0\1\143\74\0\1\144\3\0\2\145\65\0"+
    "\3\6\1\0\2\6\2\0\1\146\23\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\2\6\2\0\6\6"+
    "\1\147\15\6\1\0\1\6\5\0\12\6\14\0\1\73"+
    "\2\150\72\73\4\0\3\6\1\0\2\6\2\0\1\6"+
    "\1\151\22\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\2\6\2\0\11\6\1\152\12\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\2\6\2\0\1\6"+
    "\1\153\22\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\2\6\2\0\5\6\1\154\16\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\2\6\2\0\3\6"+
    "\1\155\1\6\1\156\16\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\20\6\1\157\3\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\2\6\1\160\4\6\1\161\14\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\2\6\2\0\1\162"+
    "\23\6\1\0\1\6\5\0\12\6\20\0\3\6\1\0"+
    "\2\6\2\0\10\6\1\163\13\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\1\164\1\6\2\0\24\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\6\6\1\165\15\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\11\6\1\166\12\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\6\6\1\167\15\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\13\6\1\170\10\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\7\6\1\171\14\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\1\172\23\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\1\173\1\6"+
    "\2\0\24\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\2\6\2\0\16\6\1\174\5\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\2\6\2\0\6\6"+
    "\1\175\15\6\1\0\1\6\5\0\12\6\37\0\1\176"+
    "\55\0\3\6\1\0\2\6\2\0\11\6\1\177\12\6"+
    "\1\0\1\6\5\0\2\6\1\200\7\6\20\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\201\17\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\2\6\2\0\22\6"+
    "\1\177\1\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\2\6\2\0\1\6\1\202\22\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\2\6\2\0\11\6"+
    "\1\203\12\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\2\6\2\0\4\6\1\204\17\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\2\6\2\0\12\6"+
    "\1\205\11\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\2\6\2\0\1\6\1\206\22\6\1\0\1\6"+
    "\5\0\12\6\22\0\1\143\1\0\2\70\71\0\1\144"+
    "\72\0\3\6\1\0\1\207\1\6\2\0\24\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\2\6\2\0"+
    "\5\6\1\210\12\6\1\211\3\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\2\6\2\0\2\6\1\212"+
    "\21\6\1\0\1\6\5\0\12\6\20\0\3\6\1\0"+
    "\2\6\2\0\1\213\23\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\6\6\1\214\15\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\11\6\1\215\12\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\1\6\1\216\22\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\5\6\1\217\16\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\10\6\1\220\13\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\1\221"+
    "\1\6\2\0\24\6\1\0\1\6\5\0\12\6\20\0"+
    "\3\6\1\0\2\6\2\0\13\6\1\222\10\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\2\6\2\0"+
    "\15\6\1\223\6\6\1\0\1\6\5\0\12\6\20\0"+
    "\3\6\1\0\2\6\2\0\11\6\1\224\12\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\2\6\2\0"+
    "\11\6\1\225\12\6\1\0\1\6\5\0\12\6\20\0"+
    "\3\6\1\0\2\6\2\0\21\6\1\226\2\6\1\0"+
    "\1\6\5\0\12\6\24\0\1\227\70\0\3\6\1\0"+
    "\2\6\2\0\10\6\1\230\13\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\2\6\2\0\1\6\1\231"+
    "\22\6\1\0\1\6\5\0\12\6\20\0\3\6\1\0"+
    "\2\6\2\0\1\6\1\232\22\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\1\233\1\6\2\0\24\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\12\6\1\234\11\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\1\6\1\235\22\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\24\6\1\0\1\6\5\0\10\6\1\236\1\237"+
    "\20\0\3\6\1\0\2\6\2\0\2\6\1\240\21\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\12\6\1\241\11\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\1\242\1\6\2\0\24\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\2\6\2\0"+
    "\5\6\1\243\16\6\1\0\1\6\5\0\12\6\20\0"+
    "\3\6\1\0\2\6\2\0\3\6\1\244\20\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\2\6\2\0"+
    "\1\6\1\245\22\6\1\0\1\6\5\0\12\6\20\0"+
    "\3\6\1\0\2\6\2\0\16\6\1\246\5\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\1\247\1\6"+
    "\2\0\24\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\2\6\2\0\12\6\1\250\11\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\1\251\1\6\2\0"+
    "\24\6\1\0\1\6\5\0\12\6\20\0\3\6\1\0"+
    "\1\252\1\6\2\0\24\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\1\253\1\6\2\0\24\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\2\6\2\0"+
    "\22\6\1\254\1\6\1\0\1\6\5\0\12\6\20\0"+
    "\3\6\1\0\2\6\2\0\11\6\1\235\12\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\2\6\2\0"+
    "\15\6\1\255\6\6\1\0\1\6\5\0\12\6\20\0"+
    "\3\6\1\0\2\6\2\0\13\6\1\256\10\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\2\6\2\0"+
    "\16\6\1\257\5\6\1\0\1\6\5\0\12\6\20\0"+
    "\3\6\1\0\1\260\1\6\2\0\24\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\1\261\1\6\2\0"+
    "\24\6\1\0\1\6\5\0\12\6\20\0\3\6\1\0"+
    "\2\6\2\0\11\6\1\262\12\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\2\6\2\0\4\6\1\263"+
    "\17\6\1\0\1\6\5\0\12\6\20\0\3\6\1\0"+
    "\2\6\2\0\17\6\1\264\4\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\2\6\2\0\22\6\1\265"+
    "\1\6\1\0\1\6\5\0\12\6\20\0\3\6\1\0"+
    "\2\6\2\0\13\6\1\266\10\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\2\6\2\0\12\6\1\267"+
    "\11\6\1\0\1\6\5\0\12\6\20\0\3\6\1\0"+
    "\2\6\2\0\16\6\1\270\5\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\1\271\1\6\2\0\24\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\20\6\1\272\3\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\15\6\1\273\6\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\21\6\1\274\2\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\1\275\23\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\2\6\2\0"+
    "\13\6\1\276\10\6\1\0\1\6\5\0\12\6\20\0"+
    "\3\6\1\0\2\6\2\0\11\6\1\277\12\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\1\300\1\6"+
    "\2\0\24\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\2\6\2\0\16\6\1\301\5\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\2\6\2\0\13\6"+
    "\1\235\10\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\2\6\2\0\11\6\1\302\12\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\2\6\2\0\7\6"+
    "\1\235\14\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\1\273\1\6\2\0\24\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\2\6\2\0\12\6\1\303"+
    "\11\6\1\0\1\6\5\0\12\6\20\0\3\6\1\0"+
    "\2\6\2\0\11\6\1\304\12\6\1\0\1\6\5\0"+
    "\12\6\20\0\3\6\1\0\1\177\1\6\2\0\24\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\2\6"+
    "\2\0\5\6\1\305\16\6\1\0\1\6\5\0\12\6"+
    "\20\0\3\6\1\0\2\6\2\0\22\6\1\306\1\6"+
    "\1\0\1\6\5\0\12\6\20\0\3\6\1\0\1\307"+
    "\1\6\2\0\24\6\1\0\1\6\5\0\12\6\20\0"+
    "\3\6\1\0\2\6\2\0\4\6\1\310\17\6\1\0"+
    "\1\6\5\0\12\6\20\0\3\6\1\0\1\311\1\6"+
    "\2\0\24\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\2\6\2\0\17\6\1\312\4\6\1\0\1\6"+
    "\5\0\12\6\20\0\3\6\1\0\2\6\2\0\13\6"+
    "\1\177\10\6\1\0\1\6\5\0\12\6\20\0\3\6"+
    "\1\0\2\6\2\0\11\6\1\313\12\6\1\0\1\6"+
    "\5\0\12\6\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8845];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\23\1\2\11\1\1\1\11\7\1\4\11\1\1\6\11"+
    "\1\1\1\11\1\1\2\0\3\1\1\11\25\1\1\0"+
    "\2\11\10\1\6\11\2\1\1\0\2\1\1\11\25\1"+
    "\1\0\30\1\1\11\64\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
//    System.out.println("Type: "+type+" Value: "+value);
    return new Symbol(type, yyline, yycolumn, value);
  }
  
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message+" at line: "+(yyline+1)+" and column: "+yycolumn);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalisadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalisadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1782) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
//  private void zzScanError(int errorCode) {
//    String message;
//    try {
//      message = ZZ_ERROR_MSG[errorCode];
//    }
//    catch (ArrayIndexOutOfBoundsException e) {
//      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
//    }
//
//    throw new Error(message);
//  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 69: break;
        case 8: 
          { return symbol(TabelaSimbolos.DOUBLEPOINT,yytext());
          }
        case 70: break;
        case 6: 
          { return symbol(TabelaSimbolos.PLUS,yytext());
          }
        case 71: break;
        case 1: 
          { throw new Error("Illegal character <"+
                                                    yytext()+"> at line: "+(yyline+1));
          }
        case 72: break;
        case 67: 
          { return symbol(TabelaSimbolos.ENDPACKAGE,yytext());
          }
        case 73: break;
        case 65: 
          { return symbol(TabelaSimbolos.CONTEXT,yytext());
          }
        case 74: break;
        case 37: 
          { string.append('\t');
          }
        case 75: break;
        case 13: 
          { string.setLength(0); yybegin(STRING);
          }
        case 76: break;
        case 3: 
          { return symbol(TabelaSimbolos.IDENTIFIER,yytext());
          }
        case 77: break;
        case 17: 
          { return symbol(TabelaSimbolos.LESSTHAN,yytext());
          }
        case 78: break;
        case 29: 
          { return symbol(TabelaSimbolos.OR,yytext());
          }
        case 79: break;
        case 68: 
          { return symbol(TabelaSimbolos.BODYCONTEXT,yytext());
          }
        case 80: break;
        case 64: 
          { return symbol(TabelaSimbolos.IMPLIES,yytext());
          }
        case 81: break;
        case 45: 
          { return symbol(TabelaSimbolos.NOT,yytext());
          }
        case 82: break;
        case 40: 
          { return symbol(TabelaSimbolos.FLOAT_LITERAL, new Float(yytext()));
          }
        case 83: break;
        case 26: 
          { string.append('\\');
          }
        case 84: break;
        case 62: 
          { return symbol(TabelaSimbolos.RESULT,yytext());
          }
        case 85: break;
        case 53: 
          { return symbol(TabelaSimbolos.INIT,yytext());
          }
        case 86: break;
        case 36: 
          { string.append('\r');
          }
        case 87: break;
        case 18: 
          { return symbol(TabelaSimbolos.LEFTPARENTHESIS,yytext());
          }
        case 88: break;
        case 20: 
          { return symbol(TabelaSimbolos.LEFTBRACK,yytext());
          }
        case 89: break;
        case 56: 
          { return symbol(TabelaSimbolos.POST,yytext());
          }
        case 90: break;
        case 50: 
          { return symbol(TabelaSimbolos.ELSE,yytext());
          }
        case 91: break;
        case 22: 
          { return symbol(TabelaSimbolos.LEFTBRACKET,yytext());
          }
        case 92: break;
        case 4: 
          { return symbol(TabelaSimbolos.INTEGER_LITERAL, new Integer(yytext()));
          }
        case 93: break;
        case 10: 
          { return symbol(TabelaSimbolos.VIRGULA, yytext());
          }
        case 94: break;
        case 52: 
          { return symbol(TabelaSimbolos.VOID,yytext());
          }
        case 95: break;
        case 43: 
          { return symbol(TabelaSimbolos.DEF,yytext());
          }
        case 96: break;
        case 19: 
          { return symbol(TabelaSimbolos.RIGHTPARENTHESIS,yytext());
          }
        case 97: break;
        case 63: 
          { return symbol(TabelaSimbolos.OCL_SUPER_TYPE, yytext());
          }
        case 98: break;
        case 51: 
          { return symbol(TabelaSimbolos.SELF,yytext());
          }
        case 99: break;
        case 44: 
          { return symbol(TabelaSimbolos.AND,yytext());
          }
        case 100: break;
        case 46: 
          { return symbol(TabelaSimbolos.XOR,yytext());
          }
        case 101: break;
        case 5: 
          { return symbol(TabelaSimbolos.POINT,yytext());
          }
        case 102: break;
        case 11: 
          { return symbol(TabelaSimbolos.GREATERTHAN,yytext());
          }
        case 103: break;
        case 16: 
          { return symbol(TabelaSimbolos.DIVIDE,yytext());
          }
        case 104: break;
        case 30: 
          { return symbol(TabelaSimbolos.IF,yytext());
          }
        case 105: break;
        case 39: 
          { string.append('\'');
          }
        case 106: break;
        case 58: 
          { return symbol(TabelaSimbolos.OCL_PRIMITIVE, yytext());
          }
        case 107: break;
        case 59: 
          { return symbol(TabelaSimbolos.ENDIF,yytext());
          }
        case 108: break;
        case 9: 
          { return symbol(TabelaSimbolos.POINT_VIRGULA,yytext());
          }
        case 109: break;
        case 14: 
          { return symbol(TabelaSimbolos.EQ,yytext());
          }
        case 110: break;
        case 55: 
          { return symbol(TabelaSimbolos.THEN,yytext());
          }
        case 111: break;
        case 34: 
          { return symbol(TabelaSimbolos.NOTEQ,yytext());
          }
        case 112: break;
        case 25: 
          { yybegin(YYINITIAL); 
  								   return symbol(TabelaSimbolos.STRING_LITERAL, 
                                   string.toString());
          }
        case 113: break;
        case 54: 
          { return symbol(TabelaSimbolos.TRUE, new Boolean(yytext()));
          }
        case 114: break;
        case 38: 
          { string.append('\n');
          }
        case 115: break;
        case 21: 
          { return symbol(TabelaSimbolos.RIGHTBRACK,yytext());
          }
        case 116: break;
        case 47: 
          { return symbol(TabelaSimbolos.PRE,yytext());
          }
        case 117: break;
        case 66: 
          { return symbol(TabelaSimbolos.PACKAGE,yytext());
          }
        case 118: break;
        case 32: 
          { return symbol(TabelaSimbolos.DDOUBLEPOINT,yytext());
          }
        case 119: break;
        case 35: 
          { return symbol(TabelaSimbolos.LESSEQTHAN,yytext());
          }
        case 120: break;
        case 41: 
          { return symbol(TabelaSimbolos.LET,yytext());
          }
        case 121: break;
        case 28: 
          { return symbol(TabelaSimbolos.ARROW,yytext());
          }
        case 122: break;
        case 12: 
          { return symbol(TabelaSimbolos.PIPELINE, yytext());
          }
        case 123: break;
        case 31: 
          { return symbol(TabelaSimbolos.IN,yytext());
          }
        case 124: break;
        case 61: 
          { return symbol(TabelaSimbolos.DERIVE,yytext());
          }
        case 125: break;
        case 49: 
          { return symbol(TabelaSimbolos.COLLECTION, yytext());
          }
        case 126: break;
        case 23: 
          { return symbol(TabelaSimbolos.RIGHTBRACKET,yytext());
          }
        case 127: break;
        case 48: 
          { return symbol(TabelaSimbolos.MOD,yytext());
          }
        case 128: break;
        case 7: 
          { return symbol(TabelaSimbolos.MINUS,yytext());
          }
        case 129: break;
        case 33: 
          { return symbol(TabelaSimbolos.GREATEREQTHAN,yytext());
          }
        case 130: break;
        case 57: 
          { return symbol(TabelaSimbolos.ATPRE,yytext());
          }
        case 131: break;
        case 24: 
          { string.append( yytext() );
          }
        case 132: break;
        case 60: 
          { return symbol(TabelaSimbolos.FALSE, new Boolean(yytext()));
          }
        case 133: break;
        case 15: 
          { return symbol(TabelaSimbolos.MULTIPLY,yytext());
          }
        case 134: break;
        case 42: 
          { return symbol(TabelaSimbolos.INV,yytext());
          }
        case 135: break;
        case 27: 
          { 
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(TabelaSimbolos.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalisadorLexico <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        AnalisadorLexico scanner = null;
        try {
          scanner = new AnalisadorLexico( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
