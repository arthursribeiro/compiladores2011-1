/* The following code was generated by JFlex 1.4.3 on 3/29/11 8:24 PM */

/* JFlex example: part of Java language lexer specification */
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/29/11 8:24 PM from the specification file
 * <tt>exemplo.flex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\2\1\0\1\3\1\1\16\5\4\0\1\3\1\0"+
    "\1\62\1\0\1\4\2\0\1\47\1\54\1\55\1\51\1\14\1\44"+
    "\1\10\1\11\1\52\1\6\11\7\1\43\1\0\1\53\1\50\1\45"+
    "\1\0\1\41\4\4\1\13\25\4\1\56\1\63\1\57\1\0\1\4"+
    "\1\0\1\27\1\31\1\33\1\23\1\12\1\17\1\37\1\42\1\22"+
    "\1\4\1\36\1\16\1\40\1\30\1\21\1\35\1\4\1\24\1\15"+
    "\1\26\1\25\1\20\1\4\1\34\1\32\1\4\1\60\1\46\1\61"+
    "\1\0\41\5\2\0\4\4\4\0\1\4\2\0\1\5\7\0\1\4"+
    "\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u013f\4\31\0\162\4"+
    "\4\0\14\4\16\0\5\4\11\0\1\4\21\0\130\5\5\0\23\5"+
    "\12\0\1\4\13\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4"+
    "\1\0\54\4\1\0\46\4\1\0\5\4\4\0\202\4\1\0\4\5"+
    "\3\0\105\4\1\0\46\4\2\0\2\4\6\0\20\4\41\0\46\4"+
    "\2\0\1\4\7\0\47\4\11\0\21\5\1\0\27\5\1\0\3\5"+
    "\1\0\1\5\1\0\2\5\1\0\1\5\13\0\33\4\5\0\3\4"+
    "\15\0\4\5\14\0\6\5\13\0\32\4\5\0\13\4\16\5\7\0"+
    "\12\5\4\0\2\4\1\5\143\4\1\0\1\4\10\5\1\0\6\5"+
    "\2\4\2\5\1\0\4\5\2\4\12\5\3\4\2\0\1\4\17\0"+
    "\1\5\1\4\1\5\36\4\33\5\2\0\3\4\60\0\46\4\13\5"+
    "\1\4\u014f\0\3\5\66\4\2\0\1\5\1\4\20\5\2\0\1\4"+
    "\4\5\3\0\12\4\2\5\2\0\12\5\21\0\3\5\1\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4"+
    "\2\0\1\5\1\4\7\5\2\0\2\5\2\0\3\5\11\0\1\5"+
    "\4\0\2\4\1\0\3\4\2\5\2\0\12\5\4\4\15\0\3\5"+
    "\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4"+
    "\1\0\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5"+
    "\2\0\3\5\13\0\4\4\1\0\1\4\7\0\14\5\3\4\14\0"+
    "\3\5\1\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\5\4\2\0\1\5\1\4\10\5\1\0\3\5\1\0"+
    "\3\5\2\0\1\4\17\0\2\4\2\5\2\0\12\5\1\0\1\4"+
    "\17\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4"+
    "\1\0\2\4\1\0\5\4\2\0\1\5\1\4\6\5\3\0\2\5"+
    "\2\0\3\5\10\0\2\5\4\0\2\4\1\0\3\4\4\0\12\5"+
    "\1\0\1\4\20\0\1\5\1\4\1\0\6\4\3\0\3\4\1\0"+
    "\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0"+
    "\3\4\3\0\10\4\1\0\3\4\4\0\5\5\3\0\3\5\1\0"+
    "\4\5\11\0\1\5\17\0\11\5\11\0\1\4\7\0\3\5\1\0"+
    "\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\4\0"+
    "\7\5\1\0\3\5\1\0\4\5\7\0\2\5\11\0\2\4\4\0"+
    "\12\5\22\0\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0"+
    "\12\4\1\0\5\4\2\0\1\5\1\4\7\5\1\0\3\5\1\0"+
    "\4\5\7\0\2\5\7\0\1\4\1\0\2\4\4\0\12\5\22\0"+
    "\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\20\4\4\0"+
    "\6\5\2\0\3\5\1\0\4\5\11\0\1\5\10\0\2\4\4\0"+
    "\12\5\22\0\2\5\1\0\22\4\3\0\30\4\1\0\11\4\1\0"+
    "\1\4\2\0\7\4\3\0\1\5\4\0\6\5\1\0\1\5\1\0"+
    "\10\5\22\0\2\5\15\0\60\4\1\5\2\4\7\5\4\0\10\4"+
    "\10\5\1\0\12\5\47\0\2\4\1\0\1\4\2\0\2\4\1\0"+
    "\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\5\2\4\6\5"+
    "\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1\0\6\5\2\0"+
    "\12\5\2\0\2\4\42\0\1\4\27\0\2\5\6\0\12\5\13\0"+
    "\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\4\1\0\42\4"+
    "\6\0\24\5\1\0\2\5\4\4\4\0\10\5\1\0\44\5\11\0"+
    "\1\5\71\0\42\4\1\0\5\4\1\0\2\4\1\0\7\5\3\0"+
    "\4\5\6\0\12\5\6\0\6\4\4\5\106\0\46\4\12\0\51\4"+
    "\7\0\132\4\5\0\104\4\5\0\122\4\6\0\7\4\1\0\77\4"+
    "\1\0\1\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4"+
    "\2\0\47\4\1\0\1\4\1\0\4\4\2\0\37\4\1\0\1\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\7\4"+
    "\1\0\7\4\1\0\27\4\1\0\37\4\1\0\1\4\1\0\4\4"+
    "\2\0\7\4\1\0\47\4\1\0\23\4\16\0\11\5\56\0\125\4"+
    "\14\0\u026c\4\2\0\10\4\12\0\32\4\5\0\113\4\3\0\3\4"+
    "\17\0\15\4\1\0\4\4\3\5\13\0\22\4\3\5\13\0\22\4"+
    "\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0\64\4\40\5"+
    "\3\0\1\4\3\0\2\4\1\5\2\0\12\5\41\0\3\5\2\0"+
    "\12\5\6\0\130\4\10\0\51\4\1\5\126\0\35\4\3\0\14\5"+
    "\4\0\14\5\12\0\12\5\36\4\2\0\5\4\u038b\0\154\4\224\0"+
    "\234\4\4\0\132\4\6\0\26\4\2\0\6\4\2\0\46\4\2\0"+
    "\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0"+
    "\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0"+
    "\7\4\17\0\4\5\32\0\5\5\20\0\2\4\23\0\1\4\13\0"+
    "\4\5\6\0\6\5\1\0\1\4\15\0\1\4\40\0\22\4\36\0"+
    "\15\5\4\0\1\5\3\0\6\5\27\0\1\4\4\0\1\4\2\0"+
    "\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\4\4\1\0\3\4\1\0\7\4\3\0\3\4\5\0"+
    "\5\4\26\0\44\4\u0e81\0\3\4\31\0\11\4\6\5\1\0\5\4"+
    "\2\0\5\4\4\0\126\4\2\0\2\5\2\0\3\4\1\0\137\4"+
    "\5\0\50\4\4\0\136\4\21\0\30\4\70\0\20\4\u0200\0\u19b6\4"+
    "\112\0\u51a6\4\132\0\u048d\4\u0773\0\u2ba4\4\u215c\0\u012e\4\2\0\73\4"+
    "\225\0\7\4\14\0\5\4\5\0\1\4\1\5\12\4\1\0\15\4"+
    "\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4"+
    "\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4\3\0\20\5"+
    "\20\0\4\5\17\0\2\4\30\0\3\4\31\0\1\4\6\0\5\4"+
    "\1\0\207\4\2\0\1\5\4\0\1\4\13\0\12\5\7\0\32\4"+
    "\4\0\1\4\1\0\32\4\12\0\132\4\3\0\6\4\2\0\6\4"+
    "\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4\22\0\3\5"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\2\4\1\5\1\6\1\3"+
    "\1\7\17\3\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\3\0\1\32\7\3"+
    "\1\33\1\34\1\35\15\3\1\0\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\3\46\1\0\1\47"+
    "\4\3\1\50\2\3\1\51\2\3\1\52\4\3\1\53"+
    "\1\54\2\3\1\55\1\3\1\56\1\3\1\0\1\57"+
    "\2\3\1\60\2\3\1\61\1\62\3\3\1\63\1\64"+
    "\2\3\1\65\1\3\1\66\1\67\2\3\1\70\7\3"+
    "\1\71\1\3\1\72\1\73\4\3\1\74\1\3\1\75"+
    "\1\76\4\3\1\77\1\3\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\150\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\150\0\u01a0\0\150\0\u01d4\0\u0208\0\u023c\0\u0270"+
    "\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410"+
    "\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\150\0\u0548\0\150"+
    "\0\150\0\150\0\150\0\150\0\u057c\0\150\0\150\0\150"+
    "\0\150\0\150\0\150\0\u05b0\0\u05b0\0\u05e4\0\u0618\0\u064c"+
    "\0\u0680\0\150\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8"+
    "\0\u07ec\0\320\0\320\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\u0ac4\0\u0af8\0\150\0\150\0\150\0\150\0\150\0\150"+
    "\0\150\0\150\0\u0b2c\0\u0b60\0\u0b94\0\u0b94\0\150\0\u0bc8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\320\0\u0c98\0\u0ccc\0\320\0\u0d00"+
    "\0\u0d34\0\320\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\320\0\320"+
    "\0\u0e38\0\u0e6c\0\320\0\u0ea0\0\320\0\u0ed4\0\u0f08\0\320"+
    "\0\u0f3c\0\u0f70\0\320\0\u0fa4\0\u0fd8\0\320\0\320\0\u100c"+
    "\0\u1040\0\u1074\0\320\0\320\0\u10a8\0\u10dc\0\320\0\u1110"+
    "\0\150\0\320\0\u1144\0\u1178\0\320\0\u11ac\0\u11e0\0\u1214"+
    "\0\u1248\0\u127c\0\u12b0\0\u12e4\0\320\0\u1318\0\320\0\320"+
    "\0\u134c\0\u1380\0\u13b4\0\u13e8\0\320\0\u141c\0\320\0\320"+
    "\0\u1450\0\u1484\0\u14b8\0\u14ec\0\320\0\u1520\0\320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\6\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\6\1\25\1\26\1\27"+
    "\1\30\1\6\1\31\1\32\1\33\3\6\1\34\1\6"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\2\3"+
    "\1\54\2\3\44\54\1\55\12\54\1\3\1\56\66\0"+
    "\1\5\65\0\4\6\2\0\2\6\1\0\24\6\1\0"+
    "\1\6\32\0\1\57\2\60\56\0\2\10\1\0\1\57"+
    "\2\60\56\0\1\7\1\10\1\61\34\0\1\62\22\0"+
    "\4\6\2\0\2\6\1\0\1\6\1\63\11\6\1\64"+
    "\10\6\1\0\1\6\25\0\4\6\2\0\1\65\1\6"+
    "\1\0\11\6\1\66\12\6\1\0\1\6\25\0\4\6"+
    "\2\0\1\67\1\6\1\0\24\6\1\0\1\6\25\0"+
    "\4\6\2\0\2\6\1\0\12\6\1\70\11\6\1\0"+
    "\1\6\25\0\4\6\2\0\2\6\1\0\4\6\1\71"+
    "\17\6\1\0\1\6\25\0\4\6\2\0\2\6\1\0"+
    "\7\6\1\72\14\6\1\0\1\6\25\0\4\6\2\0"+
    "\2\6\1\0\2\6\1\73\10\6\1\74\7\6\1\75"+
    "\1\0\1\6\25\0\4\6\2\0\1\76\1\6\1\0"+
    "\24\6\1\0\1\6\25\0\4\6\2\0\1\77\1\6"+
    "\1\0\24\6\1\0\1\6\25\0\4\6\2\0\2\6"+
    "\1\0\7\6\1\100\14\6\1\0\1\101\25\0\4\6"+
    "\2\0\2\6\1\0\13\6\1\102\10\6\1\0\1\6"+
    "\25\0\4\6\2\0\2\6\1\0\4\6\1\103\17\6"+
    "\1\0\1\6\25\0\4\6\2\0\2\6\1\0\4\6"+
    "\1\104\17\6\1\0\1\6\25\0\4\6\2\0\2\6"+
    "\1\0\4\6\1\105\17\6\1\0\1\6\25\0\4\6"+
    "\2\0\2\6\1\0\4\6\1\106\17\6\1\0\1\6"+
    "\25\0\4\6\2\0\2\6\1\0\4\6\1\107\2\6"+
    "\1\110\2\6\1\111\11\6\1\0\1\6\56\0\1\112"+
    "\71\0\1\113\70\0\1\114\60\0\1\115\2\0\1\116"+
    "\13\0\1\54\2\0\57\54\26\0\1\117\1\0\1\120"+
    "\1\0\1\121\31\0\1\122\7\0\1\123\1\124\62\0"+
    "\2\125\1\126\3\0\1\126\47\0\1\61\2\127\61\61"+
    "\4\0\4\6\2\0\2\6\1\0\1\130\23\6\1\0"+
    "\1\6\25\0\4\6\2\0\2\6\1\0\6\6\1\131"+
    "\15\6\1\0\1\6\25\0\4\6\2\0\2\6\1\0"+
    "\1\6\1\132\22\6\1\0\1\6\25\0\4\6\2\0"+
    "\2\6\1\0\12\6\1\133\11\6\1\0\1\6\25\0"+
    "\4\6\2\0\2\6\1\0\11\6\1\134\12\6\1\0"+
    "\1\6\25\0\4\6\2\0\2\6\1\0\1\6\1\135"+
    "\22\6\1\0\1\6\25\0\4\6\2\0\2\6\1\0"+
    "\5\6\1\136\16\6\1\0\1\6\25\0\4\6\2\0"+
    "\2\6\1\0\3\6\1\137\1\6\1\140\16\6\1\0"+
    "\1\6\25\0\4\6\2\0\2\6\1\0\20\6\1\141"+
    "\3\6\1\0\1\6\25\0\4\6\2\0\2\6\1\0"+
    "\2\6\1\142\4\6\1\143\14\6\1\0\1\6\25\0"+
    "\4\6\2\0\2\6\1\0\1\144\23\6\1\0\1\6"+
    "\25\0\4\6\2\0\2\6\1\0\10\6\1\145\13\6"+
    "\1\0\1\6\25\0\4\6\2\0\1\146\1\6\1\0"+
    "\24\6\1\0\1\6\25\0\4\6\2\0\2\6\1\0"+
    "\6\6\1\147\15\6\1\0\1\6\25\0\4\6\2\0"+
    "\2\6\1\0\11\6\1\150\12\6\1\0\1\6\25\0"+
    "\4\6\2\0\2\6\1\0\6\6\1\151\15\6\1\0"+
    "\1\6\25\0\4\6\2\0\2\6\1\0\13\6\1\152"+
    "\10\6\1\0\1\6\25\0\4\6\2\0\2\6\1\0"+
    "\7\6\1\153\14\6\1\0\1\6\25\0\4\6\2\0"+
    "\2\6\1\0\1\154\23\6\1\0\1\6\25\0\4\6"+
    "\2\0\1\155\1\6\1\0\24\6\1\0\1\6\25\0"+
    "\4\6\2\0\2\6\1\0\16\6\1\156\5\6\1\0"+
    "\1\6\45\0\1\157\51\0\2\60\56\0\2\124\2\0"+
    "\2\60\56\0\2\125\60\0\4\6\2\0\1\160\1\6"+
    "\1\0\24\6\1\0\1\6\25\0\4\6\2\0\2\6"+
    "\1\0\5\6\1\161\12\6\1\162\3\6\1\0\1\6"+
    "\25\0\4\6\2\0\2\6\1\0\2\6\1\163\21\6"+
    "\1\0\1\6\25\0\4\6\2\0\2\6\1\0\11\6"+
    "\1\164\12\6\1\0\1\6\25\0\4\6\2\0\2\6"+
    "\1\0\1\165\23\6\1\0\1\6\25\0\4\6\2\0"+
    "\2\6\1\0\6\6\1\166\15\6\1\0\1\6\25\0"+
    "\4\6\2\0\2\6\1\0\11\6\1\167\12\6\1\0"+
    "\1\6\25\0\4\6\2\0\2\6\1\0\1\6\1\170"+
    "\22\6\1\0\1\6\25\0\4\6\2\0\2\6\1\0"+
    "\5\6\1\171\16\6\1\0\1\6\25\0\4\6\2\0"+
    "\2\6\1\0\10\6\1\172\13\6\1\0\1\6\25\0"+
    "\4\6\2\0\1\173\1\6\1\0\24\6\1\0\1\6"+
    "\25\0\4\6\2\0\2\6\1\0\13\6\1\174\10\6"+
    "\1\0\1\6\25\0\4\6\2\0\2\6\1\0\15\6"+
    "\1\175\6\6\1\0\1\6\25\0\4\6\2\0\2\6"+
    "\1\0\11\6\1\176\12\6\1\0\1\6\25\0\4\6"+
    "\2\0\2\6\1\0\11\6\1\177\12\6\1\0\1\6"+
    "\25\0\4\6\2\0\2\6\1\0\21\6\1\200\2\6"+
    "\1\0\1\6\33\0\1\201\55\0\4\6\2\0\2\6"+
    "\1\0\2\6\1\202\21\6\1\0\1\6\25\0\4\6"+
    "\2\0\2\6\1\0\12\6\1\203\11\6\1\0\1\6"+
    "\25\0\4\6\2\0\2\6\1\0\5\6\1\204\16\6"+
    "\1\0\1\6\25\0\4\6\2\0\1\205\1\6\1\0"+
    "\24\6\1\0\1\6\25\0\4\6\2\0\2\6\1\0"+
    "\5\6\1\206\16\6\1\0\1\6\25\0\4\6\2\0"+
    "\2\6\1\0\3\6\1\207\20\6\1\0\1\6\25\0"+
    "\4\6\2\0\2\6\1\0\1\6\1\210\22\6\1\0"+
    "\1\6\25\0\4\6\2\0\2\6\1\0\16\6\1\211"+
    "\5\6\1\0\1\6\25\0\4\6\2\0\1\212\1\6"+
    "\1\0\24\6\1\0\1\6\25\0\4\6\2\0\2\6"+
    "\1\0\12\6\1\213\11\6\1\0\1\6\25\0\4\6"+
    "\2\0\2\6\1\0\16\6\1\214\5\6\1\0\1\6"+
    "\25\0\4\6\2\0\2\6\1\0\16\6\1\215\5\6"+
    "\1\0\1\6\25\0\4\6\2\0\1\216\1\6\1\0"+
    "\24\6\1\0\1\6\25\0\4\6\2\0\1\217\1\6"+
    "\1\0\24\6\1\0\1\6\25\0\4\6\2\0\2\6"+
    "\1\0\11\6\1\220\12\6\1\0\1\6\25\0\4\6"+
    "\2\0\2\6\1\0\4\6\1\221\17\6\1\0\1\6"+
    "\25\0\4\6\2\0\2\6\1\0\17\6\1\222\4\6"+
    "\1\0\1\6\25\0\4\6\2\0\2\6\1\0\22\6"+
    "\1\223\1\6\1\0\1\6\25\0\4\6\2\0\2\6"+
    "\1\0\21\6\1\224\2\6\1\0\1\6\25\0\4\6"+
    "\2\0\2\6\1\0\1\225\23\6\1\0\1\6\25\0"+
    "\4\6\2\0\2\6\1\0\13\6\1\226\10\6\1\0"+
    "\1\6\25\0\4\6\2\0\2\6\1\0\11\6\1\227"+
    "\12\6\1\0\1\6\25\0\4\6\2\0\1\230\1\6"+
    "\1\0\24\6\1\0\1\6\25\0\4\6\2\0\2\6"+
    "\1\0\12\6\1\231\11\6\1\0\1\6\25\0\4\6"+
    "\2\0\2\6\1\0\11\6\1\232\12\6\1\0\1\6"+
    "\25\0\4\6\2\0\2\6\1\0\22\6\1\233\1\6"+
    "\1\0\1\6\25\0\4\6\2\0\1\234\1\6\1\0"+
    "\24\6\1\0\1\6\25\0\4\6\2\0\1\235\1\6"+
    "\1\0\24\6\1\0\1\6\25\0\4\6\2\0\2\6"+
    "\1\0\17\6\1\236\4\6\1\0\1\6\25\0\4\6"+
    "\2\0\2\6\1\0\11\6\1\237\12\6\1\0\1\6"+
    "\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\4\1\1\11\1\1\1\11"+
    "\21\1\1\11\1\1\5\11\1\1\6\11\3\1\3\0"+
    "\1\11\27\1\1\0\10\11\3\1\1\0\1\11\27\1"+
    "\1\0\21\1\1\11\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    System.out.println("Type: "+type+" Value: "+value);
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1762) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 65: break;
        case 8: 
          { return symbol(sym.DOUBLEPOINT,yytext());
          }
        case 66: break;
        case 7: 
          { return symbol(sym.PLUS,yytext());
          }
        case 67: break;
        case 63: 
          { return symbol(sym.ENDPACKAGE,yytext());
          }
        case 68: break;
        case 61: 
          { return symbol(sym.CONTEXT,yytext());
          }
        case 69: break;
        case 35: 
          { string.append('\t');
          }
        case 70: break;
        case 12: 
          { string.setLength(0); yybegin(STRING);
          }
        case 71: break;
        case 3: 
          { return symbol(sym.IDENTIFIER,yytext());
          }
        case 72: break;
        case 16: 
          { return symbol(sym.LESSTHAN,yytext());
          }
        case 73: break;
        case 27: 
          { return symbol(sym.OR,yytext());
          }
        case 74: break;
        case 4: 
          { return symbol(sym.INTEGER_LITERAL,yytext());
          }
        case 75: break;
        case 64: 
          { return symbol(sym.BODYCONTEXT,yytext());
          }
        case 76: break;
        case 60: 
          { return symbol(sym.IMPLIES,yytext());
          }
        case 77: break;
        case 44: 
          { return symbol(sym.NOT,yytext());
          }
        case 78: break;
        case 25: 
          { string.append('\\');
          }
        case 79: break;
        case 59: 
          { return symbol(sym.RESULT,yytext());
          }
        case 80: break;
        case 51: 
          { return symbol(sym.TRUE,yytext());
          }
        case 81: break;
        case 50: 
          { return symbol(sym.INIT,yytext());
          }
        case 82: break;
        case 34: 
          { string.append('\r');
          }
        case 83: break;
        case 17: 
          { return symbol(sym.LEFTPARENTHESIS,yytext());
          }
        case 84: break;
        case 19: 
          { return symbol(sym.LEFTBRACK,yytext());
          }
        case 85: break;
        case 53: 
          { return symbol(sym.POST,yytext());
          }
        case 86: break;
        case 47: 
          { return symbol(sym.ELSE,yytext());
          }
        case 87: break;
        case 21: 
          { return symbol(sym.LEFTBRACKET,yytext());
          }
        case 88: break;
        case 9: 
          { return symbol(sym.VIRGULA, yytext());
          }
        case 89: break;
        case 49: 
          { return symbol(sym.VOID,yytext());
          }
        case 90: break;
        case 42: 
          { return symbol(sym.DEF,yytext());
          }
        case 91: break;
        case 24: 
          { yybegin(YYINITIAL); 
                                   return symbol(sym.STRING_LITERAL, 
                                   string.toString());
          }
        case 92: break;
        case 18: 
          { return symbol(sym.RIGHTPARENTHESIS,yytext());
          }
        case 93: break;
        case 48: 
          { return symbol(sym.SELF,yytext());
          }
        case 94: break;
        case 43: 
          { return symbol(sym.AND,yytext());
          }
        case 95: break;
        case 45: 
          { return symbol(sym.XOR,yytext());
          }
        case 96: break;
        case 6: 
          { return symbol(sym.POINT,yytext());
          }
        case 97: break;
        case 37: 
          { string.append('\"');
          }
        case 98: break;
        case 10: 
          { return symbol(sym.GREATERTHAN,yytext());
          }
        case 99: break;
        case 15: 
          { return symbol(sym.DIVIDE,yytext());
          }
        case 100: break;
        case 57: 
          { return symbol(sym.STATIC,yytext());
          }
        case 101: break;
        case 28: 
          { return symbol(sym.IF,yytext());
          }
        case 102: break;
        case 55: 
          { return symbol(sym.ENDIF,yytext());
          }
        case 103: break;
        case 13: 
          { return symbol(sym.EQ,yytext());
          }
        case 104: break;
        case 52: 
          { return symbol(sym.THEN,yytext());
          }
        case 105: break;
        case 32: 
          { return symbol(sym.NOTEQ,yytext());
          }
        case 106: break;
        case 36: 
          { string.append('\n');
          }
        case 107: break;
        case 20: 
          { return symbol(sym.RIGHTBRACK,yytext());
          }
        case 108: break;
        case 46: 
          { return symbol(sym.PRE,yytext());
          }
        case 109: break;
        case 62: 
          { return symbol(sym.PACKAGE,yytext());
          }
        case 110: break;
        case 30: 
          { return symbol(sym.DDOUBLEPOINT,yytext());
          }
        case 111: break;
        case 1: 
          { throw new Error("Illegal character <"+
                                                    yytext()+">");
          }
        case 112: break;
        case 33: 
          { return symbol(sym.LESSEQTHAN,yytext());
          }
        case 113: break;
        case 40: 
          { return symbol(sym.LET,yytext());
          }
        case 114: break;
        case 38: 
          { return symbol(sym.FLOAT_LITERAL,yytext());
          }
        case 115: break;
        case 26: 
          { return symbol(sym.ARROW,yytext());
          }
        case 116: break;
        case 11: 
          { return symbol(sym.PIPELINE, yytext());
          }
        case 117: break;
        case 29: 
          { return symbol(sym.IN,yytext());
          }
        case 118: break;
        case 58: 
          { return symbol(sym.DERIVE,yytext());
          }
        case 119: break;
        case 22: 
          { return symbol(sym.RIGHTBRACKET,yytext());
          }
        case 120: break;
        case 56: 
          { return symbol(sym.FALSE,yytext());
          }
        case 121: break;
        case 5: 
          { return symbol(sym.MINUS,yytext());
          }
        case 122: break;
        case 31: 
          { return symbol(sym.GREATEREQTHAN,yytext());
          }
        case 123: break;
        case 54: 
          { return symbol(sym.ATPRE,yytext());
          }
        case 124: break;
        case 23: 
          { string.append( yytext() );
          }
        case 125: break;
        case 14: 
          { return symbol(sym.MULTIPLY,yytext());
          }
        case 126: break;
        case 41: 
          { return symbol(sym.INV,yytext());
          }
        case 127: break;
        case 39: 
          { 
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          scanner = new Scanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
