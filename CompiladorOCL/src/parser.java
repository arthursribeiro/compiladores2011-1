
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed May 04 16:32:09 BRT 2011
//----------------------------------------------------

import java_cup.runtime.*;
import Semantica.AnalisadorSemantico;
import Semantica.Node;

/** CUP v0.10k generated parser.
  * @version Wed May 04 16:32:09 BRT 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\003\003\000\002\002\004\000\002\003" +
    "\003\000\002\052\006\000\002\053\004\000\002\054\004" +
    "\000\002\054\002\000\002\004\003\000\002\005\003\000" +
    "\002\055\004\000\002\055\002\000\002\006\004\000\002" +
    "\057\006\000\002\056\003\000\002\056\003\000\002\061" +
    "\004\000\002\062\004\000\002\062\002\000\002\060\003" +
    "\000\002\060\002\000\002\007\004\000\002\063\003\000" +
    "\002\011\012\000\002\065\004\000\002\065\002\000\002" +
    "\126\011\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\003\000\002\066\006" +
    "\000\002\066\002\000\002\067\006\000\002\070\004\000" +
    "\002\070\002\000\002\014\003\000\002\014\003\000\002" +
    "\015\006\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\020\003\000\002\021\004\000\002\071\004" +
    "\000\002\072\004\000\002\072\002\000\002\022\004\000" +
    "\002\073\004\000\002\073\002\000\002\023\004\000\002" +
    "\074\004\000\002\075\004\000\002\075\002\000\002\024" +
    "\004\000\002\076\004\000\002\077\004\000\002\077\002" +
    "\000\002\026\003\000\002\026\003\000\002\100\004\000" +
    "\002\027\004\000\002\101\003\000\002\101\003\000\002" +
    "\102\004\000\002\103\004\000\002\103\002\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\005" +
    "\000\002\030\003\000\002\030\004\000\002\030\003\000" +
    "\002\032\006\000\002\032\005\000\002\104\003\000\002" +
    "\105\003\000\002\105\002\000\002\125\003\000\002\125" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\034\003\000\002\035\006\000" +
    "\002\106\004\000\002\110\004\000\002\110\002\000\002" +
    "\107\004\000\002\107\002\000\002\036\004\000\002\111" +
    "\005\000\002\111\002\000\002\031\006\000\002\112\003" +
    "\000\002\112\002\000\002\113\003\000\002\113\002\000" +
    "\002\114\003\000\002\114\002\000\002\025\005\000\002" +
    "\037\007\000\002\115\004\000\002\116\004\000\002\116" +
    "\002\000\002\117\004\000\002\117\002\000\002\120\010" +
    "\000\002\120\002\000\002\040\004\000\002\121\004\000" +
    "\002\122\004\000\002\122\002\000\002\041\003\000\002" +
    "\042\004\000\002\123\004\000\002\124\004\000\002\124" +
    "\002\000\002\043\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\047\003\000\002\047\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\051\003\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\010\002\ufff7\011\012\027\006\001\002\000" +
    "\004\002\001\001\002\000\010\002\ufff7\011\012\016\ufff7" +
    "\001\002\000\004\046\064\001\002\000\004\002\uffff\001" +
    "\002\000\006\002\ufff9\016\ufff9\001\002\000\006\030\113" +
    "\031\111\001\002\000\004\046\022\001\002\000\006\002" +
    "\ufffb\027\006\001\002\000\004\002\015\001\002\000\004" +
    "\002\000\001\002\000\006\002\ufffb\027\006\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffc\001\002\000\006" +
    "\030\uffed\031\uffed\001\002\000\004\041\024\001\002\000" +
    "\006\030\uffec\031\uffec\001\002\000\044\007\026\020\036" +
    "\025\034\026\032\034\045\046\035\052\044\053\043\054" +
    "\027\055\042\056\025\057\041\060\046\061\031\062\037" +
    "\063\033\064\030\001\002\000\004\065\uffd7\001\002\000" +
    "\004\065\uffdd\001\002\000\004\065\uffd9\001\002\000\004" +
    "\065\uffe5\001\002\000\004\065\uffd8\001\002\000\004\065" +
    "\uffdf\001\002\000\004\065\uffe2\001\002\000\004\065\uffe0" +
    "\001\002\000\004\065\uffe7\001\002\000\004\065\uffe1\001" +
    "\002\000\004\065\uffdc\001\002\000\004\065\047\001\002" +
    "\000\004\065\uffe3\001\002\000\004\065\uffda\001\002\000" +
    "\004\065\uffe4\001\002\000\004\065\uffe6\001\002\000\004" +
    "\065\uffde\001\002\000\004\065\uffdb\001\002\000\006\046" +
    "\050\066\uffd4\001\002\000\004\037\076\001\002\000\004" +
    "\066\uffd6\001\002\000\004\066\053\001\002\000\004\037" +
    "\054\001\002\000\010\005\055\045\063\046\064\001\002" +
    "\000\006\030\uffcb\031\uffcb\001\002\000\020\030\uff9f\031" +
    "\uff9f\040\uff9f\042\uff9f\044\uff9f\052\uff9f\066\uff9f\001\002" +
    "\000\014\030\uffd0\031\uffd0\042\uffd0\052\uffd0\066\uffd0\001" +
    "\002\000\006\030\uffcc\031\uffcc\001\002\000\004\065\073" +
    "\001\002\000\006\030\uffeb\031\uffeb\001\002\000\006\065" +
    "\uff7c\071\uff7c\001\002\000\110\002\uff82\007\uff82\011\uff82" +
    "\014\uff82\015\uff82\016\uff82\020\uff82\026\uff82\030\uff82\031" +
    "\uff82\032\uff82\033\uff82\034\uff82\040\uff82\041\070\042\uff82" +
    "\043\uff82\044\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055" +
    "\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82" +
    "\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82\072\uff82\001" +
    "\002\000\014\030\uffcf\031\uffcf\042\uffcf\052\uffcf\066\uffcf" +
    "\001\002\000\106\002\uff85\007\uff85\011\uff85\014\uff85\015" +
    "\uff85\016\uff85\020\uff85\026\uff85\030\uff85\031\uff85\032\uff85" +
    "\033\uff85\034\uff85\040\uff85\042\uff85\043\uff85\044\uff85\051" +
    "\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85" +
    "\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85\066" +
    "\uff85\067\uff85\070\uff85\072\uff85\001\002\000\110\002\uff82" +
    "\007\uff82\011\uff82\014\uff82\015\uff82\016\uff82\020\uff82\026" +
    "\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\040\uff82" +
    "\041\070\042\uff82\043\uff82\044\uff82\051\uff82\052\uff82\053" +
    "\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82" +
    "\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070" +
    "\uff82\072\uff82\001\002\000\004\046\071\001\002\000\110" +
    "\002\uff84\007\uff84\011\uff84\014\uff84\015\uff84\016\uff84\020" +
    "\uff84\026\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84" +
    "\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\051\uff84\052" +
    "\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84" +
    "\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84\066\uff84\067" +
    "\uff84\070\uff84\072\uff84\001\002\000\106\002\uff83\007\uff83" +
    "\011\uff83\014\uff83\015\uff83\016\uff83\020\uff83\026\uff83\030" +
    "\uff83\031\uff83\032\uff83\033\uff83\034\uff83\040\uff83\042\uff83" +
    "\043\uff83\044\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055" +
    "\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83" +
    "\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\072\uff83\001" +
    "\002\000\004\046\064\001\002\000\004\066\075\001\002" +
    "\000\014\030\uffce\031\uffce\042\uffce\052\uffce\066\uffce\001" +
    "\002\000\006\045\063\046\064\001\002\000\006\042\102" +
    "\066\uffd1\001\002\000\006\042\102\066\uffd1\001\002\000" +
    "\004\066\uffd5\001\002\000\004\046\103\001\002\000\004" +
    "\037\104\001\002\000\006\045\063\046\064\001\002\000" +
    "\006\042\uffd3\066\uffd3\001\002\000\004\066\uffd2\001\002" +
    "\000\014\002\ufff0\011\ufff0\016\ufff0\030\113\031\111\001" +
    "\002\000\006\037\uffee\046\115\001\002\000\006\037\ufff4" +
    "\046\ufff4\001\002\000\010\002\ufff6\011\ufff6\016\ufff6\001" +
    "\002\000\006\037\ufff3\046\ufff3\001\002\000\004\037\116" +
    "\001\002\000\004\037\uffef\001\002\000\034\004\152\006" +
    "\154\017\126\025\122\035\125\036\142\045\063\046\064" +
    "\047\145\050\147\053\143\065\135\073\134\001\002\000" +
    "\074\002\uffb9\007\uffb9\011\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\020\uffb9\026\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\042" +
    "\uffb9\044\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\066\uffb9\070\uffb9\072\uffb9\001\002\000\076\002\uffa2" +
    "\007\uffa2\011\uffa2\014\uffa2\015\uffa2\016\uffa2\020\uffa2\026" +
    "\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2" +
    "\066\uffa2\070\uffa2\072\uffa2\001\002\000\076\002\uffb2\007" +
    "\uffb2\011\uffb2\014\uffb2\015\uffb2\016\uffb2\020\uffb2\026\uffb2" +
    "\030\uffb2\031\uffb2\033\uffb2\034\uffb2\042\uffb2\043\322\044" +
    "\uffb2\051\320\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\066" +
    "\uffb2\070\uffb2\072\uffb2\001\002\000\030\004\uff6e\006\uff6e" +
    "\017\uff6e\035\uff6e\036\uff6e\045\uff6e\046\uff6e\047\uff6e\050" +
    "\uff6e\065\uff6e\073\uff6e\001\002\000\036\002\uffca\011\uffca" +
    "\014\uffca\015\uffca\016\uffca\030\uffca\031\uffca\033\uffca\042" +
    "\uffca\044\uffca\051\uffca\066\uffca\070\uffca\072\uffca\001\002" +
    "\000\004\071\302\001\002\000\076\002\uffa5\007\uffa5\011" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\020\uffa5\026\uffa5\030\uffa5" +
    "\031\uffa5\033\uffa5\034\uffa5\042\uffa5\043\uffa5\044\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\066\uffa5\070" +
    "\uffa5\072\uffa5\001\002\000\034\004\152\006\154\017\126" +
    "\025\122\035\125\036\142\045\063\046\064\047\145\050" +
    "\147\053\143\065\135\073\134\001\002\000\062\002\uffc3" +
    "\007\uffc3\011\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3\026" +
    "\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3\042\uffc3\044\uffc3" +
    "\051\uffc3\052\263\057\265\060\270\061\266\062\264\063" +
    "\271\066\uffc3\070\uffc3\072\uffc3\001\002\000\074\002\uffbb" +
    "\007\uffbb\011\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\026" +
    "\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb\042\uffbb\044\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\260\055\257\056\253\057" +
    "\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\066\uffbb" +
    "\070\uffbb\072\uffbb\001\002\000\076\002\uffaf\007\uffaf\011" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\020\uffaf\026\uffaf\030\uffaf" +
    "\031\uffaf\033\uffaf\034\uffaf\042\uffaf\043\uffaf\044\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\066\uffaf\070" +
    "\uffaf\072\uffaf\001\002\000\046\002\uffc6\007\245\011\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\020\244\026\247\030\uffc6\031" +
    "\uffc6\033\uffc6\034\250\042\uffc6\044\uffc6\051\uffc6\066\uffc6" +
    "\070\uffc6\072\uffc6\001\002\000\070\002\uffbf\007\uffbf\011" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\026\uffbf\030\uffbf" +
    "\031\uffbf\033\uffbf\034\uffbf\042\uffbf\044\uffbf\051\uffbf\052" +
    "\uffbf\053\236\056\234\057\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\064\235\066\uffbf\070\uffbf\072\uffbf\001\002\000" +
    "\076\002\uffa3\007\uffa3\011\uffa3\014\uffa3\015\uffa3\016\uffa3" +
    "\020\uffa3\026\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063" +
    "\uffa3\064\uffa3\066\uffa3\070\uffa3\072\uffa3\001\002\000\034" +
    "\004\152\006\154\017\126\025\122\035\125\036\142\045" +
    "\063\046\064\047\145\050\147\053\143\065\135\073\134" +
    "\001\002\000\074\002\uffba\007\uffba\011\uffba\014\uffba\015" +
    "\uffba\016\uffba\020\uffba\026\uffba\030\uffba\031\uffba\033\uffba" +
    "\034\uffba\042\uffba\044\uffba\051\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba" +
    "\063\uffba\064\uffba\066\uffba\070\uffba\072\uffba\001\002\000" +
    "\014\002\uffcd\011\uffcd\016\uffcd\030\uffcd\031\uffcd\001\002" +
    "\000\030\004\152\006\154\017\126\035\125\036\142\045" +
    "\063\046\064\047\145\050\147\065\135\073\134\001\002" +
    "\000\076\002\uffab\007\uffab\011\uffab\014\uffab\015\uffab\016" +
    "\uffab\020\uffab\026\uffab\030\uffab\031\uffab\033\uffab\034\uffab" +
    "\042\uffab\043\uffab\044\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\064\uffab\066\uffab\070\uffab\072\uffab\001\002\000" +
    "\076\002\uffa4\007\uffa4\011\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\020\uffa4\026\uffa4\030\uffa4\031\uffa4\033\uffa4\034\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\064\uffa4\066\uffa4\070\uffa4\072\uffa4\001\002\000\030" +
    "\004\uff6f\006\uff6f\017\uff6f\035\uff6f\036\uff6f\045\uff6f\046" +
    "\uff6f\047\uff6f\050\uff6f\065\uff6f\073\uff6f\001\002\000\076" +
    "\002\uffb0\007\uffb0\011\uffb0\014\uffb0\015\uffb0\016\uffb0\020" +
    "\uffb0\026\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\066\uffb0\070\uffb0\072\uffb0\001\002\000\076\002" +
    "\uff69\007\uff69\011\uff69\014\uff69\015\uff69\016\uff69\020\uff69" +
    "\026\uff69\030\uff69\031\uff69\033\uff69\034\uff69\042\uff69\043" +
    "\uff69\044\uff69\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69" +
    "\056\uff69\057\uff69\060\uff69\061\uff69\062\uff69\063\uff69\064" +
    "\uff69\066\uff69\070\uff69\072\uff69\001\002\000\104\002\uff93" +
    "\007\uff93\011\uff93\014\uff93\015\uff93\016\uff93\020\uff93\026" +
    "\uff93\030\uff93\031\uff93\032\156\033\uff93\034\uff93\042\uff93" +
    "\043\uff93\044\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055" +
    "\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93" +
    "\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\072\uff93\001" +
    "\002\000\076\002\uff68\007\uff68\011\uff68\014\uff68\015\uff68" +
    "\016\uff68\020\uff68\026\uff68\030\uff68\031\uff68\033\uff68\034" +
    "\uff68\042\uff68\043\uff68\044\uff68\051\uff68\052\uff68\053\uff68" +
    "\054\uff68\055\uff68\056\uff68\057\uff68\060\uff68\061\uff68\062" +
    "\uff68\063\uff68\064\uff68\066\uff68\070\uff68\072\uff68\001\002" +
    "\000\076\002\uffb1\007\uffb1\011\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\020\uffb1\026\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\063\uffb1\064\uffb1\066\uffb1\070\uffb1\072\uffb1\001\002\000" +
    "\076\002\uffa1\007\uffa1\011\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\020\uffa1\026\uffa1\030\uffa1\031\uffa1\033\uffa1\034\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\066\uffa1\070\uffa1\072\uffa1\001\002\000\100" +
    "\002\uffad\007\uffad\011\uffad\014\uffad\015\uffad\016\uffad\020" +
    "\uffad\026\uffad\030\uffad\031\uffad\032\156\033\uffad\034\uffad" +
    "\042\uffad\043\uffad\044\uffad\051\uffad\052\uffad\053\uffad\054" +
    "\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad" +
    "\063\uffad\064\uffad\066\uffad\070\uffad\072\uffad\001\002\000" +
    "\014\002\ufff5\011\ufff5\016\ufff5\030\ufff5\031\ufff5\001\002" +
    "\000\076\002\uffa0\007\uffa0\011\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\020\uffa0\026\uffa0\030\uffa0\031\uffa0\033\uffa0\034\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0" +
    "\063\uffa0\064\uffa0\066\uffa0\070\uffa0\072\uffa0\001\002\000" +
    "\076\002\uffac\007\uffac\011\uffac\014\uffac\015\uffac\016\uffac" +
    "\020\uffac\026\uffac\030\uffac\031\uffac\033\uffac\034\uffac\042" +
    "\uffac\043\uffac\044\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063" +
    "\uffac\064\uffac\066\uffac\070\uffac\072\uffac\001\002\000\102" +
    "\002\uff81\007\uff81\011\uff81\014\uff81\015\uff81\016\uff81\020" +
    "\uff81\026\uff81\030\uff81\031\uff81\033\uff81\034\uff81\042\uff81" +
    "\043\uff81\044\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055" +
    "\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063\uff81" +
    "\064\uff81\065\uff81\066\uff81\067\uff81\070\uff81\072\uff81\001" +
    "\002\000\102\002\uff94\007\uff94\011\uff94\014\uff94\015\uff94" +
    "\016\uff94\020\uff94\026\uff94\030\uff94\031\uff94\033\uff94\034" +
    "\uff94\042\uff94\043\uff94\044\uff94\051\uff94\052\uff94\053\uff94" +
    "\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062" +
    "\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94" +
    "\072\uff94\001\002\000\102\002\uff91\007\uff91\011\uff91\014" +
    "\uff91\015\uff91\016\uff91\020\uff91\026\uff91\030\uff91\031\uff91" +
    "\033\uff91\034\uff91\042\uff91\043\uff91\044\uff91\051\uff91\052" +
    "\uff91\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91\060\uff91" +
    "\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067" +
    "\163\070\uff91\072\uff91\001\002\000\100\002\uff92\007\uff92" +
    "\011\uff92\014\uff92\015\uff92\016\uff92\020\uff92\026\uff92\030" +
    "\uff92\031\uff92\033\uff92\034\uff92\042\uff92\043\uff92\044\uff92" +
    "\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057" +
    "\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92" +
    "\066\uff92\070\uff92\072\uff92\001\002\000\100\002\uff8f\007" +
    "\uff8f\011\uff8f\014\uff8f\015\uff8f\016\uff8f\020\uff8f\026\uff8f" +
    "\030\uff8f\031\uff8f\033\uff8f\034\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f" +
    "\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065" +
    "\175\066\uff8f\070\uff8f\072\uff8f\001\002\000\034\004\152" +
    "\006\154\017\126\025\122\035\125\036\142\045\063\046" +
    "\064\047\145\050\147\053\143\065\135\073\134\001\002" +
    "\000\004\070\173\001\002\000\010\042\170\066\uff7d\070" +
    "\uff7d\001\002\000\010\042\170\066\uff7d\070\uff7d\001\002" +
    "\000\006\066\uff80\070\uff80\001\002\000\034\004\152\006" +
    "\154\017\126\025\122\035\125\036\142\045\063\046\064" +
    "\047\145\050\147\053\143\065\135\073\134\001\002\000" +
    "\010\042\uff7f\066\uff7f\070\uff7f\001\002\000\006\066\uff7e" +
    "\070\uff7e\001\002\000\100\002\uff8e\007\uff8e\011\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\020\uff8e\026\uff8e\030\uff8e\031\uff8e" +
    "\033\uff8e\034\uff8e\042\uff8e\043\uff8e\044\uff8e\051\uff8e\052" +
    "\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e" +
    "\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\070" +
    "\uff8e\072\uff8e\001\002\000\076\002\uff90\007\uff90\011\uff90" +
    "\014\uff90\015\uff90\016\uff90\020\uff90\026\uff90\030\uff90\031" +
    "\uff90\033\uff90\034\uff90\042\uff90\043\uff90\044\uff90\051\uff90" +
    "\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060" +
    "\uff90\061\uff90\062\uff90\063\uff90\064\uff90\066\uff90\070\uff90" +
    "\072\uff90\001\002\000\036\004\152\006\154\017\126\025" +
    "\122\035\125\036\142\045\063\046\201\047\145\050\147" +
    "\053\143\065\135\066\uffa6\073\134\001\002\000\076\002" +
    "\uff95\007\uff95\011\uff95\014\uff95\015\uff95\016\uff95\020\uff95" +
    "\026\uff95\030\uff95\031\uff95\033\uff95\034\uff95\042\uff95\043" +
    "\uff95\044\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95" +
    "\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064" +
    "\uff95\066\uff95\070\uff95\072\uff95\001\002\000\004\066\uffa7" +
    "\001\002\000\036\004\152\006\154\017\126\025\122\035" +
    "\125\036\142\045\063\046\064\047\145\050\147\053\143" +
    "\065\135\066\uffa6\073\134\001\002\000\066\007\uff82\020" +
    "\uff82\026\uff82\032\uff82\034\uff82\037\uff8a\040\uff8a\041\070" +
    "\042\207\043\uff82\044\uff8a\051\uff82\052\uff82\053\uff82\054" +
    "\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82" +
    "\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\001\002\000" +
    "\036\004\uffa8\006\uffa8\017\uffa8\025\uffa8\035\uffa8\036\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\053\uffa8\065\uffa8\066" +
    "\uffa8\073\uffa8\001\002\000\004\066\204\001\002\000\076" +
    "\002\uffa9\007\uffa9\011\uffa9\014\uffa9\015\uffa9\016\uffa9\020" +
    "\uffa9\026\uffa9\030\uffa9\031\uffa9\033\uffa9\034\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055" +
    "\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\066\uffa9\070\uffa9\072\uffa9\001\002\000\010\037" +
    "\213\040\uff88\044\uff88\001\002\000\012\037\uff8a\040\uff8a" +
    "\042\207\044\uff8a\001\002\000\004\046\210\001\002\000" +
    "\012\037\uff8c\040\uff8c\042\uff8c\044\uff8c\001\002\000\010" +
    "\037\uff8b\040\uff8b\044\uff8b\001\002\000\006\040\215\044" +
    "\uff86\001\002\000\004\046\064\001\002\000\006\040\uff89" +
    "\044\uff89\001\002\000\004\046\220\001\002\000\004\044" +
    "\217\001\002\000\036\004\uff8d\006\uff8d\017\uff8d\025\uff8d" +
    "\035\uff8d\036\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\053" +
    "\uff8d\065\uff8d\066\uff8d\073\uff8d\001\002\000\004\040\221" +
    "\001\002\000\006\045\063\046\064\001\002\000\004\052" +
    "\223\001\002\000\034\004\152\006\154\017\126\025\122" +
    "\035\125\036\142\045\063\046\064\047\145\050\147\053" +
    "\143\065\135\073\134\001\002\000\004\044\uff87\001\002" +
    "\000\004\066\226\001\002\000\076\002\uffaa\007\uffaa\011" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\020\uffaa\026\uffaa\030\uffaa" +
    "\031\uffaa\033\uffaa\034\uffaa\042\uffaa\043\uffaa\044\uffaa\051" +
    "\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\066\uffaa\070" +
    "\uffaa\072\uffaa\001\002\000\074\002\uffb8\007\uffb8\011\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\020\uffb8\026\uffb8\030\uffb8\031" +
    "\uffb8\033\uffb8\034\uffb8\042\uffb8\044\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\064\uffb8\066\uffb8\070\uffb8\072\uffb8" +
    "\001\002\000\004\066\231\001\002\000\076\002\uffae\007" +
    "\uffae\011\uffae\014\uffae\015\uffae\016\uffae\020\uffae\026\uffae" +
    "\030\uffae\031\uffae\033\uffae\034\uffae\042\uffae\043\uffae\044" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\066" +
    "\uffae\070\uffae\072\uffae\001\002\000\062\002\uffc2\007\uffc2" +
    "\011\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\026\uffc2\030" +
    "\uffc2\031\uffc2\033\uffc2\034\uffc2\042\uffc2\044\uffc2\051\uffc2" +
    "\052\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\066" +
    "\uffc2\070\uffc2\072\uffc2\001\002\000\070\002\uffbf\007\uffbf" +
    "\011\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\026\uffbf\030" +
    "\uffbf\031\uffbf\033\uffbf\034\uffbf\042\uffbf\044\uffbf\051\uffbf" +
    "\052\uffbf\053\236\056\234\057\uffbf\060\uffbf\061\uffbf\062" +
    "\uffbf\063\uffbf\064\235\066\uffbf\070\uffbf\072\uffbf\001\002" +
    "\000\034\004\uff73\006\uff73\017\uff73\025\uff73\035\uff73\036" +
    "\uff73\045\uff73\046\uff73\047\uff73\050\uff73\053\uff73\065\uff73" +
    "\073\uff73\001\002\000\034\004\uff75\006\uff75\017\uff75\025" +
    "\uff75\035\uff75\036\uff75\045\uff75\046\uff75\047\uff75\050\uff75" +
    "\053\uff75\065\uff75\073\uff75\001\002\000\034\004\uff74\006" +
    "\uff74\017\uff74\025\uff74\035\uff74\036\uff74\045\uff74\046\uff74" +
    "\047\uff74\050\uff74\053\uff74\065\uff74\073\uff74\001\002\000" +
    "\034\004\152\006\154\017\126\025\122\035\125\036\142" +
    "\045\063\046\064\047\145\050\147\053\143\065\135\073" +
    "\134\001\002\000\070\002\uffc1\007\uffc1\011\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\020\uffc1\026\uffc1\030\uffc1\031\uffc1\033" +
    "\uffc1\034\uffc1\042\uffc1\044\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\066\uffc1\070\uffc1\072\uffc1\001\002\000\062\002\uffc0" +
    "\007\uffc0\011\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0\026" +
    "\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0\042\uffc0\044\uffc0" +
    "\051\uffc0\052\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063" +
    "\uffc0\066\uffc0\070\uffc0\072\uffc0\001\002\000\034\004\152" +
    "\006\154\017\126\025\122\035\125\036\142\045\063\046" +
    "\064\047\145\050\147\053\143\065\135\073\134\001\002" +
    "\000\036\002\uffc9\011\uffc9\014\uffc9\015\uffc9\016\uffc9\030" +
    "\uffc9\031\uffc9\033\uffc9\042\uffc9\044\uffc9\051\uffc9\066\uffc9" +
    "\070\uffc9\072\uffc9\001\002\000\034\004\uff6a\006\uff6a\017" +
    "\uff6a\025\uff6a\035\uff6a\036\uff6a\045\uff6a\046\uff6a\047\uff6a" +
    "\050\uff6a\053\uff6a\065\uff6a\073\uff6a\001\002\000\034\004" +
    "\uff6d\006\uff6d\017\uff6d\025\uff6d\035\uff6d\036\uff6d\045\uff6d" +
    "\046\uff6d\047\uff6d\050\uff6d\053\uff6d\065\uff6d\073\uff6d\001" +
    "\002\000\046\002\uffc6\007\245\011\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\020\244\026\247\030\uffc6\031\uffc6\033\uffc6\034" +
    "\250\042\uffc6\044\uffc6\051\uffc6\066\uffc6\070\uffc6\072\uffc6" +
    "\001\002\000\034\004\uff6c\006\uff6c\017\uff6c\025\uff6c\035" +
    "\uff6c\036\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\053\uff6c" +
    "\065\uff6c\073\uff6c\001\002\000\034\004\uff6b\006\uff6b\017" +
    "\uff6b\025\uff6b\035\uff6b\036\uff6b\045\uff6b\046\uff6b\047\uff6b" +
    "\050\uff6b\053\uff6b\065\uff6b\073\uff6b\001\002\000\036\002" +
    "\uffc7\011\uffc7\014\uffc7\015\uffc7\016\uffc7\030\uffc7\031\uffc7" +
    "\033\uffc7\042\uffc7\044\uffc7\051\uffc7\066\uffc7\070\uffc7\072" +
    "\uffc7\001\002\000\046\002\uffc8\007\uffc8\011\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\020\uffc8\026\uffc8\030\uffc8\031\uffc8\033" +
    "\uffc8\034\uffc8\042\uffc8\044\uffc8\051\uffc8\066\uffc8\070\uffc8" +
    "\072\uffc8\001\002\000\034\004\uff70\006\uff70\017\uff70\025" +
    "\uff70\035\uff70\036\uff70\045\uff70\046\uff70\047\uff70\050\uff70" +
    "\053\uff70\065\uff70\073\uff70\001\002\000\070\002\uffbe\007" +
    "\uffbe\011\uffbe\014\uffbe\015\uffbe\016\uffbe\020\uffbe\026\uffbe" +
    "\030\uffbe\031\uffbe\033\uffbe\034\uffbe\042\uffbe\044\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\066\uffbe\070\uffbe\072\uffbe\001" +
    "\002\000\074\002\uffbb\007\uffbb\011\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\020\uffbb\026\uffbb\030\uffbb\031\uffbb\033\uffbb\034" +
    "\uffbb\042\uffbb\044\uffbb\051\uffbb\052\uffbb\053\uffbb\054\260" +
    "\055\257\056\253\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\064\uffbb\066\uffbb\070\uffbb\072\uffbb\001\002\000\034" +
    "\004\152\006\154\017\126\025\122\035\125\036\142\045" +
    "\063\046\064\047\145\050\147\053\143\065\135\073\134" +
    "\001\002\000\034\004\uff71\006\uff71\017\uff71\025\uff71\035" +
    "\uff71\036\uff71\045\uff71\046\uff71\047\uff71\050\uff71\053\uff71" +
    "\065\uff71\073\uff71\001\002\000\034\004\uff72\006\uff72\017" +
    "\uff72\025\uff72\035\uff72\036\uff72\045\uff72\046\uff72\047\uff72" +
    "\050\uff72\053\uff72\065\uff72\073\uff72\001\002\000\074\002" +
    "\uffbd\007\uffbd\011\uffbd\014\uffbd\015\uffbd\016\uffbd\020\uffbd" +
    "\026\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd\042\uffbd\044" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\066" +
    "\uffbd\070\uffbd\072\uffbd\001\002\000\070\002\uffbc\007\uffbc" +
    "\011\uffbc\014\uffbc\015\uffbc\016\uffbc\020\uffbc\026\uffbc\030" +
    "\uffbc\031\uffbc\033\uffbc\034\uffbc\042\uffbc\044\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\066\uffbc\070\uffbc\072\uffbc\001\002" +
    "\000\034\004\uff7b\006\uff7b\017\uff7b\025\uff7b\035\uff7b\036" +
    "\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\053\uff7b\065\uff7b" +
    "\073\uff7b\001\002\000\034\004\uff77\006\uff77\017\uff77\025" +
    "\uff77\035\uff77\036\uff77\045\uff77\046\uff77\047\uff77\050\uff77" +
    "\053\uff77\065\uff77\073\uff77\001\002\000\034\004\uff79\006" +
    "\uff79\017\uff79\025\uff79\035\uff79\036\uff79\045\uff79\046\uff79" +
    "\047\uff79\050\uff79\053\uff79\065\uff79\073\uff79\001\002\000" +
    "\034\004\uff76\006\uff76\017\uff76\025\uff76\035\uff76\036\uff76" +
    "\045\uff76\046\uff76\047\uff76\050\uff76\053\uff76\065\uff76\073" +
    "\uff76\001\002\000\046\002\uffc5\007\uffc5\011\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\020\uffc5\026\uffc5\030\uffc5\031\uffc5\033" +
    "\uffc5\034\uffc5\042\uffc5\044\uffc5\051\uffc5\066\uffc5\070\uffc5" +
    "\072\uffc5\001\002\000\034\004\uff7a\006\uff7a\017\uff7a\025" +
    "\uff7a\035\uff7a\036\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a" +
    "\053\uff7a\065\uff7a\073\uff7a\001\002\000\034\004\uff78\006" +
    "\uff78\017\uff78\025\uff78\035\uff78\036\uff78\045\uff78\046\uff78" +
    "\047\uff78\050\uff78\053\uff78\065\uff78\073\uff78\001\002\000" +
    "\034\004\152\006\154\017\126\025\122\035\125\036\142" +
    "\045\063\046\064\047\145\050\147\053\143\065\135\073" +
    "\134\001\002\000\046\002\uffc4\007\uffc4\011\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\020\uffc4\026\uffc4\030\uffc4\031\uffc4\033" +
    "\uffc4\034\uffc4\042\uffc4\044\uffc4\051\uffc4\066\uffc4\070\uffc4" +
    "\072\uffc4\001\002\000\004\033\275\001\002\000\034\004" +
    "\152\006\154\017\126\025\122\035\125\036\142\045\063" +
    "\046\064\047\145\050\147\053\143\065\135\073\134\001" +
    "\002\000\004\014\277\001\002\000\034\004\152\006\154" +
    "\017\126\025\122\035\125\036\142\045\063\046\064\047" +
    "\145\050\147\053\143\065\135\073\134\001\002\000\004" +
    "\015\301\001\002\000\076\002\uffe8\007\uffe8\011\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\020\uffe8\026\uffe8\030\uffe8\031\uffe8" +
    "\033\uffe8\034\uffe8\042\uffe8\043\uffe8\044\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\064\uffe8\066\uffe8\070\uffe8\072" +
    "\uffe8\001\002\000\036\004\152\006\154\017\126\025\122" +
    "\035\125\036\142\045\063\046\064\047\145\050\147\053" +
    "\143\065\135\072\uff99\073\134\001\002\000\010\042\uff96" +
    "\051\315\072\uff96\001\002\000\004\072\313\001\002\000" +
    "\006\042\307\072\uff9b\001\002\000\004\072\uff9a\001\002" +
    "\000\034\004\152\006\154\017\126\025\122\035\125\036" +
    "\142\045\063\046\064\047\145\050\147\053\143\065\135" +
    "\073\134\001\002\000\006\042\307\072\uff9b\001\002\000" +
    "\004\072\uff9c\001\002\000\006\042\uff9d\072\uff9d\001\002" +
    "\000\076\002\uff9e\007\uff9e\011\uff9e\014\uff9e\015\uff9e\016" +
    "\uff9e\020\uff9e\026\uff9e\030\uff9e\031\uff9e\033\uff9e\034\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\066\uff9e\070\uff9e\072\uff9e\001\002\000" +
    "\006\042\uff98\072\uff98\001\002\000\004\051\316\001\002" +
    "\000\034\004\152\006\154\017\126\025\122\035\125\036" +
    "\142\045\063\046\064\047\145\050\147\053\143\065\135" +
    "\073\134\001\002\000\006\042\uff97\072\uff97\001\002\000" +
    "\004\046\uffb6\001\002\000\076\002\uffb2\007\uffb2\011\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\020\uffb2\026\uffb2\030\uffb2\031" +
    "\uffb2\033\uffb2\034\uffb2\042\uffb2\043\322\044\uffb2\051\320" +
    "\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\066\uffb2\070\uffb2" +
    "\072\uffb2\001\002\000\004\046\uffb5\001\002\000\004\046" +
    "\064\001\002\000\074\002\uffb7\007\uffb7\011\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\020\uffb7\026\uffb7\030\uffb7\031\uffb7\033" +
    "\uffb7\034\uffb7\042\uffb7\044\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\066\uffb7\070\uffb7\072\uffb7\001\002" +
    "\000\076\002\uffb4\007\uffb4\011\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\020\uffb4\026\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\066\uffb4\070\uffb4\072\uffb4\001\002\000" +
    "\074\002\uffb3\007\uffb3\011\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\020\uffb3\026\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\042" +
    "\uffb3\044\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\066\uffb3\070\uffb3\072\uffb3\001\002\000\014\002\ufff0" +
    "\011\ufff0\016\ufff0\030\113\031\111\001\002\000\010\002" +
    "\ufff2\011\ufff2\016\ufff2\001\002\000\010\002\ufff1\011\ufff1" +
    "\016\ufff1\001\002\000\006\011\012\016\ufff7\001\002\000" +
    "\006\011\ufffa\016\ufffa\001\002\000\004\016\335\001\002" +
    "\000\006\002\ufffe\027\ufffe\001\002\000\006\002\ufff8\016" +
    "\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\020\003\013\005\006\006\004\007\010\052" +
    "\012\053\003\055\007\001\001\000\002\001\001\000\010" +
    "\006\004\007\010\055\335\001\001\000\006\004\331\040" +
    "\332\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\056\107\057\106\061\111\001\001\000\006\011\022\063" +
    "\020\001\001\000\006\052\015\054\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\052\015\054\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\051\066" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\057\015\064\017" +
    "\061\034\056\040\055\043\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\121\066\122\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\121\066\122\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\073\040" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\076\015\064\034\056\040\055\043\060\001\001\000" +
    "\006\067\077\070\100\001\001\000\006\067\077\070\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\104\015\064\034\056\040\055\043\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\056" +
    "\107\057\326\062\327\001\001\000\004\060\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\016\152\020\136" +
    "\021\122\022\131\023\126\024\132\026\127\027\116\030" +
    "\120\031\130\033\143\035\147\040\145\043\123\047\137" +
    "\051\117\100\135\125\150\126\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\101\322\102\320\103\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\020\273\021\122\022\131" +
    "\023\126\024\132\026\127\027\116\030\120\031\130\033" +
    "\143\035\147\040\145\043\123\047\137\051\117\100\135" +
    "\125\150\126\140\001\001\000\006\044\271\073\266\001" +
    "\001\000\010\046\255\076\254\077\253\001\001\000\002" +
    "\001\001\000\010\050\241\071\245\072\242\001\001\000" +
    "\010\045\236\074\232\075\231\001\001\000\002\001\001" +
    "\000\046\020\227\021\122\022\131\023\126\024\132\026" +
    "\127\027\116\030\120\031\130\033\143\035\147\040\145" +
    "\043\123\047\137\051\117\100\135\125\150\126\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\027\226" +
    "\030\120\031\130\033\143\035\147\040\145\043\123\051" +
    "\117\125\150\126\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\156\112\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\160\113" +
    "\161\001\001\000\002\001\001\000\006\032\173\114\175" +
    "\001\001\000\050\020\164\021\122\022\131\023\126\024" +
    "\132\026\127\027\116\030\120\031\130\033\143\035\147" +
    "\040\145\042\163\043\123\047\137\051\117\100\135\125" +
    "\150\126\140\001\001\000\002\001\001\000\006\123\165" +
    "\124\166\001\001\000\006\123\165\124\171\001\001\000" +
    "\002\001\001\000\046\020\170\021\122\022\131\023\126" +
    "\024\132\026\127\027\116\030\120\031\130\033\143\035" +
    "\147\040\145\043\123\047\137\051\117\100\135\125\150" +
    "\126\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\020\164\021\122" +
    "\022\131\023\126\024\132\026\127\027\116\030\120\031" +
    "\130\033\143\035\147\037\201\040\145\042\176\043\123" +
    "\047\137\051\117\100\135\104\177\105\202\125\150\126" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\020\164\021\122\022\131\023\126\024\132\026\127\027" +
    "\116\030\120\031\130\033\143\035\147\040\145\042\176" +
    "\043\123\047\137\051\117\100\135\105\224\125\150\126" +
    "\140\001\001\000\012\115\205\116\204\121\066\122\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\117\211\001\001\000\006\115\205\116\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\120\215\001\001\000\006\034\213\040\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\221" +
    "\015\064\034\056\040\055\043\060\001\001\000\002\001" +
    "\001\000\046\020\223\021\122\022\131\023\126\024\132" +
    "\026\127\027\116\030\120\031\130\033\143\035\147\040" +
    "\145\043\123\047\137\051\117\100\135\125\150\126\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\045\236\074\232\075\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\024\237\026\127\027\116\030\120\031\130\033" +
    "\143\035\147\040\145\043\123\047\137\051\117\100\135" +
    "\125\150\126\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\022\251\023\126\024\132\026\127\027\116" +
    "\030\120\031\130\033\143\035\147\040\145\043\123\047" +
    "\137\051\117\100\135\125\150\126\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\050" +
    "\241\071\245\072\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\255\076\254\077\261" +
    "\001\001\000\034\026\260\027\116\030\120\031\130\033" +
    "\143\035\147\040\145\043\123\047\137\051\117\100\135" +
    "\125\150\126\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\023\272\024\132\026\127\027\116\030\120\031\130\033" +
    "\143\035\147\040\145\043\123\047\137\051\117\100\135" +
    "\125\150\126\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\020\275\021\122\022\131\023\126\024\132" +
    "\026\127\027\116\030\120\031\130\033\143\035\147\040" +
    "\145\043\123\047\137\051\117\100\135\125\150\126\140" +
    "\001\001\000\002\001\001\000\046\020\277\021\122\022" +
    "\131\023\126\024\132\026\127\027\116\030\120\031\130" +
    "\033\143\035\147\040\145\043\123\047\137\051\117\100" +
    "\135\125\150\126\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\020\302\021\122\022\131\023\126\024" +
    "\132\026\127\027\116\030\120\031\130\033\143\035\147" +
    "\036\304\040\145\043\123\047\137\051\117\100\135\107" +
    "\303\125\150\126\140\001\001\000\004\111\313\001\001" +
    "\000\002\001\001\000\006\106\307\110\305\001\001\000" +
    "\002\001\001\000\050\020\302\021\122\022\131\023\126" +
    "\024\132\026\127\027\116\030\120\031\130\033\143\035" +
    "\147\036\311\040\145\043\123\047\137\051\117\100\135" +
    "\125\150\126\140\001\001\000\006\106\307\110\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\020\316\021" +
    "\122\022\131\023\126\024\132\026\127\027\116\030\120" +
    "\031\130\033\143\035\147\040\145\043\123\047\137\051" +
    "\117\100\135\125\150\126\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\101\322\102\320\103\325\001" +
    "\001\000\002\001\001\000\006\031\324\040\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\056\107\057\326\062\330\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\333\006\004\007\010\055" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 	
				public AnalisadorSemantico semantico = new AnalisadorSemantico();
				
				public void report_error(String message, Object info){
					Symbol sym = (Symbol) info;
					throw new Error("Syntax ERROR in '"+sym.value+"' at line: "+(sym.left+1));
			  	}
		 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // number ::= FLOAT_LITERAL 
            {
              Object RESULT = null;
		int numbFloatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numbFloatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object numbFloat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(numbFloat, "Float"); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // number ::= INTEGER_LITERAL 
            {
              Object RESULT = null;
		int numbIntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numbIntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object numbInt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(numbInt, "Integer"); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // logicalOperator ::= IMPLIES 
            {
              Object RESULT = null;
		 RESULT = "implies"; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*logicalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // logicalOperator ::= XOR 
            {
              Object RESULT = null;
		 RESULT = "xor"; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*logicalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // logicalOperator ::= OR 
            {
              Object RESULT = null;
		 RESULT = "or"; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*logicalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // logicalOperator ::= AND 
            {
              Object RESULT = null;
		 RESULT = "and"; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*logicalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // unaryOperator ::= NOT 
            {
              Object RESULT = null;
		 RESULT = "not"; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*unaryOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // unaryOperator ::= MINUS 
            {
              Object RESULT = null;
		 RESULT = "-"; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*unaryOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // multiplyOperator ::= MOD 
            {
              Object RESULT = null;
		 RESULT = "%"; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*multiplyOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // multiplyOperator ::= DIVIDE 
            {
              Object RESULT = null;
		 RESULT = "/"; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*multiplyOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // multiplyOperator ::= MULTIPLY 
            {
              Object RESULT = null;
		 RESULT = "*"; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*multiplyOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // addOperator ::= MOD 
            {
              Object RESULT = null;
		 RESULT = "%"; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*addOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // addOperator ::= MINUS 
            {
              Object RESULT = null;
		 RESULT = "-"; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*addOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // addOperator ::= PLUS 
            {
              Object RESULT = null;
		 RESULT = "+"; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*addOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // relationalOperator ::= NOTEQ 
            {
              Object RESULT = null;
		 RESULT = "<>"; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // relationalOperator ::= LESSEQTHAN 
            {
              Object RESULT = null;
		 RESULT = "<="; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // relationalOperator ::= GREATEREQTHAN 
            {
              Object RESULT = null;
		 RESULT = ">="; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // relationalOperator ::= LESSTHAN 
            {
              Object RESULT = null;
		 RESULT = "<"; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // relationalOperator ::= GREATERTHAN 
            {
              Object RESULT = null;
		 RESULT = ">"; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // relationalOperator ::= EQ 
            {
              Object RESULT = null;
		 RESULT = "="; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relationalOperator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // collectionKind ::= COLLECTION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*collectionKind*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // actualParameterListAuxLoop ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(82/*actualParameterListAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // actualParameterListAuxLoop ::= actualParameterListAux actualParameterListAuxLoop 
            {
              Object RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object aloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado; 
																							if(aloop == null) {
																								resultado = (Node) a1;
																							}
																							else{
																								resultado = new Node();
																								resultado.addElement((Node)a1);
																								resultado.addAllElements(((Node) aloop).getElements());}
																							RESULT = resultado; 
              CUP$parser$result = new java_cup.runtime.Symbol(82/*actualParameterListAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // actualParameterListAux ::= VIRGULA expression 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (Node)e1;
              CUP$parser$result = new java_cup.runtime.Symbol(81/*actualParameterListAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // actualParameterList ::= expression actualParameterListAuxLoop 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object aloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Node resultado;
																		if(aloop == null){
																			resultado = (Node)e1;
																		}
																		else{
																			resultado = new Node();
																			resultado.addElement((Node)e1);
																			resultado.addAllElements(((Node) aloop).getElements());}
																			RESULT = resultado; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*actualParameterList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // timeExpression ::= ATPRE 
            {
              Object RESULT = null;
		int atPreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atPreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object atPre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.semantico.checkStereotype("@pre",atPreleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*timeExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // pathNameAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(80/*pathNameAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // pathNameAuxLoop ::= pathNameAux pathNameAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(80/*pathNameAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // pathNameAux ::= DDOUBLEPOINT IDENTIFIER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(79/*pathNameAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // pathName ::= IDENTIFIER pathNameAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*pathName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // declaratorAux3 ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(78/*declaratorAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // declaratorAux3 ::= POINT_VIRGULA IDENTIFIER POINT_VIRGULA typeSpecifier EQ expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(78/*declaratorAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // declaratorAux2 ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(77/*declaratorAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declaratorAux2 ::= DOUBLEPOINT simpleTypeSpecifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(77/*declaratorAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // declaratorAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(76/*declaratorAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // declaratorAuxLoop ::= declaratorAux declaratorAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(76/*declaratorAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declaratorAux ::= VIRGULA IDENTIFIER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(75/*declaratorAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declarator ::= IDENTIFIER declaratorAuxLoop declaratorAux2 declaratorAux3 PIPELINE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // qualifiers ::= LEFTBRACK actualParameterList RIGHTBRACK 
            {
              Object RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (Node)a1; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*qualifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // propertyCallAux3 ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(74/*propertyCallAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // propertyCallAux3 ::= propertyCallParameters 
            {
              Object RESULT = null;
		int prop1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int prop1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object prop1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = prop1; 
              CUP$parser$result = new java_cup.runtime.Symbol(74/*propertyCallAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // propertyCallAux2 ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(73/*propertyCallAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // propertyCallAux2 ::= qualifiers 
            {
              Object RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object q1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = q1; 
              CUP$parser$result = new java_cup.runtime.Symbol(73/*propertyCallAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // propertyCallAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*propertyCallAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // propertyCallAux ::= timeExpression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*propertyCallAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // propertyCall ::= pathName propertyCallAux propertyCallAux2 propertyCallAux3 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*propertyCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // collectionItemAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(71/*collectionItemAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // collectionItemAux ::= POINT POINT expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(71/*collectionItemAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // collectionItem ::= expression collectionItemAux 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*collectionItem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // literalCollectionAux2 ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(69/*literalCollectionAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // literalCollectionAux2 ::= collectionItem literalCollectionAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(69/*literalCollectionAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // literalCollectionAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(70/*literalCollectionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // literalCollectionAuxLoop ::= literalCollectionAux literalCollectionAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(70/*literalCollectionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literalCollectionAux ::= VIRGULA collectionItem 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(68/*literalCollectionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literalCollection ::= collectionKind LEFTBRACKET literalCollectionAux2 RIGHTBRACKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*literalCollection*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // simpleTypeSpecifier ::= pathName 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*simpleTypeSpecifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal ::= RESULT 
            {
              Object RESULT = null;
		int litResultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litResultright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object litResult = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	parser.semantico.checkStereotype("result",litResultleft); 
					RESULT = new Node("result",parser.semantico.getContextReturn());
				
              CUP$parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // literal ::= booleanLiteral 
            {
              Object RESULT = null;
		int litBoolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litBoolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object litBool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = litBool; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= number 
            {
              Object RESULT = null;
		int litNumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litNumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object litNum = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = litNum; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= STRING_LITERAL 
            {
              Object RESULT = null;
		int litStringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int litStringright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object litString = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(litString,"String"); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // booleanLiteral ::= FALSE 
            {
              Object RESULT = null;
		int boolFalseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int boolFalseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object boolFalse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(boolFalse,"Boolean"); 
              CUP$parser$result = new java_cup.runtime.Symbol(83/*booleanLiteral*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // booleanLiteral ::= TRUE 
            {
              Object RESULT = null;
		int boolTrueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int boolTrueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object boolTrue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Node(boolTrue,"Boolean"); 
              CUP$parser$result = new java_cup.runtime.Symbol(83/*booleanLiteral*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // propertyCallParametersAux2 ::= 
            {
              Object RESULT = null;
		 Node resultado = new Node();
									resultado.setType("void");
									RESULT = resultado; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*propertyCallParametersAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // propertyCallParametersAux2 ::= actualParameterList 
            {
              Object RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (Node)a1;
              CUP$parser$result = new java_cup.runtime.Symbol(67/*propertyCallParametersAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // propertyCallParametersAux ::= declarator 
            {
              Object RESULT = null;
		 System.out.println("Tratar declarator"); 
              CUP$parser$result = new java_cup.runtime.Symbol(66/*propertyCallParametersAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // propertyCallParameters ::= LEFTPARENTHESIS propertyCallParametersAux2 RIGHTPARENTHESIS 
            {
              Object RESULT = null;
		int prop2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prop2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prop2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = prop2;
              CUP$parser$result = new java_cup.runtime.Symbol(24/*propertyCallParameters*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // propertyCallParameters ::= LEFTPARENTHESIS propertyCallParametersAux propertyCallParametersAux2 RIGHTPARENTHESIS 
            {
              Object RESULT = null;
		int prop1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prop1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prop1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Tratar declarator"); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*propertyCallParameters*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // primaryExpression ::= ifExpression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primaryExpression ::= SELF timeExpression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primaryExpression ::= SELF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primaryExpression ::= LEFTPARENTHESIS expression RIGHTPARENTHESIS 
            {
              Object RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							RESULT = exp;
						
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // primaryExpression ::= propertyCall 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // primaryExpression ::= literal 
            {
              Object RESULT = null;
		int lit1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lit1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object lit1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
							RESULT = lit1; 
						
              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // primaryExpression ::= literalCollection 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*primaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // postfixExpressionAux2Loop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(65/*postfixExpressionAux2Loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // postfixExpressionAux2Loop ::= postfixExpressionAux2 postfixExpressionAux2Loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(65/*postfixExpressionAux2Loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // postfixExpressionAux2 ::= postfixExpressionAux propertyCall 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(64/*postfixExpressionAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // postfixExpressionAux ::= ARROW 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(63/*postfixExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // postfixExpressionAux ::= POINT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(63/*postfixExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // postfixExpression ::= primaryExpression postfixExpressionAux2Loop 
            {
              Object RESULT = null;
		int primexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int primexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object primexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int postfexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postfexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object postfexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						if(postfexp==null){
							RESULT = primexp;
						}else{
							//TO DO => Checagem com propertycall 
						}
					
              CUP$parser$result = new java_cup.runtime.Symbol(21/*postfixExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unaryExpressionAux ::= unaryOperator postfixExpression 
            {
              Object RESULT = null;
		int unopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int unopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object unop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int postfexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postfexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object postfexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = postfexp;
						
              CUP$parser$result = new java_cup.runtime.Symbol(62/*unaryExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unaryExpression ::= postfixExpression 
            {
              Object RESULT = null;
		int postfexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postfexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object postfexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = postfexp;
						
              CUP$parser$result = new java_cup.runtime.Symbol(20/*unaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unaryExpression ::= unaryExpressionAux 
            {
              Object RESULT = null;
		int unexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object unexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = unexp;
						
              CUP$parser$result = new java_cup.runtime.Symbol(20/*unaryExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multiplicativeExpressionAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*multiplicativeExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // multiplicativeExpressionAuxLoop ::= multiplicativeExpressionAux multiplicativeExpressionAuxLoop 
            {
              Object RESULT = null;
		int addexpaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addexparight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addexpa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object addexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
										RESULT  = parser.semantico.checkMultiplicativeExpressionAuxLoop(addexpaloop, addexpa, addexpaloopleft, addexpaleft);
									
              CUP$parser$result = new java_cup.runtime.Symbol(61/*multiplicativeExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // multiplicativeExpressionAux ::= multiplyOperator unaryExpression 
            {
              Object RESULT = null;
		int multopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object multop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int unexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int unexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object unexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
									RESULT  = parser.semantico.checkMultiplicativeExpressionAux(multop, unexp, unexpleft);
								
              CUP$parser$result = new java_cup.runtime.Symbol(60/*multiplicativeExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // multiplicativeExpression ::= unaryExpression multiplicativeExpressionAuxLoop 
            {
              Object RESULT = null;
		int unexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int unexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object unexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int multexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object multexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkMultiplicativeExpression(multexpaloop, unexp, multexpaloopleft, unexpleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(18/*multiplicativeExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // additiveExpressionAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(59/*additiveExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // additiveExpressionAuxLoop ::= additiveExpressionAux additiveExpressionAuxLoop 
            {
              Object RESULT = null;
		int addexpaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addexparight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addexpa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object addexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkAdditiveExpressionAuxLoop(addexpa, addexpaloop, addexpaloopleft, addexpaleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(59/*additiveExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // additiveExpressionAux ::= addOperator multiplicativeExpression 
            {
              Object RESULT = null;
		int addopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multexp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int multexp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object multexp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = parser.semantico.checkAdditiveExpressionAux(addop, multexp2, multexp2left);
						
              CUP$parser$result = new java_cup.runtime.Symbol(58/*additiveExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // additiveExpression ::= multiplicativeExpression additiveExpressionAuxLoop 
            {
              Object RESULT = null;
		int multexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object multexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object addexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = parser.semantico.checkAdditiveExpression(addexpaloop, multexp, addexpaloopleft, multexpleft);
						
              CUP$parser$result = new java_cup.runtime.Symbol(17/*additiveExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relationalExpressionAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(57/*relationalExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relationalExpressionAux ::= relationalOperator additiveExpression 
            {
              Object RESULT = null;
		int relopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object relop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addexp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int addexp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object addexp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkRelationalExpressionAux(addexp2, relop, addexp2left);
							
              CUP$parser$result = new java_cup.runtime.Symbol(57/*relationalExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relationalExpression ::= additiveExpression relationalExpressionAux 
            {
              Object RESULT = null;
		int addexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int addexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object addexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int relexpaux3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int relexpaux3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object relexpaux3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = parser.semantico.checkRelationalExpression(relexpaux3, addexp,addexpleft);
						
              CUP$parser$result = new java_cup.runtime.Symbol(16/*relationalExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // logicalExpressionAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(56/*logicalExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logicalExpressionAuxLoop ::= logicalExpressionAux logicalExpressionAuxLoop 
            {
              Object RESULT = null;
		int logexpaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logexparight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object logexpa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int logexpaloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int logexpaloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object logexpaloop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = parser.semantico.checkLogicalExpressionAuxLoop(logexpa, logexpaloop, logexpaloopleft);
							
              CUP$parser$result = new java_cup.runtime.Symbol(56/*logicalExpressionAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logicalExpressionAux ::= logicalOperator relationalExpression 
            {
              Object RESULT = null;
		int logopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object logop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int relexp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int relexp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object relexp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = parser.semantico.checkLogicalExpressionAux(relexp2, logop, relexp2left);
						
              CUP$parser$result = new java_cup.runtime.Symbol(55/*logicalExpressionAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logicalExpression ::= relationalExpression logicalExpressionAuxLoop 
            {
              Object RESULT = null;
		int relexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object relexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int logexploopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int logexploopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object logexploop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
							RESULT = parser.semantico.checkLogicalExpression(relexp, logexploop, relexpleft, logexploopleft); 
						
              CUP$parser$result = new java_cup.runtime.Symbol(15/*logicalExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= logicalExpression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // returnType ::= VOID 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*returnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // returnType ::= typeSpecifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*returnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // oclExpression ::= expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*oclExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // collectionType ::= collectionKind LEFTPARENTHESIS simpleTypeSpecifier RIGHTPARENTHESIS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*collectionType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // typeSpecifier ::= collectionType 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*typeSpecifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // typeSpecifier ::= simpleTypeSpecifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*typeSpecifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // formalParameterListAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(54/*formalParameterListAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // formalParameterListAuxLoop ::= formalParameterListAux formalParameterListAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(54/*formalParameterListAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // formalParameterListAux ::= VIRGULA IDENTIFIER DOUBLEPOINT typeSpecifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(53/*formalParameterListAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // formalParameterListAux2 ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(52/*formalParameterListAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formalParameterListAux2 ::= IDENTIFIER DOUBLEPOINT typeSpecifier formalParameterListAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(52/*formalParameterListAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // formalParameterList ::= formalParameterListAux2 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*formalParameterList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operationName ::= MOD 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operationName ::= NOTEQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operationName ::= MULTIPLY 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operationName ::= DIVIDE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operationName ::= GREATERTHAN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operationName ::= LESSEQTHAN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operationName ::= AND 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operationName ::= XOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operationName ::= OR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operationName ::= NOT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operationName ::= IMPLIES 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operationName ::= GREATEREQTHAN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operationName ::= LESSTHAN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operationName ::= MINUS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operationName ::= PLUS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operationName ::= EQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operationName ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*operationName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ifExpression ::= IF expression THEN expression ELSE expression ENDIF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(84/*ifExpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operationContextAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*operationContextAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operationContextAux ::= DOUBLEPOINT returnType 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*operationContextAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operationContext ::= IDENTIFIER DDOUBLEPOINT operationName LEFTPARENTHESIS formalParameterList RIGHTPARENTHESIS DOUBLEPOINT returnType 
            {
              Object RESULT = null;
		int idContleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idContright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object idCont = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object retorno = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						parser.semantico.setContextClass( ((String) idCont) );
						parser.semantico.setContextType( ((String) retorno) ); 
					
              CUP$parser$result = new java_cup.runtime.Symbol(7/*operationContext*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contextDeclarationAux ::= operationContext 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(49/*contextDeclarationAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contextDeclaration ::= CONTEXT contextDeclarationAux 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*contextDeclaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constraintAux3 ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*constraintAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constraintAux3 ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*constraintAux3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constraintAux2Loop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(48/*constraintAux2Loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constraintAux2Loop ::= constraintAux2 constraintAux2Loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(48/*constraintAux2Loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constraintAux2LoopWithOne ::= constraintAux2 constraintAux2Loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*constraintAux2LoopWithOne*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constraintAux ::= POST 
            {
              Object RESULT = null;
		 parser.semantico.setStereotype("post"); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*constraintAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constraintAux ::= PRE 
            {
              Object RESULT = null;
		 parser.semantico.setStereotype("pre"); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*constraintAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constraintAux2 ::= constraintAux constraintAux3 DOUBLEPOINT oclExpression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(45/*constraintAux2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constraint ::= contextDeclaration constraintAux2LoopWithOne 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*constraint*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // oclExpressionsAux ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*oclExpressionsAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // oclExpressionsAux ::= constraint oclExpressionsAux 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*oclExpressionsAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // oclExpressions ::= oclExpressionsAux 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*oclExpressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // packageName ::= pathName 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*packageName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // oclFileAuxLoop ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*oclFileAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // oclFileAuxLoop ::= oclFileAux oclFileAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*oclFileAuxLoop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // oclFileAuxLoopWithOne ::= oclFileAux oclFileAuxLoop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*oclFileAuxLoopWithOne*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // oclFileAux ::= PACKAGE packageName oclExpressions ENDPACKAGE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*oclFileAux*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // oclFile ::= oclExpressions 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*oclFile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= oclFile EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // oclFile ::= oclFileAuxLoopWithOne 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*oclFile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

