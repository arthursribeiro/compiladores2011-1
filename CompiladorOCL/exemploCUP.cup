import java_cup.runtime.*;
import Semantica.AnalisadorSemantico;
import Semantica.Node;
import Semantica.DeclaratorNode;

/* Definindo alguns trechos de código que será utilizado no Analisador Sintático  */
scan with {: return scanner.next_token(); :};

parser code{: 	
				public AnalisadorSemantico semantico = new AnalisadorSemantico();
				
				public void report_error(String message, Object info){
					Symbol sym = (Symbol) info;
					throw new Error("Syntax ERROR in '"+sym.value+"' at line: "+(sym.left+1));
			  	}
		 :};

/* Terminals (tokens returned by the scanner). */
terminal SELF;
terminal VOID;
terminal RESULT;
terminal AND;
terminal BODYCONTEXT;
terminal CONTEXT;
terminal DEF;
terminal DERIVE;
terminal ELSE;
terminal ENDIF;
terminal ENDPACKAGE;
terminal IF;
terminal IMPLIES;
terminal IN;
terminal INIT;
terminal INV;
terminal LET;
terminal NOT;
terminal OR;
terminal PACKAGE;
terminal POST;
terminal PRE;
terminal ATPRE;
terminal THEN;
terminal XOR;
terminal TRUE;
terminal FALSE;
terminal DOUBLEPOINT;
terminal POINT_VIRGULA;
terminal DDOUBLEPOINT;
terminal VIRGULA;
terminal ARROW;
terminal PIPELINE;
terminal COLLECTION;
terminal IDENTIFIER;
terminal INTEGER_LITERAL;
terminal FLOAT_LITERAL;
terminal POINT;
terminal EQ;
terminal MINUS;
terminal MULTIPLY;
terminal DIVIDE;
terminal MOD;
terminal LESSTHAN;
terminal GREATERTHAN;
terminal NOTEQ;
terminal LESSEQTHAN;
terminal GREATEREQTHAN;
terminal PLUS;
terminal LEFTPARENTHESIS;
terminal RIGHTPARENTHESIS;
terminal LEFTBRACK;
terminal RIGHTBRACK;
terminal LEFTBRACKET;
terminal RIGHTBRACKET;
terminal STRING_LITERAL;
terminal OCL_PRIMITIVE;
terminal OCL_SUPER_TYPE;


/* Non terminals */
non terminal            oclFile, packageName, oclExpressions,constraint,contextDeclaration,classifierContext,
					operationContext, operationName, formalParameterList, typeSpecifier,
					collectionType, oclExpression, returnType, expression, logicalExpression, 
					relationalExpression, additiveExpression, multiplicativeExpression, qualifiers, 
					unaryExpression, postfixExpression, primaryExpression, propertyCall, propertyCallParameters, 
					literal, simpleTypeSpecifier, literalCollection, collectionItem, declarator, 
					pathName, timeExpression, actualParameterList, collectionKind, relationalOperator, 
					addOperator, multiplyOperator, unaryOperator, logicalOperator, number, 
					
					oclFileAux, oclFileAuxLoopWithOne, oclFileAuxLoop, 
					
					oclExpressionsAux, 
					
					constraintAux, constraintAux2, constraintAux3, constraintAux2LoopWithOne, constraintAux2Loop, 
					
					contextDeclarationAux, 
					
					classifierContextAux, 
					
					operationContextAux, 
					
					formalParameterListAux2, formalParameterListAux, formalParameterListAuxLoop, 
					
					logicalExpressionAux, logicalExpressionAuxLoop, 
					
					relationalExpressionAux, 
					
					additiveExpressionAux, additiveExpressionAuxLoop, 
					
					multiplicativeExpressionAux, multiplicativeExpressionAuxLoop, 
					
					unaryExpressionAux, 
					
					postfixExpressionAux, postfixExpressionAux2, postfixExpressionAux2Loop, 
					
					propertyCallParametersAux, propertyCallParametersAux2, 
					
					literalCollectionAux, literalCollectionAux2, literalCollectionAuxLoop, 
					
					collectionItemAux, 
					
					propertyCallAux, propertyCallAux2, propertyCallAux3, 
					
					declaratorAux, declaratorAuxLoop, declaratorAux2,
					
					pathNameAux, pathNameAuxLoop, 
					
					actualParameterListAux, actualParameterListAuxLoop, 
					
					booleanLiteral, 
					
					ifExpression,oclType;

/* Precedences */

precedence left VIRGULA;
precedence left IMPLIES;
precedence left NOT;
precedence left AND;
precedence left OR;
precedence left XOR;
precedence left EQ, NOTEQ;
precedence left LESSTHAN, GREATERTHAN, GREATEREQTHAN, LESSEQTHAN;
precedence left IF, THEN, ELSE, ENDIF;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence left NOT;
precedence left POINT, ARROW, IDENTIFIER;
precedence left ATPRE;


/* The grammar */

/* oclFile ::= ( PACKAGE packageName oclExpressions ENDPACKAGE )+; */

oclFile ::= oclFileAuxLoopWithOne | oclExpressions;

oclFileAux ::= PACKAGE packageName oclExpressions ENDPACKAGE;

oclFileAuxLoopWithOne ::= oclFileAux oclFileAuxLoop;

oclFileAuxLoop ::= oclFileAux oclFileAuxLoop | ;



packageName ::= pathName;



/* oclExpressions ::= ( constraint )*; */

oclExpressions ::= oclExpressionsAux;

oclExpressionsAux ::= constraint oclExpressionsAux | ;


/* constraint ::= contextDeclaration( (PRE|POST) IDENTIFIER? DOUBLEPOINT oclExpression)+; */

constraint ::= contextDeclaration constraintAux2LoopWithOne;

constraintAux2 ::= constraintAux constraintAux3 DOUBLEPOINT oclExpression;
				
constraintAux ::= PRE  {: parser.semantico.setStereotype("pre"); :} | POST  {: parser.semantico.setStereotype("post"); :};

constraintAux2LoopWithOne ::= constraintAux2 constraintAux2Loop;

constraintAux2Loop ::= constraintAux2 constraintAux2Loop | ;

constraintAux3 ::= IDENTIFIER | ;


/* contextDeclaration ::= CONTEXT ( operationContext ); */

contextDeclaration ::= CONTEXT contextDeclarationAux;

contextDeclarationAux ::= operationContext;


/* operationContext ::= IDENTIFIER DDOUBLEPOINT operationName LEFTPARENTHESIS formalParameterList RIGHTPARENTHESIS ( DOUBLEPOINT returnType )?; */

operationContext ::= IDENTIFIER:idCont DDOUBLEPOINT operationName:opName LEFTPARENTHESIS formalParameterList:params RIGHTPARENTHESIS DOUBLEPOINT returnType:retorno
					{:
						parser.semantico.setContextClass( ((String) idCont), idContleft );
						parser.semantico.setContextFunction( ((String) opName), ((Node) params) ,((Node) retorno), opNameleft ); 
					:};

operationContextAux ::= DOUBLEPOINT returnType | ;



ifExpression ::= IF expression:e1 THEN expression:e2 ELSE expression:e3 ENDIF
                               {:  if(((Node) e1).getType().equalsIgnoreCase("Boolean")){
                                       if(((Node) e2).getType().equalsIgnoreCase(((Node)e3).getType())) {
                                                   RESULT = new Node("if", ((Node) e2).getType());
                                               } else {
                                                   throw new Exception("Semantic Error: If expression is returning different type values.");
                                               }
                                       } else {
                                               throw new Exception("Semantic Error: No Boolean Expression on if parameter");
                                       } :};




operationName ::= IDENTIFIER:idOp {: RESULT = ((String) idOp); :};
					
					
/* formalParameterList ::= ( IDENTIFIER DOUBLEPOINT typeSpecifier (VIRGULA IDENTIFIER DOUBLEPOINT typeSpecifier )* )?; */
					
formalParameterList ::= formalParameterListAux2:formLoop 
						{:
							RESULT = formLoop;
						:};

formalParameterListAux2 ::= IDENTIFIER:idParam DOUBLEPOINT typeSpecifier:formTypeSpec formalParameterListAuxLoop:formLoop
							{:
								RESULT = parser.semantico.checkFormalParameterListAux2(idParam, formTypeSpec, formLoop,formTypeSpecleft);
							:}
							 | ;

formalParameterListAux ::= VIRGULA IDENTIFIER:idParam DOUBLEPOINT typeSpecifier:formTypeSpec
							{:
								RESULT = parser.semantico.checkFormalParameterListAux(idParam, formTypeSpec,formTypeSpecleft);
							:};

formalParameterListAuxLoop ::= formalParameterListAux:formParam formalParameterListAuxLoop:formLoop 
							{:
								RESULT = parser.semantico.checkFormalParameterListAuxLoop(formParam, formLoop);
							:}| ;



typeSpecifier ::= simpleTypeSpecifier:simpTpSpec 
				{: 
					RESULT = simpTpSpec; 
				:}  | collectionType:colTp;



collectionType ::= collectionKind LEFTPARENTHESIS simpleTypeSpecifier RIGHTPARENTHESIS;



oclExpression ::= expression:exp {: RESULT = exp; :};



returnType ::= typeSpecifier:typeSpec 
			{: 
				RESULT = typeSpec; 
			:} 
			| VOID:void1 
			{: 
				RESULT = new Node("void","void"); 
			:};



expression ::= logicalExpression:logexp 
			{: 
				//System.out.println( ((Node)logexp).getValue() );
				//if( ! ((Node)logexp).getType().equals("Boolean") )
				//	throw new Exception("Semantic ERROR: Must have a <Boolean> inside <"+parser.semantico.getStereotype().toUpperCase()+"> and got <"+((Node)logexp).getType()+"> at line: "+logexpleft);
				RESULT = logexp; 
			:};



/* logicalExpression ::= relationalExpression ( logicalOperator relationalExpression )*; */

logicalExpression ::= relationalExpression:relexp logicalExpressionAuxLoop:logexploop 
						{: 
							RESULT = parser.semantico.checkLogicalExpression(relexp, logexploop, relexpleft, logexploopleft); 
						:} ;

logicalExpressionAux ::= logicalOperator:logop relationalExpression:relexp2 
						{:
							RESULT = parser.semantico.checkLogicalExpressionAux(relexp2, logop, relexp2left);
						:};

logicalExpressionAuxLoop ::= logicalExpressionAux:logexpa logicalExpressionAuxLoop:logexpaloop 
							{:
								RESULT = parser.semantico.checkLogicalExpressionAuxLoop(logexpa, logexpaloop, logexpaloopleft);
							:}
							| ;


/* relationalExpression ::= additiveExpression ( relationalOperator additiveExpression )?; */

relationalExpression ::= additiveExpression:addexp relationalExpressionAux:relexpaux3 
						{:
							RESULT = parser.semantico.checkRelationalExpression(relexpaux3, addexp,addexpleft);
						:};

relationalExpressionAux ::= relationalOperator:relop additiveExpression:addexp2 
							{:
								RESULT = parser.semantico.checkRelationalExpressionAux(addexp2, relop, addexp2left);
							:}
							| ;


/* additiveExpression ::= multiplicativeExpression ( addOperator multiplicativeExpression )*; */

additiveExpression ::= multiplicativeExpression:multexp additiveExpressionAuxLoop:addexpaloop 
						{:
							RESULT = parser.semantico.checkAdditiveExpression(addexpaloop, multexp, addexpaloopleft, multexpleft);
						:};

additiveExpressionAux ::= addOperator:addop multiplicativeExpression:multexp2 
						{:
							RESULT = parser.semantico.checkAdditiveExpressionAux(addop, multexp2, multexp2left);
						:};

additiveExpressionAuxLoop ::= additiveExpressionAux:addexpa additiveExpressionAuxLoop:addexpaloop 
							{:
								RESULT = parser.semantico.checkAdditiveExpressionAuxLoop(addexpa, addexpaloop, addexpaloopleft, addexpaleft);
							:} 
							
							| ;



/* multiplicativeExpression ::= unaryExpression ( multiplyOperator unaryExpression )*; */

multiplicativeExpression ::= unaryExpression:unexp multiplicativeExpressionAuxLoop:multexpaloop 
							{:
								RESULT = parser.semantico.checkMultiplicativeExpression(multexpaloop, unexp, multexpaloopleft, unexpleft);
							:};

multiplicativeExpressionAux ::= multiplyOperator:multop unaryExpression:unexp
								{:
									RESULT  = parser.semantico.checkMultiplicativeExpressionAux(multop, unexp, unexpleft);
								:};

multiplicativeExpressionAuxLoop ::= multiplicativeExpressionAux:addexpa multiplicativeExpressionAuxLoop:addexpaloop 
									{:
										RESULT  = parser.semantico.checkMultiplicativeExpressionAuxLoop(addexpaloop, addexpa, addexpaloopleft, addexpaleft);
									:} 
									
									| ;




/* unaryExpression ::= ( unaryOperator postfixExpression ) | postfixExpression; */

unaryExpression ::= unaryExpressionAux:unexp 
						{:
							RESULT = unexp;
						:} 
					| postfixExpression:postfexp 
						{:
							RESULT = postfexp;
						:};

unaryExpressionAux ::= unaryOperator:unop postfixExpression:postfexp 
						{:
							RESULT = postfexp;
						:};




/* postfixExpression ::= primaryExpression ( (POINT | ARROW) propertyCall )*; */

postfixExpression ::= primaryExpression:primexp postfixExpressionAux2Loop:postfexp
					{:
						Node resultado;
						System.out.println("LOL");
						Node aux = new Node();
						if( ((Node)primexp).getList_caminho().size() < 1 ){
							aux.addCaminho(((Node)primexp));
						}else{
							aux.addAllCaminho(((Node)primexp).getList_caminho());
						}
						if (postfexp != null){
							aux.addAllCaminho(((Node)postfexp).getList_caminho());
						}
						if( postfexp != null || ((Node)primexp).getRole() == Node.VARIABLE ){
						    System.out.println("Esse bixim aqui: "+ ((Node)aux).getList_caminho().get(((Node)aux).getList_caminho().size()-1)+ " caminho : " + ((Node)aux).caminhoToString());
							System.out.println("Teste Parametros: " + ((Node)aux).printAllParamethrs() );
							resultado = parser.semantico.checkAllPathFunction(aux.getList_caminho(),primexpleft);
							RESULT = resultado;
						}else{
							RESULT = primexp;
						}
					:};

postfixExpressionAux ::= POINT {: RESULT = "point"; :} | ARROW {: RESULT = "arrow"; :};

postfixExpressionAux2 ::= postfixExpressionAux:paux propertyCall:pc {: System.out.println("ROle : " +((Node)pc).getRole() + " Value :"+((Node)pc).getValue()); RESULT = (Node)pc; :};

postfixExpressionAux2Loop ::= postfixExpressionAux2:paux2 postfixExpressionAux2Loop:ploop {: Node resultado = new Node();
																							 Node aux = (Node)paux2;
																							 if( aux.getRole() == Semantica.Node.FUNCTION ){
																							 	System.out.println("MACONHA Result: " + ((Node) aux).listToString() );
																							 	resultado.addCaminho(aux);
																							 }else{
																							 	resultado.addAllCaminho(((Node)paux2).getList_caminho());
																							 }
																						 	 if(ploop != null){
																						 	 	resultado.addAllCaminho(((Node)ploop).getList_caminho());
																						 }RESULT  = resultado;:}
																						 | {: RESULT = null; :} ;
primaryExpression ::= literalCollection 
					| literal:lit1 
						{: 
							RESULT = lit1; 
						:} 
					| propertyCall:p1 {: RESULT = p1; :}
					| LEFTPARENTHESIS expression:exp RIGHTPARENTHESIS 
						{:
							RESULT = exp;
						:} 
					| SELF {: RESULT = new Node("self",parser.semantico.getContextClass()); :}
					| SELF timeExpression   {: RESULT = new Node("self",parser.semantico.getContextClass()); :}
					| ifExpression:ifStmt {: System.out.println("tipo na primary " + ((Node)ifStmt).getType()); RESULT = (Node)ifStmt; :};



/* propertyCallParameters := LEFTPARENTHESIS ( declarator )? ( actualParameterList )? RIGHTPARENTHESIS; */



propertyCallParameters ::= LEFTPARENTHESIS propertyCallParametersAux:pcpa propertyCallParametersAux2:prop1  RIGHTPARENTHESIS {: if(pcpa != null && prop1 == null) {
                                                                                                                                    throw new Exception("Expected expression after declarator." + pcpaleft);
                                                                                                                                } :}| 
							LEFTPARENTHESIS propertyCallParametersAux2:prop2  RIGHTPARENTHESIS{: 
																								 if(prop2!= null){
																									 System.out.println("blaca baga :" + ((Node)prop2).listToString());
																									 
																								  	RESULT = (Node)prop2;
																								 }else{
																								 	RESULT = new Node();
																								 }
																								 :};

propertyCallParametersAux ::= declarator:d {: RESULT = d; :};

propertyCallParametersAux2 ::= actualParameterList:a1 {: RESULT = (Node)a1;:}
								|{: RESULT = null; :} ;




booleanLiteral ::= TRUE:boolTrue {: RESULT = new Node(boolTrue,"Boolean"); :} 
					| FALSE:boolFalse {: RESULT = new Node(boolFalse,"Boolean"); :};

literal ::= STRING_LITERAL:litString {: RESULT = new Node(litString,"String"); :} 
			| number:litNum {: RESULT = litNum; :} 
			| booleanLiteral:litBool {: RESULT = litBool; :} 
			| RESULT:litResult 
				{: 	parser.semantico.checkStereotype("result",litResultleft); 
					RESULT = new Node("result",parser.semantico.getContextReturn());
				:};



simpleTypeSpecifier ::= pathName:path {: RESULT = path; :}
						|oclType:oclT {: RESULT = oclT; :} ;

oclType ::= OCL_SUPER_TYPE:super1 {: RESULT = new Node(super1, ((String) super1) ); :}
		 | OCL_PRIMITIVE:basic1 {: RESULT = new Node(basic1, ((String) basic1)); :} ;



/* literalCollection ::= collectionKind LEFTBRACKET ( collectionItem (VIRGULA collectionItem )* )? RIGHTBRACKET; */

literalCollection ::= collectionKind LEFTBRACKET literalCollectionAux2 RIGHTBRACKET;

literalCollectionAux ::= VIRGULA collectionItem;

literalCollectionAuxLoop ::= literalCollectionAux literalCollectionAuxLoop | ;

literalCollectionAux2 ::= collectionItem literalCollectionAuxLoop | ;



/* collectionItem ::= expression (POINT POINT expression )?; */

collectionItem ::= expression collectionItemAux;

collectionItemAux ::= POINT POINT expression | ;



/* propertyCall ::= pathName ( qualifiers )? ( propertyCallParameters )?; */

propertyCall ::= pathName:pt propertyCallAux propertyCallAux2 propertyCallAux3:prop3 {: Node resultado = new Node();
																						if(prop3 == null){
																							resultado.setRole(Semantica.Node.VARIABLE);
																							resultado.addAllCaminho(((Node)pt).getElements());
																						}else{
																							resultado.setRole(Semantica.Node.FUNCTION);
																							resultado.setValue(((Node)pt).getElements().get(((Node)pt).getElements().size()-1).getValue());
																							System.out.println("Value :" + resultado.getValue());
																							resultado.addAllElements(((Node) prop3).getElements());
																						}RESULT = resultado;:};
propertyCallAux ::= timeExpression | ;

propertyCallAux2 ::= qualifiers:q1 {: RESULT = q1; :} 
					 | {: RESULT = null; :};

propertyCallAux3 ::= propertyCallParameters:prop1 {: RESULT = prop1; :}  
					|{: RESULT = null; :} ;

qualifiers ::= LEFTBRACK actualParameterList:a1 RIGHTBRACK {: RESULT = (Node)a1; :};



/* declarator ::= IDENTIFIER ( VIRGULA IDENTIFIER )* ( DOUBLEPOINT simpleTypeSpecifier )? ( POINT_VIRGULA IDENTIFIER POINT_VIRGULA typeSpecifier EQ expression )? PIPELINE ; */

declarator ::= IDENTIFIER:id declaratorAuxLoop:dal declaratorAux2:da2 PIPELINE {: if(da2 == null) {
                                                                                     DeclaratorNode decl = new DeclaratorNode(DeclaratorNode.NON_TYPE_DECLARATOR);
                                                                                     decl.addNode(new Node(id.toString(), null));
                                                                                     RESULT = decl;
                                                                                 } else {
                                                                                     DeclaratorNode decl = new DeclaratorNode(DeclaratorNode.TYPED_DECLARATOR);
                                                                                     decl.setTipoConteudo(((Node)da2).getType());
                                                                                     decl.addNode(new Node(id.toString(), null));
                                                                                     decl.addNodes(((Node)da2).getElements());
                                                                                     RESULT = decl;  
                                                                                 } 
                                                                              :} ;

declaratorAux ::= VIRGULA IDENTIFIER:id {: RESULT = new Node(id.toString(), null); :};

declaratorAuxLoop ::= declaratorAux:da declaratorAuxLoop:dal {: Node n = new Node();
                                                                if(dal == null) {
                                                                    n.addElement((Node)da);
                                                                } else {
                                                                    n.addElement((Node)da);
                                                                    n.addAllElements(((Node)dal).getElements());
                                                                } 
                                                                RESULT = n;:} 
                    | {: RESULT = null; :};

declaratorAux2 ::= DOUBLEPOINT simpleTypeSpecifier:sts {: RESULT = new Node(null, sts.toString()); :} 
                 | {: RESULT = null; :}  ;



pathName ::= IDENTIFIER:id pathNameAuxLoop:ploop {: Node resultado = new Node();
													Node identifier = new Node(id.toString());
													if(ploop == null){
														resultado.addElement(identifier);
														
													}else{
														resultado.addElement(identifier);
														resultado.addAllElements(((Node) ploop).getElements());
													}
													RESULT = resultado;   :};

pathNameAux ::= DDOUBLEPOINT IDENTIFIER:id1 {: RESULT = new Node(id1.toString());:};

pathNameAuxLoop ::= pathNameAux:paux pathNameAuxLoop:ploop {: Node resultado;
															  resultado = new Node();
																if(ploop == null){
																	resultado.addElement((Node)paux);
																}else{
																	resultado.addElement((Node)paux);
																	resultado.addAllElements(((Node) ploop).getElements());
																}RESULT = resultado; :}
				| {: RESULT = null; :} ;




timeExpression ::= ATPRE:atPre {: parser.semantico.checkStereotype("@pre",atPreleft); :};



actualParameterList ::= expression:e1 actualParameterListAuxLoop:aloop {: Node resultado = new Node();
																		if(e1 == null && aloop == null){
																			resultado = null;
																		}else if(aloop == null){
																			resultado.addElement((Node)e1);
																		}else{
																			resultado.addElement((Node)e1);
																			resultado.addAllElements(((Node) aloop).getElements());}
																		RESULT = resultado; :};

actualParameterListAux ::= VIRGULA expression:e1 {: RESULT = (Node)e1;:};

actualParameterListAuxLoop ::= actualParameterListAux:a1 actualParameterListAuxLoop:aloop{: Node resultado = new Node();
																							if(aloop == null) {
																								resultado.addElement((Node) a1);
																							}
																							else{
																								resultado.addElement((Node)a1);
																								resultado.addAllElements(((Node) aloop).getElements());}
																							RESULT = resultado; :}
                              |{: RESULT = null; :} ;

collectionKind ::= COLLECTION;



relationalOperator ::= EQ {: RESULT = "="; :}  
						| GREATERTHAN  {: RESULT = ">"; :} 
						| LESSTHAN {: RESULT = "<"; :} 
						| GREATEREQTHAN {: RESULT = ">="; :}  
						| LESSEQTHAN {: RESULT = "<="; :}  
						| NOTEQ {: RESULT = "<>"; :} ;



addOperator ::= PLUS {: RESULT = "+"; :}  
				| MINUS  {: RESULT = "-"; :} 
				| MOD {: RESULT = "%"; :} ;



multiplyOperator ::= MULTIPLY {: RESULT = "*"; :}  
					| DIVIDE {: RESULT = "/"; :}  
					| MOD {: RESULT = "%"; :} ;



unaryOperator ::= MINUS {: RESULT = "-"; :} | NOT {: RESULT = "not"; :} ;



logicalOperator ::= AND {: RESULT = "and"; :} 
					| OR {: RESULT = "or"; :} 
					| XOR {: RESULT = "xor"; :} 
					| IMPLIES {: RESULT = "implies"; :};



number ::= INTEGER_LITERAL:numbInt {: RESULT = new Node(numbInt, "Integer"); :} | FLOAT_LITERAL:numbFloat {: RESULT = new Node(numbFloat, "Float"); :};